<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: Singleton.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>Singleton.hpp</h1><a href="Singleton_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2009-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="Exc_8hpp.htm" title="Basic Exception class.">Exc.hpp</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm" title="Debug utilities.">debug.hpp</a>&quot;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">namespace </span>ting{
<a name="l00038"></a>00038 
<a name="l00058"></a><a class="code" href="classting_1_1Singleton.htm">00058</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Singleton.htm" title="singleton base class.">Singleton</a>{
<a name="l00059"></a>00059         
<a name="l00060"></a>00060         <span class="keyword">inline</span> <span class="keyword">static</span> T*&amp; StaticMemoryBlock(){
<a name="l00061"></a>00061                 <span class="keyword">static</span> T* instance = 0;
<a name="l00062"></a>00062                 <span class="keywordflow">return</span> instance;
<a name="l00063"></a>00063         }
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="keyword">protected</span>:<span class="comment">//use only as a base class</span>
<a name="l00066"></a><a class="code" href="classting_1_1Singleton.htm#adf0a0e3ed67d7b0910e0da689f9537e5">00066</a>         <a class="code" href="classting_1_1Singleton.htm#adf0a0e3ed67d7b0910e0da689f9537e5">Singleton</a>(){
<a name="l00067"></a>00067                 <span class="keywordflow">if</span>(Singleton::StaticMemoryBlock() != 0)
<a name="l00068"></a>00068                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Singleton::Singleton(): instance is already created&quot;</span>);
<a name="l00069"></a>00069 
<a name="l00070"></a>00070                 Singleton::StaticMemoryBlock() = <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);
<a name="l00071"></a>00071         }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="keyword">private</span>:
<a name="l00074"></a>00074 
<a name="l00075"></a>00075         <span class="comment">//copying is not allowed</span>
<a name="l00076"></a>00076         <a class="code" href="classting_1_1Singleton.htm#adf0a0e3ed67d7b0910e0da689f9537e5">Singleton</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Singleton.htm" title="singleton base class.">Singleton</a>&amp;){
<a name="l00077"></a>00077                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00078"></a>00078         }
<a name="l00079"></a>00079         <a class="code" href="classting_1_1Singleton.htm#adf0a0e3ed67d7b0910e0da689f9537e5">Singleton</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1Singleton.htm#adf0a0e3ed67d7b0910e0da689f9537e5">Singleton</a>&amp;){
<a name="l00080"></a>00080                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00081"></a>00081         }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="keyword">public</span>:
<a name="l00090"></a><a class="code" href="classting_1_1Singleton.htm#a1b496757a109b25e3087b077c681fb49">00090</a>         <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Singleton.htm#a1b496757a109b25e3087b077c681fb49" title="tells if singleton object is created or not.">IsCreated</a>(){
<a name="l00091"></a>00091                 <span class="keywordflow">return</span> Singleton::StaticMemoryBlock() != 0;
<a name="l00092"></a>00092         }
<a name="l00093"></a>00093 
<a name="l00098"></a><a class="code" href="classting_1_1Singleton.htm#af2840bff8ecd090e2f81545b82c0a50a">00098</a>         <span class="keyword">inline</span> <span class="keyword">static</span> T&amp; <a class="code" href="classting_1_1Singleton.htm#af2840bff8ecd090e2f81545b82c0a50a" title="get singleton instance.">Inst</a>(){
<a name="l00099"></a>00099                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(<a class="code" href="classting_1_1Singleton.htm#a1b496757a109b25e3087b077c681fb49" title="tells if singleton object is created or not.">Singleton::IsCreated</a>(), <span class="stringliteral">&quot;Singleton::Inst(): Singleton object is not created&quot;</span>)
<a name="l00100"></a>00100                 <span class="keywordflow">return</span> *(Singleton::StaticMemoryBlock());
<a name="l00101"></a>00101         }
<a name="l00102"></a>00102 
<a name="l00103"></a><a class="code" href="classting_1_1Singleton.htm#a208506cb2eb550e684f2c9e6b9187143">00103</a>         <a class="code" href="classting_1_1Singleton.htm#a208506cb2eb550e684f2c9e6b9187143">~Singleton</a>(){
<a name="l00104"></a>00104                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(Singleton::StaticMemoryBlock() == static_cast&lt;T*&gt;(<span class="keyword">this</span>))
<a name="l00105"></a>00105                 Singleton::StaticMemoryBlock() = 0;
<a name="l00106"></a>00106         }
<a name="l00107"></a>00107 };
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 }<span class="comment">//~namespace ting</span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
