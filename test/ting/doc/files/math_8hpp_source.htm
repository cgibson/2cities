<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: math.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>math.hpp</h1><a href="math_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00033"></a>00033 <span class="preprocessor">#pragma once</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;cmath&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;limits&gt;</span> <span class="comment">//this is for std::numeric_limits&lt;float&gt;::quiet_NaN(); etc.</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">namespace </span>ting{
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">//======================</span>
<a name="l00041"></a>00041 <span class="comment">//Utility math functions</span>
<a name="l00042"></a>00042 <span class="comment">//======================</span>
<a name="l00043"></a>00043 
<a name="l00057"></a><a class="code" href="namespaceting.htm#ab6b02dc3a432b859989f9b44a98a58b2">00057</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_Type&gt; <span class="keyword">inline</span> T_Type <a class="code" href="namespaceting.htm#ab6b02dc3a432b859989f9b44a98a58b2" title="Get sign of a number.">Sign</a>(T_Type n){
<a name="l00058"></a>00058         <span class="keywordflow">return</span> n &gt; 0 ? (1) : (-1);
<a name="l00059"></a>00059 }
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 
<a name="l00074"></a><a class="code" href="namespaceting.htm#a128b67678415f0006c23e9901b1ba257">00074</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_Type&gt; <span class="keyword">inline</span> T_Type <a class="code" href="namespaceting.htm#a128b67678415f0006c23e9901b1ba257" title="Get absolute value of a number.">Abs</a>(T_Type n){
<a name="l00075"></a>00075         <span class="keywordflow">return</span> n &gt; 0 ? n : (-n);
<a name="l00076"></a>00076 }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 
<a name="l00087"></a><a class="code" href="namespaceting.htm#a0ff74d4f3338635cfee21416cca23774">00087</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_Type&gt; <span class="keyword">inline</span> T_Type <a class="code" href="namespaceting.htm#a0ff74d4f3338635cfee21416cca23774" title="Get minimal of two given values.">Min</a>(T_Type a, T_Type b){
<a name="l00088"></a>00088         <span class="keywordflow">return</span> a &lt; b ? a : b;
<a name="l00089"></a>00089 }
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 
<a name="l00100"></a><a class="code" href="namespaceting.htm#a51f203d35a15702a459c4d8191fb13f6">00100</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_Type&gt; <span class="keyword">inline</span> T_Type <a class="code" href="namespaceting.htm#a51f203d35a15702a459c4d8191fb13f6" title="Get maximal of two given values.">Max</a>(T_Type a, T_Type b){
<a name="l00101"></a>00101         <span class="keywordflow">return</span> a &gt; b ? a : b;
<a name="l00102"></a>00102 }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 
<a name="l00110"></a><a class="code" href="namespaceting.htm#a43b6821347a98cec53a9a16987777ce7">00110</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="namespaceting.htm#a43b6821347a98cec53a9a16987777ce7" title="Get number Pi.">DPi</a>(){
<a name="l00111"></a>00111         <span class="keywordflow">return</span> T(3.14159265358979323846264338327950288);
<a name="l00112"></a>00112 }
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 
<a name="l00120"></a><a class="code" href="namespaceting.htm#aa62cceec4e1169e774ea6f03ebd7d20f">00120</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="namespaceting.htm#aa62cceec4e1169e774ea6f03ebd7d20f" title="Get 2 * Pi.">D2Pi</a>(){
<a name="l00121"></a>00121         <span class="keywordflow">return</span> T(2) * DPi&lt;T&gt;();
<a name="l00122"></a>00122 }
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 
<a name="l00130"></a><a class="code" href="namespaceting.htm#a2a72667b952369bc91bb5a232337461f">00130</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="namespaceting.htm#a2a72667b952369bc91bb5a232337461f" title="Get natural logarithm of 2, i.e.">DLnOf2</a>(){
<a name="l00131"></a>00131         <span class="keywordflow">return</span> T(0.693147181);
<a name="l00132"></a>00132 }
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 
<a name="l00140"></a><a class="code" href="namespaceting.htm#ab5f789dfdb15dc9aa0f9ccffe4652330">00140</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="namespaceting.htm#ab5f789dfdb15dc9aa0f9ccffe4652330" title="Get Not-A-Number.">DNaN</a>(){
<a name="l00141"></a>00141         <span class="keywordflow">return</span> std::numeric_limits&lt;T&gt;::quiet_NaN();
<a name="l00142"></a>00142 }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 
<a name="l00150"></a><a class="code" href="namespaceting.htm#ae286b6d4fcc60f608251074916a6b45a">00150</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="namespaceting.htm#ae286b6d4fcc60f608251074916a6b45a" title="Get infinity value.">DInf</a>(){
<a name="l00151"></a>00151         <span class="keywordflow">return</span> std::numeric_limits&lt;T&gt;::infinity();
<a name="l00152"></a>00152 }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 <span class="comment">//Power functions</span>
<a name="l00157"></a>00157 
<a name="l00163"></a><a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a">00163</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_Type&gt; <span class="keyword">inline</span> T_Type <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(T_Type x){
<a name="l00164"></a>00164         <span class="keywordflow">return</span> x * x;
<a name="l00165"></a>00165 }
<a name="l00166"></a>00166 
<a name="l00170"></a><a class="code" href="namespaceting.htm#af7a55ce33a3ca2c2ed49731cb2157e0f">00170</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_Type&gt; <span class="keyword">inline</span> T_Type <a class="code" href="namespaceting.htm#af7a55ce33a3ca2c2ed49731cb2157e0f" title="Calculate x^3.">Pow3</a>(T_Type x){
<a name="l00171"></a>00171         <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(x) * x;
<a name="l00172"></a>00172 }
<a name="l00173"></a>00173 
<a name="l00177"></a><a class="code" href="namespaceting.htm#a32b4844e3b5ab8566dae37f782476640">00177</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_Type&gt; <span class="keyword">inline</span> T_Type <a class="code" href="namespaceting.htm#a32b4844e3b5ab8566dae37f782476640" title="Calculate x^4.">Pow4</a>(T_Type x){
<a name="l00178"></a>00178         <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(<a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(x));
<a name="l00179"></a>00179 }
<a name="l00180"></a>00180 
<a name="l00184"></a><a class="code" href="namespaceting.htm#a8147759c57e834f3fb7306afb3e646d4">00184</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_Type&gt; <span class="keyword">inline</span> T_Type <a class="code" href="namespaceting.htm#a8147759c57e834f3fb7306afb3e646d4" title="Calculate x^5.">Pow5</a>(T_Type x){
<a name="l00185"></a>00185         <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(x) * <a class="code" href="namespaceting.htm#af7a55ce33a3ca2c2ed49731cb2157e0f" title="Calculate x^3.">Pow3</a>(x);
<a name="l00186"></a>00186 }
<a name="l00187"></a>00187 
<a name="l00194"></a><a class="code" href="namespaceting.htm#a739af88cc61a4ad19f5c07354a865255">00194</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="namespaceting.htm#a739af88cc61a4ad19f5c07354a865255" title="Calculates x^p.">Pow</a>(T x, T p){
<a name="l00195"></a>00195         return ::pow(x, p);
<a name="l00196"></a>00196 }
<a name="l00197"></a>00197 
<a name="l00201"></a><a class="code" href="namespaceting.htm#ac2ecea3eca50133bd7f80c8b8219f727">00201</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_Type&gt; <span class="keyword">inline</span> T_Type <a class="code" href="namespaceting.htm#ac2ecea3eca50133bd7f80c8b8219f727" title="Calculate cubic root of a number.">CubicRoot</a>(T_Type x){
<a name="l00202"></a>00202         <span class="keywordflow">if</span>(x &gt; 0)
<a name="l00203"></a>00203                 <span class="keywordflow">return</span> exp(::log(x) / 3);
<a name="l00204"></a>00204         <span class="keywordflow">else</span> <span class="keywordflow">if</span>(x == 0)
<a name="l00205"></a>00205                 <span class="keywordflow">return</span> 0;
<a name="l00206"></a>00206         <span class="keywordflow">else</span>
<a name="l00207"></a>00207                 <span class="keywordflow">return</span> -exp(::log(-x) / 3);
<a name="l00208"></a>00208 }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00223"></a><a class="code" href="namespaceting.htm#aa8e349e6291656a37c371fc952c65a41">00223</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_Type&gt; <span class="keyword">inline</span> T_Type <a class="code" href="namespaceting.htm#aa8e349e6291656a37c371fc952c65a41" title="Calculate argument of a complex number.">Arg</a>(T_Type x, T_Type y){
<a name="l00224"></a>00224         T_Type a;
<a name="l00225"></a>00225         <span class="keywordflow">if</span>(x == 0)
<a name="l00226"></a>00226                 a = DPi&lt;T_Type&gt;() / 2;
<a name="l00227"></a>00227         <span class="keywordflow">else</span> <span class="keywordflow">if</span>(x &gt; 0)
<a name="l00228"></a>00228                 a = T_Type(::atan(<a class="code" href="namespaceting.htm#a128b67678415f0006c23e9901b1ba257" title="Get absolute value of a number.">Abs</a>(y / x)));
<a name="l00229"></a>00229         <span class="keywordflow">else</span>
<a name="l00230"></a>00230                 a = DPi&lt;T_Type&gt;() - T_Type(::atan(<a class="code" href="namespaceting.htm#a128b67678415f0006c23e9901b1ba257" title="Get absolute value of a number.">Abs</a>(y / x)));
<a name="l00231"></a>00231 
<a name="l00232"></a>00232         <span class="keywordflow">if</span>(y &gt;= 0)
<a name="l00233"></a>00233                 <span class="keywordflow">return</span> a;
<a name="l00234"></a>00234         <span class="keywordflow">else</span>
<a name="l00235"></a>00235                 <span class="keywordflow">return</span> -a;
<a name="l00236"></a>00236 }
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 
<a name="l00243"></a><a class="code" href="namespaceting.htm#afd699254b968860b5c69ca809a190905">00243</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="namespaceting.htm#afd699254b968860b5c69ca809a190905" title="Calculate sine of an angle.">Sin</a>(T x){
<a name="l00244"></a>00244         <span class="keywordflow">return</span> x.Sin();
<a name="l00245"></a>00245 }
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 <span class="preprocessor">#ifndef M_DOC_DONT_EXTRACT //for doxygen</span>
<a name="l00250"></a>00250 <span class="preprocessor"></span><span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">float</span> Sin&lt;float&gt;(<span class="keywordtype">float</span> x){
<a name="l00251"></a>00251         return ::sin(x);
<a name="l00252"></a>00252 }
<a name="l00253"></a>00253 <span class="preprocessor">#endif</span>
<a name="l00254"></a>00254 <span class="preprocessor"></span>
<a name="l00255"></a>00255 
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 <span class="preprocessor">#ifndef M_DOC_DONT_EXTRACT //for doxygen</span>
<a name="l00258"></a>00258 <span class="preprocessor"></span><span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">double</span> Sin&lt;double&gt;(<span class="keywordtype">double</span> x){
<a name="l00259"></a>00259         return ::sin(x);
<a name="l00260"></a>00260 }
<a name="l00261"></a>00261 <span class="preprocessor">#endif</span>
<a name="l00262"></a>00262 <span class="preprocessor"></span>
<a name="l00263"></a>00263 
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 <span class="comment">/*</span>
<a name="l00266"></a>00266 <span class="comment">//TODO:</span>
<a name="l00267"></a>00267 <span class="comment">template &lt;&gt; inline long double Sin&lt;long double&gt;(long double x){</span>
<a name="l00268"></a>00268 <span class="comment">        return ::sin(x);</span>
<a name="l00269"></a>00269 <span class="comment">}</span>
<a name="l00270"></a>00270 <span class="comment">*/</span>
<a name="l00271"></a>00271 
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 
<a name="l00277"></a><a class="code" href="namespaceting.htm#afb16e6f011b877ff550dbdd5cf5b5bfc">00277</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="namespaceting.htm#afb16e6f011b877ff550dbdd5cf5b5bfc" title="Calculate cosine of an angle.">Cos</a>(T x){
<a name="l00278"></a>00278         <span class="keywordflow">return</span> x.Cos();
<a name="l00279"></a>00279 }
<a name="l00280"></a>00280 
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 <span class="preprocessor">#ifndef M_DOC_DONT_EXTRACT //for doxygen</span>
<a name="l00284"></a>00284 <span class="preprocessor"></span><span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">float</span> Cos&lt;float&gt;(<span class="keywordtype">float</span> x){
<a name="l00285"></a>00285         return ::cos(x);
<a name="l00286"></a>00286 }
<a name="l00287"></a>00287 <span class="preprocessor">#endif</span>
<a name="l00288"></a>00288 <span class="preprocessor"></span>
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 
<a name="l00291"></a>00291 <span class="preprocessor">#ifndef M_DOC_DONT_EXTRACT //for doxygen</span>
<a name="l00292"></a>00292 <span class="preprocessor"></span><span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">double</span> Cos&lt;double&gt;(<span class="keywordtype">double</span> x){
<a name="l00293"></a>00293         return ::cos(x);
<a name="l00294"></a>00294 }
<a name="l00295"></a>00295 <span class="preprocessor">#endif</span>
<a name="l00296"></a>00296 <span class="preprocessor"></span>
<a name="l00297"></a>00297 
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 <span class="comment">/*</span>
<a name="l00300"></a>00300 <span class="comment">//TODO:</span>
<a name="l00301"></a>00301 <span class="comment">template &lt;&gt; inline long double Cos&lt;long double&gt;(long double x){</span>
<a name="l00302"></a>00302 <span class="comment">        return ::cos(x);</span>
<a name="l00303"></a>00303 <span class="comment">}</span>
<a name="l00304"></a>00304 <span class="comment">*/</span>
<a name="l00305"></a>00305 
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 
<a name="l00311"></a><a class="code" href="namespaceting.htm#ade87193a6277b1283ed987e4931162a4">00311</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="namespaceting.htm#ade87193a6277b1283ed987e4931162a4" title="Calculate arccosine of a number.">Acos</a>(T x){
<a name="l00312"></a>00312         <span class="keywordflow">return</span> T(::acos(x));
<a name="l00313"></a>00313 }
<a name="l00314"></a>00314 
<a name="l00315"></a>00315 
<a name="l00316"></a>00316 
<a name="l00320"></a><a class="code" href="namespaceting.htm#a6a7321f630950e8555304037f2d9e556">00320</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="namespaceting.htm#a6a7321f630950e8555304037f2d9e556" title="Calculate square root of a number.">Sqrt</a>(T x){
<a name="l00321"></a>00321         <span class="keywordflow">return</span> T(::sqrt(x));
<a name="l00322"></a>00322 }
<a name="l00323"></a>00323 
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 
<a name="l00329"></a><a class="code" href="namespaceting.htm#acd9006efe06dee84b450d8437a3e1cdc">00329</a> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="namespaceting.htm#acd9006efe06dee84b450d8437a3e1cdc" title="Calculate e^x.">Exp</a>(T x){
<a name="l00330"></a>00330         <span class="keywordflow">return</span> x.Exp();
<a name="l00331"></a>00331 }
<a name="l00332"></a>00332 
<a name="l00333"></a>00333 
<a name="l00334"></a>00334 
<a name="l00335"></a>00335 <span class="preprocessor">#ifndef M_DOC_DONT_EXTRACT //for doxygen</span>
<a name="l00336"></a>00336 <span class="preprocessor"></span><span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">float</span> Exp&lt;float&gt;(<span class="keywordtype">float</span> x){
<a name="l00337"></a>00337         return ::exp(x);
<a name="l00338"></a>00338 }
<a name="l00339"></a>00339 <span class="preprocessor">#endif</span>
<a name="l00340"></a>00340 <span class="preprocessor"></span>
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 <span class="preprocessor">#ifndef M_DOC_DONT_EXTRACT //for doxygen</span>
<a name="l00344"></a>00344 <span class="preprocessor"></span><span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">double</span> Exp&lt;double&gt;(<span class="keywordtype">double</span> x){
<a name="l00345"></a>00345         return ::exp(x);
<a name="l00346"></a>00346 }
<a name="l00347"></a>00347 <span class="preprocessor">#endif</span>
<a name="l00348"></a>00348 <span class="preprocessor"></span>
<a name="l00349"></a>00349 
<a name="l00350"></a>00350 
<a name="l00351"></a>00351 <span class="comment">/*</span>
<a name="l00352"></a>00352 <span class="comment">//TODO:</span>
<a name="l00353"></a>00353 <span class="comment">template &lt;&gt; inline long double Exp&lt;long double&gt;(long double x){</span>
<a name="l00354"></a>00354 <span class="comment">        return ::exp(x);</span>
<a name="l00355"></a>00355 <span class="comment">}</span>
<a name="l00356"></a>00356 <span class="comment">*/</span>
<a name="l00357"></a>00357 
<a name="l00358"></a>00358 
<a name="l00359"></a>00359 
<a name="l00360"></a>00360 }<span class="comment">//~namespace ting</span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
