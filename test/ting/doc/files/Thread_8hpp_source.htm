<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: Thread.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>Thread.hpp</h1><a href="Thread_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;cstring&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm" title="Debug utilities.">debug.hpp</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="Ptr_8hpp.htm" title="Pointer wrapper.">Ptr.hpp</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="Exc_8hpp.htm" title="Basic Exception class.">Exc.hpp</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="WaitSet_8hpp.htm" title="Wait set.">WaitSet.hpp</a>&quot;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="preprocessor">#if defined(__WIN32__) || defined(WIN32)</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="preprocessor">#ifndef __WIN32__</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="preprocessor">#define __WIN32__</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#ifndef WIN32</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#define WIN32</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &lt;windows.h&gt;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &lt;process.h&gt;</span>
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &lt;e32std.h&gt;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &lt;hal.h&gt;</span>
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="preprocessor">#else //assume pthread</span>
<a name="l00060"></a><a class="code" href="Thread_8hpp.htm#a9f4fc4ff4fcbe27710d0063e5587d658">00060</a> <span class="preprocessor"></span><span class="preprocessor">#define M_PTHREAD</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span><span class="preprocessor">#include &lt;unistd.h&gt;</span>
<a name="l00062"></a>00062 <span class="preprocessor">#include &lt;pthread.h&gt;</span>
<a name="l00063"></a>00063 <span class="preprocessor">#include &lt;semaphore.h&gt;</span>
<a name="l00064"></a>00064 <span class="preprocessor">#include &lt;errno.h&gt;</span>
<a name="l00065"></a>00065 <span class="preprocessor">#include &lt;ctime&gt;</span>
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="preprocessor">#if defined(sun) || defined(__sun)</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span><span class="preprocessor">#include &lt;sched.h&gt;</span>      <span class="comment">//      for sched_yield();</span>
<a name="l00069"></a>00069 <span class="preprocessor">#endif</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span>
<a name="l00071"></a>00071 <span class="preprocessor">#endif</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span>
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="comment">//if Microsoft MSVC compiler,</span>
<a name="l00076"></a>00076 <span class="comment">//then disable warning about throw specification is ignored.</span>
<a name="l00077"></a>00077 <span class="preprocessor">#ifdef _MSC_VER</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span><span class="preprocessor">#pragma warning(push) //push warnings state</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span><span class="preprocessor">#pragma warning( disable : 4290)</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span>
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="comment">//#define M_ENABLE_MUTEX_TRACE</span>
<a name="l00085"></a>00085 <span class="preprocessor">#ifdef M_ENABLE_MUTEX_TRACE</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span><span class="preprocessor">#define M_MUTEX_TRACE(x) TRACE(&lt;&lt;&quot;[MUTEX] &quot;) TRACE(x)</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00088"></a><a class="code" href="Thread_8hpp.htm#a9b460adb213e3f0bcce8d29690a07b44">00088</a> <span class="preprocessor"></span><span class="preprocessor">#define M_MUTEX_TRACE(x)</span>
<a name="l00089"></a>00089 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00090"></a>00090 <span class="preprocessor"></span>
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="comment">//#define M_ENABLE_QUEUE_TRACE</span>
<a name="l00093"></a>00093 <span class="preprocessor">#ifdef M_ENABLE_QUEUE_TRACE</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span><span class="preprocessor">#define M_QUEUE_TRACE(x) TRACE(&lt;&lt;&quot;[QUEUE] &quot;) TRACE(x)</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00096"></a><a class="code" href="Thread_8hpp.htm#ae228c1f2819e459ddc6cb21bcab3a7d9">00096</a> <span class="preprocessor"></span><span class="preprocessor">#define M_QUEUE_TRACE(x)</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span>
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 <span class="keyword">namespace </span>ting{
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 <span class="comment">//forward declarations</span>
<a name="l00103"></a>00103 <span class="keyword">class </span>CondVar;
<a name="l00104"></a>00104 <span class="keyword">class </span>Queue;
<a name="l00105"></a>00105 <span class="keyword">class </span>Thread;
<a name="l00106"></a>00106 <span class="keyword">class </span>QuitMessage;
<a name="l00107"></a>00107 
<a name="l00112"></a><a class="code" href="classting_1_1Mutex.htm">00112</a> <span class="keyword">class </span><a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">Mutex</a>{
<a name="l00113"></a><a class="code" href="classting_1_1Mutex.htm#a7f15caac4fd04184afa33f61e738fb41">00113</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1CondVar.htm">CondVar</a>;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115         <span class="comment">//system dependent handle</span>
<a name="l00116"></a>00116 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00117"></a>00117 <span class="preprocessor"></span>        CRITICAL_SECTION m;
<a name="l00118"></a>00118 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00119"></a>00119 <span class="preprocessor"></span>        RCriticalSection m;
<a name="l00120"></a>00120 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span>        pthread_mutex_t m;
<a name="l00122"></a>00122 <span class="preprocessor">#else</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00124"></a>00124 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00125"></a>00125 <span class="preprocessor"></span>
<a name="l00126"></a>00126         <span class="comment">//forbid copying</span>
<a name="l00127"></a>00127         <a class="code" href="classting_1_1Mutex.htm#ae7c201e3a5ee65e3ce7df49a54195815" title="Creates initially unlocked mutex.">Mutex</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">Mutex</a>&amp; ){
<a name="l00128"></a>00128                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00129"></a>00129         }
<a name="l00130"></a>00130         <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">Mutex</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">Mutex</a>&amp; ){
<a name="l00131"></a>00131                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00132"></a>00132         }
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 <span class="keyword">public</span>:
<a name="l00138"></a><a class="code" href="classting_1_1Mutex.htm#ae7c201e3a5ee65e3ce7df49a54195815">00138</a>         <a class="code" href="classting_1_1Mutex.htm#ae7c201e3a5ee65e3ce7df49a54195815" title="Creates initially unlocked mutex.">Mutex</a>(){
<a name="l00139"></a>00139                 <a class="code" href="Thread_8hpp.htm#a9b460adb213e3f0bcce8d29690a07b44">M_MUTEX_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Mutex::Mutex(): invoked &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl)
<a name="l00140"></a>00140 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00141"></a>00141 <span class="preprocessor"></span>                InitializeCriticalSection(&amp;this-&gt;m);
<a name="l00142"></a>00142 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00143"></a>00143 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(this-&gt;m.CreateLocal() != KErrNone){
<a name="l00144"></a>00144                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Mutex::Mutex(): failed creating mutex (CreateLocal() failed)&quot;</span>);
<a name="l00145"></a>00145                 }
<a name="l00146"></a>00146 <span class="preprocessor">#elif defined(M_PTHREAD) //pthread</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(pthread_mutex_init(&amp;this-&gt;m, NULL) != 0){
<a name="l00148"></a>00148                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Mutex::Mutex(): failed creating mutex (pthread_mutex_init() failed)&quot;</span>);
<a name="l00149"></a>00149                 }
<a name="l00150"></a>00150 <span class="preprocessor">#else</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span>        }
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 
<a name="l00157"></a><a class="code" href="classting_1_1Mutex.htm#a84a9de7ce8fe1180b4f734bf8272ca28">00157</a>         <a class="code" href="classting_1_1Mutex.htm#a84a9de7ce8fe1180b4f734bf8272ca28">~Mutex</a>(){
<a name="l00158"></a>00158                 <a class="code" href="Thread_8hpp.htm#a9b460adb213e3f0bcce8d29690a07b44">M_MUTEX_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Mutex::~Mutex(): invoked &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl)
<a name="l00159"></a>00159 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00160"></a>00160 <span class="preprocessor"></span>                DeleteCriticalSection(&amp;this-&gt;m);
<a name="l00161"></a>00161 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00162"></a>00162 <span class="preprocessor"></span>                this-&gt;m.Close();
<a name="l00163"></a>00163 <span class="preprocessor">#elif defined(M_PTHREAD) //pthread</span>
<a name="l00164"></a>00164 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(pthread_mutex_destroy(&amp;this-&gt;m) != 0){
<a name="l00165"></a>00165                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00166"></a>00166                 }
<a name="l00167"></a>00167 <span class="preprocessor">#else</span>
<a name="l00168"></a>00168 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00169"></a>00169 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00170"></a>00170 <span class="preprocessor"></span>        }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 
<a name="l00180"></a><a class="code" href="classting_1_1Mutex.htm#aee619fd07430d0d5c3c9006fad8d49c0">00180</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1Mutex.htm#aee619fd07430d0d5c3c9006fad8d49c0" title="Acquire mutex lock.">Lock</a>(){
<a name="l00181"></a>00181                 <a class="code" href="Thread_8hpp.htm#a9b460adb213e3f0bcce8d29690a07b44">M_MUTEX_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Mutex::Lock(): invoked &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl)
<a name="l00182"></a>00182 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00183"></a>00183 <span class="preprocessor"></span>                EnterCriticalSection(&amp;this-&gt;m);
<a name="l00184"></a>00184 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00185"></a>00185 <span class="preprocessor"></span>                this-&gt;m.Wait();
<a name="l00186"></a>00186 <span class="preprocessor">#elif defined(M_PTHREAD) //pthread</span>
<a name="l00187"></a>00187 <span class="preprocessor"></span>                pthread_mutex_lock(&amp;this-&gt;m);
<a name="l00188"></a>00188 <span class="preprocessor">#else</span>
<a name="l00189"></a>00189 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00191"></a>00191 <span class="preprocessor"></span>        }
<a name="l00192"></a>00192 
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 
<a name="l00198"></a><a class="code" href="classting_1_1Mutex.htm#a1c4b441b208c2fa1cd4f028748003d21">00198</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1Mutex.htm#a1c4b441b208c2fa1cd4f028748003d21" title="Release mutex lock.">Unlock</a>(){
<a name="l00199"></a>00199                 <a class="code" href="Thread_8hpp.htm#a9b460adb213e3f0bcce8d29690a07b44">M_MUTEX_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Mutex::Unlock(): invoked &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl)
<a name="l00200"></a>00200 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>                LeaveCriticalSection(&amp;this-&gt;m);
<a name="l00202"></a>00202 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span>                this-&gt;m.Signal();
<a name="l00204"></a>00204 <span class="preprocessor">#elif defined(M_PTHREAD) //pthread</span>
<a name="l00205"></a>00205 <span class="preprocessor"></span>                pthread_mutex_unlock(&amp;this-&gt;m);
<a name="l00206"></a>00206 <span class="preprocessor">#else</span>
<a name="l00207"></a>00207 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00209"></a>00209 <span class="preprocessor"></span>        }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 
<a name="l00220"></a><a class="code" href="classting_1_1Mutex_1_1Guard.htm">00220</a>         <span class="keyword">class </span><a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Guard</a>{
<a name="l00221"></a>00221                 <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">Mutex</a> *mut;
<a name="l00222"></a>00222 
<a name="l00223"></a>00223                 <span class="comment">//forbid copying</span>
<a name="l00224"></a>00224                 <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Guard</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Guard</a>&amp; ){
<a name="l00225"></a>00225                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00226"></a>00226                 }
<a name="l00227"></a>00227                 <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Guard</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Guard</a>&amp; ){
<a name="l00228"></a>00228                         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00229"></a>00229                 }
<a name="l00230"></a>00230         <span class="keyword">public</span>:
<a name="l00231"></a><a class="code" href="classting_1_1Mutex_1_1Guard.htm#aa73e23a8dd523aed9c650c68f4f95183">00231</a>                 <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Guard</a>(<a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">Mutex</a> &amp;m):
<a name="l00232"></a>00232                                 mut(&amp;m)
<a name="l00233"></a>00233                 {
<a name="l00234"></a>00234                         this-&gt;mut-&gt;<a class="code" href="classting_1_1Mutex.htm#aee619fd07430d0d5c3c9006fad8d49c0" title="Acquire mutex lock.">Lock</a>();
<a name="l00235"></a>00235                 }
<a name="l00236"></a><a class="code" href="classting_1_1Mutex_1_1Guard.htm#a8b8e7b5a80b5dba16dd04a4102a59f76">00236</a>                 <a class="code" href="classting_1_1Mutex_1_1Guard.htm#a8b8e7b5a80b5dba16dd04a4102a59f76">~Guard</a>(){
<a name="l00237"></a>00237                         this-&gt;mut-&gt;<a class="code" href="classting_1_1Mutex.htm#a1c4b441b208c2fa1cd4f028748003d21" title="Release mutex lock.">Unlock</a>();
<a name="l00238"></a>00238                 }
<a name="l00239"></a>00239         };<span class="comment">//~class Guard</span>
<a name="l00240"></a>00240 };<span class="comment">//~class Mutex</span>
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 
<a name="l00254"></a><a class="code" href="classting_1_1Semaphore.htm">00254</a> <span class="keyword">class </span><a class="code" href="classting_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a>{
<a name="l00255"></a>00255         <span class="comment">//system dependent handle</span>
<a name="l00256"></a>00256 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00257"></a>00257 <span class="preprocessor"></span>        HANDLE s;
<a name="l00258"></a>00258 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00259"></a>00259 <span class="preprocessor"></span>        RSemaphore s;
<a name="l00260"></a>00260 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l00261"></a>00261 <span class="preprocessor"></span>        sem_t s;
<a name="l00262"></a>00262 <span class="preprocessor">#else</span>
<a name="l00263"></a>00263 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00264"></a>00264 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00265"></a>00265 <span class="preprocessor"></span>
<a name="l00266"></a>00266         <span class="comment">//forbid copying</span>
<a name="l00267"></a>00267         <a class="code" href="classting_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a>&amp; ){
<a name="l00268"></a>00268                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00269"></a>00269         }
<a name="l00270"></a>00270         <a class="code" href="classting_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a>&amp; ){
<a name="l00271"></a>00271                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00272"></a>00272         }
<a name="l00273"></a>00273 <span class="keyword">public</span>:
<a name="l00274"></a>00274 
<a name="l00278"></a><a class="code" href="classting_1_1Semaphore.htm#aa6ada21501ef1c48dd858560fa5a7858">00278</a>         <a class="code" href="classting_1_1Semaphore.htm#aa6ada21501ef1c48dd858560fa5a7858" title="Create the semaphore with given initial value.">Semaphore</a>(<span class="keywordtype">unsigned</span> initialValue = 0){
<a name="l00279"></a>00279 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00280"></a>00280 <span class="preprocessor"></span>                <span class="keywordflow">if</span>( (this-&gt;s = CreateSemaphore(NULL, initialValue, 0xffffff, NULL)) == NULL)
<a name="l00281"></a>00281 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00282"></a>00282 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(this-&gt;s.CreateLocal(initialValue) != KErrNone)
<a name="l00283"></a>00283 #elif defined(<a class="code" href="Thread_8hpp.htm#a9f4fc4ff4fcbe27710d0063e5587d658">M_PTHREAD</a>)
<a name="l00284"></a>00284                 <span class="keywordflow">if</span>(sem_init(&amp;this-&gt;s, 0, initialValue) &lt; 0 )
<a name="l00285"></a>00285 #<span class="keywordflow">else</span>
<a name="l00286"></a>00286 #error <span class="stringliteral">&quot;unknown system&quot;</span>
<a name="l00287"></a>00287 #endif
<a name="l00288"></a>00288                 {
<a name="l00289"></a>00289                         <a class="code" href="debug_8hpp.htm#af855c94dc540e943632089ce7496faac">LOG</a>(&lt;&lt;<span class="stringliteral">&quot;Semaphore::Semaphore(): failed&quot;</span>&lt;&lt;std::endl)
<a name="l00290"></a>00290                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Semaphore::Semaphore(): creating semaphore failed&quot;</span>);
<a name="l00291"></a>00291                 }
<a name="l00292"></a>00292         }
<a name="l00293"></a>00293 
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 
<a name="l00296"></a><a class="code" href="classting_1_1Semaphore.htm#a141141f8d8573d712abf79402bb82bec">00296</a>         <a class="code" href="classting_1_1Semaphore.htm#a141141f8d8573d712abf79402bb82bec">~Semaphore</a>(){
<a name="l00297"></a>00297 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00298"></a>00298 <span class="preprocessor"></span>                CloseHandle(this-&gt;s);
<a name="l00299"></a>00299 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00300"></a>00300 <span class="preprocessor"></span>                this-&gt;s.Close();
<a name="l00301"></a>00301 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l00302"></a>00302 <span class="preprocessor"></span>                sem_destroy(&amp;this-&gt;s);
<a name="l00303"></a>00303 <span class="preprocessor">#else</span>
<a name="l00304"></a>00304 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00305"></a>00305 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00306"></a>00306 <span class="preprocessor"></span>        }
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 
<a name="l00309"></a>00309 
<a name="l00322"></a><a class="code" href="classting_1_1Semaphore.htm#ac263b6f61268a768a6770d46d4e55f27">00322</a>         <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Semaphore.htm#ac263b6f61268a768a6770d46d4e55f27" title="Wait on semaphore.">Wait</a>(<span class="keywordtype">unsigned</span> timeoutMillis = 0){
<a name="l00323"></a>00323 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00324"></a>00324 <span class="preprocessor"></span>                <span class="keywordflow">switch</span>(WaitForSingleObject(this-&gt;s, DWORD(timeoutMillis == 0 ? INFINITE : timeoutMillis))){
<a name="l00325"></a>00325                         <span class="keywordflow">case</span> WAIT_OBJECT_0:
<a name="l00326"></a>00326 <span class="comment">//                              LOG(&lt;&lt;&quot;Semaphore::Wait(): exit&quot;&lt;&lt;std::endl)</span>
<a name="l00327"></a>00327                                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00328"></a>00328                         <span class="keywordflow">case</span> WAIT_TIMEOUT:
<a name="l00329"></a>00329                                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00330"></a>00330                                 <span class="keywordflow">break</span>;
<a name="l00331"></a>00331                         <span class="keywordflow">default</span>:
<a name="l00332"></a>00332                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Semaphore::Wait(): wait failed&quot;</span>);
<a name="l00333"></a>00333                                 <span class="keywordflow">break</span>;
<a name="l00334"></a>00334                 }
<a name="l00335"></a>00335 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00336"></a>00336 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(timeoutMillis == 0){
<a name="l00337"></a>00337                         this-&gt;s.Wait();
<a name="l00338"></a>00338                 }<span class="keywordflow">else</span>{
<a name="l00339"></a>00339                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Semaphore::Wait(): timeouted wait unimplemented on Symbian, TODO: implement&quot;</span>);
<a name="l00340"></a>00340                 }
<a name="l00341"></a>00341 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l00342"></a>00342 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(timeoutMillis == 0){
<a name="l00343"></a>00343                         <span class="keywordtype">int</span> retVal;
<a name="l00344"></a>00344                         <span class="keywordflow">do</span>{
<a name="l00345"></a>00345                                 retVal = sem_wait(&amp;this-&gt;s);
<a name="l00346"></a>00346                         }<span class="keywordflow">while</span>(retVal == -1 &amp;&amp; errno == EINTR);
<a name="l00347"></a>00347                         <span class="keywordflow">if</span>(retVal &lt; 0){
<a name="l00348"></a>00348                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Semaphore::Wait(): wait failed&quot;</span>);
<a name="l00349"></a>00349                         }
<a name="l00350"></a>00350                 }<span class="keywordflow">else</span>{
<a name="l00351"></a>00351                         timespec ts;
<a name="l00352"></a>00352 
<a name="l00353"></a>00353                         <span class="keywordflow">if</span>(clock_gettime(CLOCK_REALTIME, &amp;ts) == -1)
<a name="l00354"></a>00354                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Semaphore::Wait(): clock_gettime() returned error&quot;</span>);
<a name="l00355"></a>00355 
<a name="l00356"></a>00356                         ts.tv_sec += timeoutMillis / 1000;
<a name="l00357"></a>00357                         ts.tv_nsec += (timeoutMillis % 1000) * 1000 * 1000;
<a name="l00358"></a>00358                         ts.tv_sec += ts.tv_nsec / (1000 * 1000 * 1000);
<a name="l00359"></a>00359                         ts.tv_nsec = ts.tv_nsec % (1000 * 1000 * 1000);
<a name="l00360"></a>00360 
<a name="l00361"></a>00361                         <span class="keywordflow">if</span>(sem_timedwait(&amp;this-&gt;s, &amp;ts) == -1){
<a name="l00362"></a>00362                                 <span class="keywordflow">if</span>(errno == ETIMEDOUT)
<a name="l00363"></a>00363                                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00364"></a>00364                                 <span class="keywordflow">else</span>
<a name="l00365"></a>00365                                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Semaphore::Wait(): error&quot;</span>);
<a name="l00366"></a>00366                         }
<a name="l00367"></a>00367                 }
<a name="l00368"></a>00368 <span class="preprocessor">#else</span>
<a name="l00369"></a>00369 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00370"></a>00370 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00371"></a>00371 <span class="preprocessor"></span>                <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00372"></a>00372         }
<a name="l00373"></a>00373 
<a name="l00374"></a>00374 
<a name="l00375"></a>00375 
<a name="l00380"></a><a class="code" href="classting_1_1Semaphore.htm#a14d56cb68623396f201cfbb9629e9f29">00380</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Semaphore.htm#a14d56cb68623396f201cfbb9629e9f29" title="Signal the semaphore.">Signal</a>(){
<a name="l00381"></a>00381 <span class="comment">//              TRACE(&lt;&lt; &quot;Semaphore::Signal(): invoked&quot; &lt;&lt; std::endl)</span>
<a name="l00382"></a>00382 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00383"></a>00383 <span class="preprocessor"></span>                <span class="keywordflow">if</span>( ReleaseSemaphore(this-&gt;s, 1, NULL) == 0 ){
<a name="l00384"></a>00384                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Semaphore::Post(): releasing semaphore failed&quot;</span>);
<a name="l00385"></a>00385                 }
<a name="l00386"></a>00386 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00387"></a>00387 <span class="preprocessor"></span>                this-&gt;s.Signal();
<a name="l00388"></a>00388 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l00389"></a>00389 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(sem_post(&amp;this-&gt;s) &lt; 0){
<a name="l00390"></a>00390                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Semaphore::Post(): releasing semaphore failed&quot;</span>);
<a name="l00391"></a>00391                 }
<a name="l00392"></a>00392 <span class="preprocessor">#else</span>
<a name="l00393"></a>00393 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00394"></a>00394 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00395"></a>00395 <span class="preprocessor"></span>        }
<a name="l00396"></a>00396 };<span class="comment">//~class Semaphore</span>
<a name="l00397"></a>00397 
<a name="l00398"></a>00398 
<a name="l00399"></a>00399 
<a name="l00400"></a><a class="code" href="classting_1_1CondVar.htm">00400</a> <span class="keyword">class </span><a class="code" href="classting_1_1CondVar.htm">CondVar</a>{
<a name="l00401"></a>00401 <span class="preprocessor">#if defined(WIN32) || defined(__SYMBIAN32__)</span>
<a name="l00402"></a>00402 <span class="preprocessor"></span>        <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">Mutex</a> cvMutex;
<a name="l00403"></a>00403         <a class="code" href="classting_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a> semWait;
<a name="l00404"></a>00404         <a class="code" href="classting_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a> semDone;
<a name="l00405"></a>00405         <span class="keywordtype">unsigned</span> numWaiters;
<a name="l00406"></a>00406         <span class="keywordtype">unsigned</span> numSignals;
<a name="l00407"></a>00407 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l00408"></a>00408 <span class="preprocessor"></span>        <span class="comment">//A pointer to store system dependent handle</span>
<a name="l00409"></a>00409         pthread_cond_t cond;
<a name="l00410"></a>00410 <span class="preprocessor">#else</span>
<a name="l00411"></a>00411 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00412"></a>00412 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00413"></a>00413 <span class="preprocessor"></span>
<a name="l00414"></a>00414         <span class="comment">//forbid copying</span>
<a name="l00415"></a>00415         <a class="code" href="classting_1_1CondVar.htm#aed116cf90d55743ac90960ddc3a3ca04">CondVar</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1CondVar.htm">CondVar</a>&amp; ){
<a name="l00416"></a>00416                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00417"></a>00417         }
<a name="l00418"></a>00418         <a class="code" href="classting_1_1CondVar.htm">CondVar</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1CondVar.htm">CondVar</a>&amp; ){
<a name="l00419"></a>00419                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00420"></a>00420         }
<a name="l00421"></a>00421         
<a name="l00422"></a>00422 <span class="keyword">public</span>:
<a name="l00423"></a>00423 
<a name="l00424"></a><a class="code" href="classting_1_1CondVar.htm#aed116cf90d55743ac90960ddc3a3ca04">00424</a>         <a class="code" href="classting_1_1CondVar.htm#aed116cf90d55743ac90960ddc3a3ca04">CondVar</a>(){
<a name="l00425"></a>00425 <span class="preprocessor">#if defined(__WIN32__) || defined(__SYMBIAN32__)</span>
<a name="l00426"></a>00426 <span class="preprocessor"></span>                this-&gt;numWaiters = 0;
<a name="l00427"></a>00427                 this-&gt;numSignals = 0;
<a name="l00428"></a>00428 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l00429"></a>00429 <span class="preprocessor"></span>                pthread_cond_init(&amp;this-&gt;cond, NULL);
<a name="l00430"></a>00430 <span class="preprocessor">#else</span>
<a name="l00431"></a>00431 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00432"></a>00432 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00433"></a>00433 <span class="preprocessor"></span>        }
<a name="l00434"></a>00434 
<a name="l00435"></a><a class="code" href="classting_1_1CondVar.htm#acb63a0b24f4463779ebd85b2b6ff9f48">00435</a>         <a class="code" href="classting_1_1CondVar.htm#acb63a0b24f4463779ebd85b2b6ff9f48">~CondVar</a>(){
<a name="l00436"></a>00436 <span class="preprocessor">#if defined(__WIN32__) || defined(__SYMBIAN32__)</span>
<a name="l00437"></a>00437 <span class="preprocessor"></span><span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l00438"></a>00438 <span class="preprocessor"></span>        pthread_cond_destroy(&amp;this-&gt;cond);
<a name="l00439"></a>00439 <span class="preprocessor">#else</span>
<a name="l00440"></a>00440 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00441"></a>00441 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00442"></a>00442 <span class="preprocessor"></span>        }
<a name="l00443"></a>00443 
<a name="l00444"></a><a class="code" href="classting_1_1CondVar.htm#a1b83ee24fbedfa3b64289d3d91b72dbe">00444</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1CondVar.htm#a1b83ee24fbedfa3b64289d3d91b72dbe">Wait</a>(<a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">Mutex</a>&amp; mutex){
<a name="l00445"></a>00445 <span class="preprocessor">#if defined(__WIN32__) || defined(__SYMBIAN32__)</span>
<a name="l00446"></a>00446 <span class="preprocessor"></span>                this-&gt;cvMutex.Lock();
<a name="l00447"></a>00447                 ++this-&gt;numWaiters;
<a name="l00448"></a>00448                 this-&gt;cvMutex.Unlock();
<a name="l00449"></a>00449 
<a name="l00450"></a>00450                 mutex.<a class="code" href="classting_1_1Mutex.htm#a1c4b441b208c2fa1cd4f028748003d21" title="Release mutex lock.">Unlock</a>();
<a name="l00451"></a>00451 
<a name="l00452"></a>00452                 this-&gt;semWait.Wait();
<a name="l00453"></a>00453 
<a name="l00454"></a>00454                 this-&gt;cvMutex.Lock();
<a name="l00455"></a>00455                 <span class="keywordflow">if</span>(this-&gt;numSignals &gt; 0){
<a name="l00456"></a>00456                         this-&gt;semDone.Signal();
<a name="l00457"></a>00457                         --this-&gt;numSignals;
<a name="l00458"></a>00458                 }
<a name="l00459"></a>00459                 --this-&gt;numWaiters;
<a name="l00460"></a>00460                 this-&gt;cvMutex.Unlock();
<a name="l00461"></a>00461 
<a name="l00462"></a>00462                 mutex.<a class="code" href="classting_1_1Mutex.htm#aee619fd07430d0d5c3c9006fad8d49c0" title="Acquire mutex lock.">Lock</a>();
<a name="l00463"></a>00463 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l00464"></a>00464 <span class="preprocessor"></span>                pthread_cond_wait(&amp;this-&gt;cond, &amp;mutex.m);
<a name="l00465"></a>00465 <span class="preprocessor">#else</span>
<a name="l00466"></a>00466 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00467"></a>00467 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00468"></a>00468 <span class="preprocessor"></span>        }
<a name="l00469"></a>00469 
<a name="l00470"></a><a class="code" href="classting_1_1CondVar.htm#af2d589efc209e5d45d8ca8d1469669b3">00470</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1CondVar.htm#af2d589efc209e5d45d8ca8d1469669b3">Notify</a>(){
<a name="l00471"></a>00471 <span class="preprocessor">#if defined(__WIN32__) || defined(__SYMBIAN32__)</span>
<a name="l00472"></a>00472 <span class="preprocessor"></span>                this-&gt;cvMutex.Lock();
<a name="l00473"></a>00473 
<a name="l00474"></a>00474                 <span class="keywordflow">if</span>(this-&gt;numWaiters &gt; this-&gt;numSignals){
<a name="l00475"></a>00475                         ++this-&gt;numSignals;
<a name="l00476"></a>00476                         this-&gt;semWait.Signal();
<a name="l00477"></a>00477                         this-&gt;cvMutex.Unlock();
<a name="l00478"></a>00478                         this-&gt;semDone.Wait();
<a name="l00479"></a>00479                 }<span class="keywordflow">else</span>{
<a name="l00480"></a>00480                         this-&gt;cvMutex.Unlock();
<a name="l00481"></a>00481                 }
<a name="l00482"></a>00482 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l00483"></a>00483 <span class="preprocessor"></span>                pthread_cond_signal(&amp;this-&gt;cond);
<a name="l00484"></a>00484 <span class="preprocessor">#else</span>
<a name="l00485"></a>00485 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00486"></a>00486 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00487"></a>00487 <span class="preprocessor"></span>        }
<a name="l00488"></a>00488 };
<a name="l00489"></a>00489 
<a name="l00490"></a>00490 
<a name="l00491"></a>00491 
<a name="l00498"></a><a class="code" href="classting_1_1Message.htm">00498</a> <span class="keyword">class </span><a class="code" href="classting_1_1Message.htm" title="Message abstract class.">Message</a>{
<a name="l00499"></a><a class="code" href="classting_1_1Message.htm#a47dfc6f2bc0d50a6e7c92eb00d97b064">00499</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1Queue.htm" title="Message queue.">Queue</a>;
<a name="l00500"></a>00500 
<a name="l00501"></a>00501         <a class="code" href="classting_1_1Message.htm" title="Message abstract class.">Message</a> *next;<span class="comment">//pointer to the next message in a single-linked list</span>
<a name="l00502"></a>00502 
<a name="l00503"></a>00503 <span class="keyword">protected</span>:
<a name="l00504"></a><a class="code" href="classting_1_1Message.htm#afdfc16f8675047ff85d91a95877d5d03">00504</a>         <a class="code" href="classting_1_1Message.htm#afdfc16f8675047ff85d91a95877d5d03">Message</a>() :
<a name="l00505"></a>00505                         next(0)
<a name="l00506"></a>00506         {}
<a name="l00507"></a>00507 
<a name="l00508"></a>00508 <span class="keyword">public</span>:
<a name="l00509"></a><a class="code" href="classting_1_1Message.htm#a3e6f89be454c8aa155089d04e4effea4">00509</a>         <span class="keyword">virtual</span> <a class="code" href="classting_1_1Message.htm#a3e6f89be454c8aa155089d04e4effea4">~Message</a>(){}
<a name="l00510"></a>00510 
<a name="l00516"></a>00516         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Message.htm#a0db12bcefb6dcc5ab5643ca0303966ab" title="message handler function.">Handle</a>() = 0;
<a name="l00517"></a>00517 };
<a name="l00518"></a>00518 
<a name="l00519"></a>00519 
<a name="l00520"></a>00520 
<a name="l00533"></a><a class="code" href="classting_1_1Queue.htm">00533</a> <span class="keyword">class </span><a class="code" href="classting_1_1Queue.htm" title="Message queue.">Queue</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>{
<a name="l00534"></a>00534         <a class="code" href="classting_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a> sem;
<a name="l00535"></a>00535 
<a name="l00536"></a>00536         <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">Mutex</a> mut;
<a name="l00537"></a>00537 
<a name="l00538"></a>00538         <a class="code" href="classting_1_1Message.htm" title="Message abstract class.">Message</a> *first,
<a name="l00539"></a>00539                         *last;
<a name="l00540"></a>00540 
<a name="l00541"></a>00541 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00542"></a>00542 <span class="preprocessor"></span>        <span class="comment">//use additional semaphore to implement Waitable on Windows</span>
<a name="l00543"></a>00543         HANDLE eventForWaitable;
<a name="l00544"></a>00544 <span class="preprocessor">#else</span>
<a name="l00545"></a>00545 <span class="preprocessor"></span>        <span class="comment">//use pipe to implement Waitable in *nix systems</span>
<a name="l00546"></a>00546         <span class="keywordtype">int</span> pipeEnds[2];
<a name="l00547"></a>00547 <span class="preprocessor">#endif</span>
<a name="l00548"></a>00548 <span class="preprocessor"></span>
<a name="l00549"></a>00549         <span class="comment">//forbid copying</span>
<a name="l00550"></a>00550         <a class="code" href="classting_1_1Queue.htm#a517c4312dba94fe943006ba4851b25e2" title="Constructor, creates empty message queue.">Queue</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Queue.htm" title="Message queue.">Queue</a>&amp;){
<a name="l00551"></a>00551                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00552"></a>00552         }
<a name="l00553"></a>00553 
<a name="l00554"></a>00554         <a class="code" href="classting_1_1Queue.htm" title="Message queue.">Queue</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1Queue.htm" title="Message queue.">Queue</a>&amp;){
<a name="l00555"></a>00555                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00556"></a>00556                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00557"></a>00557         }
<a name="l00558"></a>00558 
<a name="l00559"></a>00559 <span class="keyword">public</span>:
<a name="l00563"></a><a class="code" href="classting_1_1Queue.htm#a517c4312dba94fe943006ba4851b25e2">00563</a>         <a class="code" href="classting_1_1Queue.htm#a517c4312dba94fe943006ba4851b25e2" title="Constructor, creates empty message queue.">Queue</a>() :
<a name="l00564"></a>00564                         first(0),
<a name="l00565"></a>00565                         last(0)
<a name="l00566"></a>00566         {
<a name="l00567"></a>00567                 <span class="comment">//can write will always be set because it is always possible to post a message to the queue</span>
<a name="l00568"></a>00568                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#aa65a87874bfe89d950901948176184d5">SetCanWriteFlag</a>();
<a name="l00569"></a>00569 
<a name="l00570"></a>00570 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00571"></a>00571 <span class="preprocessor"></span>                this-&gt;eventForWaitable = CreateEvent(
<a name="l00572"></a>00572                                 NULL,
<a name="l00573"></a>00573                                 TRUE, <span class="comment">//manual-reset</span>
<a name="l00574"></a>00574                                 FALSE, <span class="comment">//not signalled initially</span>
<a name="l00575"></a>00575                                 NULL <span class="comment">//no name</span>
<a name="l00576"></a>00576                         );
<a name="l00577"></a>00577                 <span class="keywordflow">if</span>(this-&gt;eventForWaitable == NULL){
<a name="l00578"></a>00578                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Queue::Queue(): could not create event (Win32) for implementing Waitable&quot;</span>);
<a name="l00579"></a>00579                 }
<a name="l00580"></a>00580 <span class="preprocessor">#else // assume *nix</span>
<a name="l00581"></a>00581 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(::pipe(&amp;this-&gt;pipeEnds[0]) &lt; 0){
<a name="l00582"></a>00582                         std::stringstream ss;
<a name="l00583"></a>00583                         ss &lt;&lt; <span class="stringliteral">&quot;Queue::Queue(): could not create pipe (*nix) for implementing Waitable,&quot;</span>
<a name="l00584"></a>00584                                         &lt;&lt; <span class="stringliteral">&quot; error code = &quot;</span> &lt;&lt; errno &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; strerror(errno);
<a name="l00585"></a>00585                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(ss.str().c_str());
<a name="l00586"></a>00586                 }
<a name="l00587"></a>00587 <span class="preprocessor">#endif</span>
<a name="l00588"></a>00588 <span class="preprocessor"></span>        }
<a name="l00589"></a>00589 
<a name="l00590"></a>00590 
<a name="l00591"></a>00591 
<a name="l00596"></a><a class="code" href="classting_1_1Queue.htm#a5cd82284b6c42590018f9f1632a3dc3b">00596</a>         <a class="code" href="classting_1_1Queue.htm#a5cd82284b6c42590018f9f1632a3dc3b" title="Destructor.">~Queue</a>(){
<a name="l00597"></a>00597                 <span class="comment">//destroy messages which are currently on the queue</span>
<a name="l00598"></a>00598                 {
<a name="l00599"></a>00599                         <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Mutex::Guard</a> mutexGuard(this-&gt;mut);
<a name="l00600"></a>00600                         <a class="code" href="classting_1_1Message.htm" title="Message abstract class.">Message</a> *msg = this-&gt;first;
<a name="l00601"></a>00601                         <a class="code" href="classting_1_1Message.htm" title="Message abstract class.">Message</a> *nextMsg;
<a name="l00602"></a>00602                         <span class="keywordflow">while</span>(msg){
<a name="l00603"></a>00603                                 nextMsg = msg-&gt;next;
<a name="l00604"></a>00604                                 <span class="comment">//use Ptr to kill messages instead of &quot;delete msg;&quot; because</span>
<a name="l00605"></a>00605                                 <span class="comment">//the messages are passed to PushMessage() as Ptr, and thus, it is better</span>
<a name="l00606"></a>00606                                 <span class="comment">//to use Ptr to delete them.</span>
<a name="l00607"></a>00607                                 {<a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;Message&gt;</a> killer(msg);}
<a name="l00608"></a>00608 
<a name="l00609"></a>00609                                 msg = nextMsg;
<a name="l00610"></a>00610                         }
<a name="l00611"></a>00611                 }
<a name="l00612"></a>00612 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00613"></a>00613 <span class="preprocessor"></span>                CloseHandle(this-&gt;eventForWaitable);
<a name="l00614"></a>00614 <span class="preprocessor">#else // assume *nix</span>
<a name="l00615"></a>00615 <span class="preprocessor"></span>                close(this-&gt;pipeEnds[0]);
<a name="l00616"></a>00616                 close(this-&gt;pipeEnds[1]);
<a name="l00617"></a>00617 <span class="preprocessor">#endif</span>
<a name="l00618"></a>00618 <span class="preprocessor"></span>        }
<a name="l00619"></a>00619 
<a name="l00620"></a>00620 
<a name="l00621"></a>00621 
<a name="l00626"></a><a class="code" href="classting_1_1Queue.htm#a29e2d934b75a752b1dd9bcf5eb5eefec">00626</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1Queue.htm#a29e2d934b75a752b1dd9bcf5eb5eefec" title="Pushes a new message to the queue.">PushMessage</a>(<a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;Message&gt;</a> msg){
<a name="l00627"></a>00627                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(msg.<a class="code" href="classting_1_1Ptr.htm#aaea0cb8dafed57e642fd9b42865cfcca" title="tells if the pointer is valid or not.">IsValid</a>())
<a name="l00628"></a>00628                 <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Mutex::Guard</a> mutexGuard(this-&gt;mut);
<a name="l00629"></a>00629                 <span class="keywordflow">if</span>(this-&gt;first){
<a name="l00630"></a>00630                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;last &amp;&amp; this-&gt;last-&gt;next == 0)
<a name="l00631"></a>00631                         this-&gt;last = this-&gt;last-&gt;next = msg.<a class="code" href="classting_1_1Ptr.htm#a09475dbdf1fef00081b6925f099f2354" title="Extract pointer to object invalidating the Ptr.">Extract</a>();
<a name="l00632"></a>00632                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;last-&gt;next == 0)
<a name="l00633"></a>00633                 }<span class="keywordflow">else</span>{
<a name="l00634"></a>00634                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(msg.<a class="code" href="classting_1_1Ptr.htm#aaea0cb8dafed57e642fd9b42865cfcca" title="tells if the pointer is valid or not.">IsValid</a>())
<a name="l00635"></a>00635                         this-&gt;last = this-&gt;first = msg.<a class="code" href="classting_1_1Ptr.htm#a09475dbdf1fef00081b6925f099f2354" title="Extract pointer to object invalidating the Ptr.">Extract</a>();
<a name="l00636"></a>00636 
<a name="l00637"></a>00637                         <span class="comment">//Set CanRead flag.</span>
<a name="l00638"></a>00638                         <span class="comment">//NOTE: in linux imlementation with epoll(), the CanRead</span>
<a name="l00639"></a>00639                         <span class="comment">//flag will also be set in WaitSet::Wait() method.</span>
<a name="l00640"></a>00640                         <span class="comment">//NOTE: set CanRead flag before event notification/pipe write, because</span>
<a name="l00641"></a>00641                         <span class="comment">//if do it after then some other thread which was witing on the WaitSet</span>
<a name="l00642"></a>00642                         <span class="comment">//may read the CanRead flag while it was not set yet.</span>
<a name="l00643"></a>00643                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(!this-&gt;<a class="code" href="classting_1_1Waitable.htm#a3fba19627cd194aaa1153760ccf85091">CanRead</a>())
<a name="l00644"></a>00644                         this-&gt;<a class="code" href="classting_1_1Waitable.htm#a88ad92a99e4828aa5d5003dcabfb97b8">SetCanReadFlag</a>();
<a name="l00645"></a>00645                         
<a name="l00646"></a>00646 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00647"></a>00647 <span class="preprocessor"></span>                        <span class="keywordflow">if</span>(SetEvent(this-&gt;eventForWaitable) == 0){
<a name="l00648"></a>00648                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Queue::PushMessage(): setting event for Waitable failed&quot;</span>);
<a name="l00649"></a>00649                         }
<a name="l00650"></a>00650 <span class="preprocessor">#else</span>
<a name="l00651"></a>00651 <span class="preprocessor"></span>                        {
<a name="l00652"></a>00652                                 <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a> oneByteBuf[1];
<a name="l00653"></a>00653                                 write(this-&gt;pipeEnds[1], oneByteBuf, 1);
<a name="l00654"></a>00654                         }
<a name="l00655"></a>00655 <span class="preprocessor">#endif</span>
<a name="l00656"></a>00656 <span class="preprocessor"></span>                }
<a name="l00657"></a>00657 
<a name="l00658"></a>00658                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;<a class="code" href="classting_1_1Waitable.htm#a3fba19627cd194aaa1153760ccf85091">CanRead</a>())
<a name="l00659"></a>00659                 <span class="comment">//NOTE: must do signalling while mutex is locked!!!</span>
<a name="l00660"></a>00660                 this-&gt;sem.<a class="code" href="classting_1_1Semaphore.htm#a14d56cb68623396f201cfbb9629e9f29" title="Signal the semaphore.">Signal</a>();
<a name="l00661"></a>00661         }
<a name="l00662"></a>00662 
<a name="l00663"></a>00663 
<a name="l00664"></a>00664 
<a name="l00672"></a><a class="code" href="classting_1_1Queue.htm#ab0213782f4f7138688e2812da9d5b7ba">00672</a>         <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;Message&gt;</a> <a class="code" href="classting_1_1Queue.htm#ab0213782f4f7138688e2812da9d5b7ba" title="Get message from queue, does not block if no messages queued.">PeekMsg</a>(){
<a name="l00673"></a>00673                 <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Mutex::Guard</a> mutexGuard(this-&gt;mut);
<a name="l00674"></a>00674                 <span class="keywordflow">if</span>(this-&gt;first){
<a name="l00675"></a>00675                         <span class="comment">//NOTE: Decrement semaphore value, because we take one message from queue.</span>
<a name="l00676"></a>00676                         <span class="comment">//      The semaphore value should be &gt; 0 here, so there will be no hang</span>
<a name="l00677"></a>00677                         <span class="comment">//      in Wait().</span>
<a name="l00678"></a>00678                         <span class="comment">//      The semaphore value actually reflects the number of Messages in</span>
<a name="l00679"></a>00679                         <span class="comment">//      the queue.</span>
<a name="l00680"></a>00680                         this-&gt;sem.<a class="code" href="classting_1_1Semaphore.htm#ac263b6f61268a768a6770d46d4e55f27" title="Wait on semaphore.">Wait</a>();
<a name="l00681"></a>00681                         <a class="code" href="classting_1_1Message.htm" title="Message abstract class.">Message</a>* ret = this-&gt;first;
<a name="l00682"></a>00682                         this-&gt;first = this-&gt;first-&gt;next;
<a name="l00683"></a>00683 
<a name="l00684"></a>00684                         <span class="keywordflow">if</span>(this-&gt;first == 0){
<a name="l00685"></a>00685 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00686"></a>00686 <span class="preprocessor"></span>                                <span class="keywordflow">if</span>(ResetEvent(this-&gt;eventForWaitable) == 0){
<a name="l00687"></a>00687                                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00688"></a>00688                                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Queue::Wait(): ResetEvent() failed&quot;</span>);
<a name="l00689"></a>00689                                 }
<a name="l00690"></a>00690 <span class="preprocessor">#else</span>
<a name="l00691"></a>00691 <span class="preprocessor"></span>                                <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a> oneByteBuf[1];
<a name="l00692"></a>00692                                 read(this-&gt;pipeEnds[0], oneByteBuf, 1);
<a name="l00693"></a>00693 <span class="preprocessor">#endif</span>
<a name="l00694"></a>00694 <span class="preprocessor"></span>                        }
<a name="l00695"></a>00695 
<a name="l00696"></a>00696                         <span class="keywordflow">if</span>(!this-&gt;first) <span class="comment">//clear &apos;can read&apos; flag if no messages left on the queue</span>
<a name="l00697"></a>00697                                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#ae7a518cea602c4d2c050d0f0faa4902d">ClearCanReadFlag</a>();
<a name="l00698"></a>00698 
<a name="l00699"></a>00699                         <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;Message&gt;</a>(ret);
<a name="l00700"></a>00700                 }
<a name="l00701"></a>00701                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;Message&gt;</a>();
<a name="l00702"></a>00702         }
<a name="l00703"></a>00703 
<a name="l00704"></a>00704 
<a name="l00705"></a>00705 
<a name="l00717"></a><a class="code" href="classting_1_1Queue.htm#a62164efadb3c29273af1026b39fcc01e">00717</a>         <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;Message&gt;</a> <a class="code" href="classting_1_1Queue.htm#a62164efadb3c29273af1026b39fcc01e" title="Get message from queue, blocks if no messages queued.">GetMsg</a>(){
<a name="l00718"></a>00718                 <a class="code" href="Thread_8hpp.htm#ae228c1f2819e459ddc6cb21bcab3a7d9">M_QUEUE_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Queue[&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="stringliteral">&quot;]::GetMsg(): enter&quot;</span> &lt;&lt; std::endl)
<a name="l00719"></a>00719                 {
<a name="l00720"></a>00720                         <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Mutex::Guard</a> mutexGuard(this-&gt;mut);
<a name="l00721"></a>00721                         <span class="keywordflow">if</span>(this-&gt;first){
<a name="l00722"></a>00722                                 <span class="comment">//NOTE: Decrement semaphore value, because we take one message from queue.</span>
<a name="l00723"></a>00723                                 <span class="comment">//      The semaphore value should be &gt; 0 here, so there will be no hang</span>
<a name="l00724"></a>00724                                 <span class="comment">//      in Wait().</span>
<a name="l00725"></a>00725                                 <span class="comment">//      The semaphore value actually reflects the number of Messages in</span>
<a name="l00726"></a>00726                                 <span class="comment">//      the queue.</span>
<a name="l00727"></a>00727                                 this-&gt;sem.<a class="code" href="classting_1_1Semaphore.htm#ac263b6f61268a768a6770d46d4e55f27" title="Wait on semaphore.">Wait</a>();
<a name="l00728"></a>00728                                 <a class="code" href="classting_1_1Message.htm" title="Message abstract class.">Message</a>* ret = this-&gt;first;
<a name="l00729"></a>00729                                 this-&gt;first = this-&gt;first-&gt;next;
<a name="l00730"></a>00730 
<a name="l00731"></a>00731                                 <span class="keywordflow">if</span>(this-&gt;first == 0){
<a name="l00732"></a>00732 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00733"></a>00733 <span class="preprocessor"></span>                                        <span class="keywordflow">if</span>(ResetEvent(this-&gt;eventForWaitable) == 0){
<a name="l00734"></a>00734                                                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00735"></a>00735                                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Queue::Wait(): ResetEvent() failed&quot;</span>);
<a name="l00736"></a>00736                                         }
<a name="l00737"></a>00737 <span class="preprocessor">#else</span>
<a name="l00738"></a>00738 <span class="preprocessor"></span>                                        <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a> oneByteBuf[1];
<a name="l00739"></a>00739                                         read(this-&gt;pipeEnds[0], oneByteBuf, 1);
<a name="l00740"></a>00740 <span class="preprocessor">#endif</span>
<a name="l00741"></a>00741 <span class="preprocessor"></span>                                }
<a name="l00742"></a>00742 
<a name="l00743"></a>00743                                 <span class="keywordflow">if</span>(!this-&gt;first) <span class="comment">//clear &apos;can read&apos; flag if no messages left on the queue</span>
<a name="l00744"></a>00744                                         this-&gt;<a class="code" href="classting_1_1Waitable.htm#ae7a518cea602c4d2c050d0f0faa4902d">ClearCanReadFlag</a>();
<a name="l00745"></a>00745 
<a name="l00746"></a>00746                                 <a class="code" href="Thread_8hpp.htm#ae228c1f2819e459ddc6cb21bcab3a7d9">M_QUEUE_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Queue[&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="stringliteral">&quot;]::GetMsg(): exit without waiting on semaphore&quot;</span> &lt;&lt; std::endl)
<a name="l00747"></a>00747                                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;Message&gt;</a>(ret);
<a name="l00748"></a>00748                         }
<a name="l00749"></a>00749                 }
<a name="l00750"></a>00750                 <a class="code" href="Thread_8hpp.htm#ae228c1f2819e459ddc6cb21bcab3a7d9">M_QUEUE_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Queue[&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="stringliteral">&quot;]::GetMsg(): waiting&quot;</span> &lt;&lt; std::endl)
<a name="l00751"></a>00751                 <a class="code" href="debug_8hpp.htm#a93e8ea72eb76b37321ac47b25fbd8f15">ASSERT_EXEC</a>(this-&gt;sem.<a class="code" href="classting_1_1Semaphore.htm#ac263b6f61268a768a6770d46d4e55f27" title="Wait on semaphore.">Wait</a>())
<a name="l00752"></a>00752                 <a class="code" href="Thread_8hpp.htm#ae228c1f2819e459ddc6cb21bcab3a7d9">M_QUEUE_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Queue[&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="stringliteral">&quot;]::GetMsg(): signalled&quot;</span> &lt;&lt; std::endl)
<a name="l00753"></a>00753                 {
<a name="l00754"></a>00754                         <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Mutex::Guard</a> mutexGuard(this-&gt;mut);
<a name="l00755"></a>00755                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;first)
<a name="l00756"></a>00756                         <a class="code" href="classting_1_1Message.htm" title="Message abstract class.">Message</a>* ret = this-&gt;first;
<a name="l00757"></a>00757                         this-&gt;first = this-&gt;first-&gt;next;
<a name="l00758"></a>00758 
<a name="l00759"></a>00759                         <span class="keywordflow">if</span>(this-&gt;first == 0){
<a name="l00760"></a>00760 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00761"></a>00761 <span class="preprocessor"></span>                                <span class="keywordflow">if</span>(ResetEvent(this-&gt;eventForWaitable) == 0){
<a name="l00762"></a>00762                                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00763"></a>00763                                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Queue::Wait(): ResetEvent() failed&quot;</span>);
<a name="l00764"></a>00764                                 }
<a name="l00765"></a>00765 <span class="preprocessor">#else</span>
<a name="l00766"></a>00766 <span class="preprocessor"></span>                                <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a> oneByteBuf[1];
<a name="l00767"></a>00767                                 read(this-&gt;pipeEnds[0], oneByteBuf, 1);
<a name="l00768"></a>00768 <span class="preprocessor">#endif</span>
<a name="l00769"></a>00769 <span class="preprocessor"></span>                        }
<a name="l00770"></a>00770 
<a name="l00771"></a>00771                         <span class="keywordflow">if</span>(!this-&gt;first) <span class="comment">//clear &apos;can read&apos; flag if no messages left on the queue</span>
<a name="l00772"></a>00772                                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#ae7a518cea602c4d2c050d0f0faa4902d">ClearCanReadFlag</a>();
<a name="l00773"></a>00773 
<a name="l00774"></a>00774                         <a class="code" href="Thread_8hpp.htm#ae228c1f2819e459ddc6cb21bcab3a7d9">M_QUEUE_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Queue[&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="stringliteral">&quot;]::GetMsg(): exit after waiting on semaphore&quot;</span> &lt;&lt; std::endl)
<a name="l00775"></a>00775                         <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;Message&gt;</a>(ret);
<a name="l00776"></a>00776                 }
<a name="l00777"></a>00777         }
<a name="l00778"></a>00778 
<a name="l00779"></a>00779 <span class="keyword">private</span>:
<a name="l00780"></a>00780 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00781"></a>00781 <span class="preprocessor"></span>        <span class="comment">//override</span>
<a name="l00782"></a>00782         HANDLE GetHandle(){
<a name="l00783"></a>00783                 <span class="comment">//return event handle</span>
<a name="l00784"></a>00784                 <span class="keywordflow">return</span> this-&gt;eventForWaitable;
<a name="l00785"></a>00785         }
<a name="l00786"></a>00786 
<a name="l00787"></a>00787         <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> flagsMask;<span class="comment">//flags to wait for</span>
<a name="l00788"></a>00788 
<a name="l00789"></a>00789         <span class="comment">//override</span>
<a name="l00790"></a>00790         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWaitingEvents(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> flagsToWaitFor){
<a name="l00791"></a>00791                 <span class="comment">//It is not allowed to wait on queue for write,</span>
<a name="l00792"></a>00792                 <span class="comment">//because it is always possible to push new message to queue.</span>
<a name="l00793"></a>00793                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>((flagsToWaitFor &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">Waitable::WRITE</a>) == 0)
<a name="l00794"></a>00794                 
<a name="l00795"></a>00795                 this-&gt;flagsMask = flagsToWaitFor;
<a name="l00796"></a>00796         }
<a name="l00797"></a>00797 
<a name="l00798"></a>00798         <span class="comment">//returns true if signalled</span>
<a name="l00799"></a>00799         virtual <span class="keywordtype">bool</span> CheckSignalled(){
<a name="l00800"></a>00800                 <span class="keywordflow">return</span> (this-&gt;<a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">readinessFlags</a> &amp; this-&gt;flagsMask) != 0;
<a name="l00801"></a>00801         }
<a name="l00802"></a>00802 
<a name="l00803"></a>00803 <span class="preprocessor">#else</span>
<a name="l00804"></a>00804 <span class="preprocessor"></span>        <span class="comment">//override</span>
<a name="l00805"></a>00805         <span class="keywordtype">int</span> GetHandle(){
<a name="l00806"></a>00806                 <span class="comment">//return read end of pipe</span>
<a name="l00807"></a>00807                 <span class="keywordflow">return</span> this-&gt;pipeEnds[0];
<a name="l00808"></a>00808         }
<a name="l00809"></a>00809 <span class="preprocessor">#endif</span>
<a name="l00810"></a>00810 <span class="preprocessor"></span>};<span class="comment">//~class Queue</span>
<a name="l00811"></a>00811 
<a name="l00812"></a>00812 
<a name="l00813"></a>00813 
<a name="l00819"></a><a class="code" href="classting_1_1Thread.htm">00819</a> <span class="keyword">class </span><a class="code" href="classting_1_1Thread.htm" title="a base class for threads.">Thread</a>{
<a name="l00820"></a>00820 <span class="comment">//Tread Run function</span>
<a name="l00821"></a>00821 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00822"></a>00822 <span class="preprocessor"></span>        <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> __stdcall RunThread(<span class="keywordtype">void</span> *data)
<a name="l00823"></a>00823 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00824"></a>00824 <span class="preprocessor"></span>        <span class="keyword">static</span> TInt RunThread(TAny *data)
<a name="l00825"></a>00825 <span class="preprocessor">#elif defined(M_PTHREAD) //pthread</span>
<a name="l00826"></a>00826 <span class="preprocessor"></span>        <span class="keyword">static</span> <span class="keywordtype">void</span>* RunThread(<span class="keywordtype">void</span> *data)
<a name="l00827"></a>00827 <span class="preprocessor">#else</span>
<a name="l00828"></a>00828 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00829"></a>00829 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00830"></a>00830 <span class="preprocessor"></span>        {
<a name="l00831"></a>00831                 <a class="code" href="classting_1_1Thread.htm" title="a base class for threads.">ting::Thread</a> *thr = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classting_1_1Thread.htm" title="a base class for threads.">ting::Thread</a>*<span class="keyword">&gt;</span>(data);
<a name="l00832"></a>00832                 <span class="keywordflow">try</span>{
<a name="l00833"></a>00833                         thr-&gt;<a class="code" href="classting_1_1Thread.htm#ad8eb116638d8b7af1a1df99ec15fbe9b" title="This should be overriden, this is what to be run in new thread.">Run</a>();
<a name="l00834"></a>00834                 }<span class="keywordflow">catch</span>(<a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>&amp; e){
<a name="l00835"></a>00835                         <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;uncaught ting::Exc exception in Thread::Run(): &quot;</span> &lt;&lt; e.<a class="code" href="classting_1_1Exc.htm#aeb42b766109aa53fdb2130ce83d4276a" title="Returns a pointer to exception message.">What</a>())
<a name="l00836"></a>00836                 }<span class="keywordflow">catch</span>(std::exception&amp; e){
<a name="l00837"></a>00837                         <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;uncaught std::exception exception in Thread::Run(): &quot;</span> &lt;&lt; e.what())
<a name="l00838"></a>00838                 }<span class="keywordflow">catch</span>(...){
<a name="l00839"></a>00839                         <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(<span class="keyword">false</span>, <span class="stringliteral">&quot;uncaught unknown exception in Thread::Run()&quot;</span>)
<a name="l00840"></a>00840                 }
<a name="l00841"></a>00841 
<a name="l00842"></a>00842                 {
<a name="l00843"></a>00843                         <span class="comment">//protect by mutex to avoid changing the</span>
<a name="l00844"></a>00844                         <span class="comment">//this-&gt;state variable before Join() or Start() has finished.</span>
<a name="l00845"></a>00845                         <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">ting::Mutex::Guard</a> mutexGuard(Thread::Mutex2());
<a name="l00846"></a>00846                         
<a name="l00847"></a>00847                         thr-&gt;state = STOPPED;
<a name="l00848"></a>00848                 }
<a name="l00849"></a>00849 
<a name="l00850"></a>00850 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00851"></a>00851 <span class="preprocessor"></span>                <span class="comment">//Do nothing, _endthreadex() will be called   automatically</span>
<a name="l00852"></a>00852                 <span class="comment">//upon returning from the thread routine.</span>
<a name="l00853"></a>00853 <span class="preprocessor">#elif defined(M_PTHREAD) //pthread</span>
<a name="l00854"></a>00854 <span class="preprocessor"></span>                pthread_exit(0);
<a name="l00855"></a>00855 <span class="preprocessor">#endif</span>
<a name="l00856"></a>00856 <span class="preprocessor"></span>                <span class="keywordflow">return</span> 0;
<a name="l00857"></a>00857         }
<a name="l00858"></a>00858 
<a name="l00859"></a>00859         <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">ting::Mutex</a>&amp; Mutex1(){
<a name="l00860"></a>00860                 <span class="keyword">static</span> <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">ting::Mutex</a> m;
<a name="l00861"></a>00861                 <span class="keywordflow">return</span> m;
<a name="l00862"></a>00862         }
<a name="l00863"></a>00863         <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">ting::Mutex</a>&amp; Mutex2(){
<a name="l00864"></a>00864                 <span class="keyword">static</span> <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">ting::Mutex</a> m;
<a name="l00865"></a>00865                 <span class="keywordflow">return</span> m;
<a name="l00866"></a>00866         }
<a name="l00867"></a>00867 
<a name="l00868"></a>00868         <span class="keyword">enum</span> E_State{
<a name="l00869"></a>00869                 NEW,
<a name="l00870"></a>00870                 RUNNING,
<a name="l00871"></a>00871                 STOPPED,
<a name="l00872"></a>00872                 JOINED
<a name="l00873"></a>00873         } state;
<a name="l00874"></a>00874 
<a name="l00875"></a>00875         <span class="comment">//system dependent handle</span>
<a name="l00876"></a>00876 <span class="preprocessor">#if defined(WIN32)</span>
<a name="l00877"></a>00877 <span class="preprocessor"></span>        HANDLE th;
<a name="l00878"></a>00878 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00879"></a>00879 <span class="preprocessor"></span>        RThread th;
<a name="l00880"></a>00880 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l00881"></a>00881 <span class="preprocessor"></span>        pthread_t th;
<a name="l00882"></a>00882 <span class="preprocessor">#else</span>
<a name="l00883"></a>00883 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00884"></a>00884 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00885"></a>00885 <span class="preprocessor"></span>
<a name="l00886"></a>00886         <span class="comment">//forbid copying</span>
<a name="l00887"></a>00887         <a class="code" href="classting_1_1Thread.htm" title="a base class for threads.">Thread</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Thread.htm" title="a base class for threads.">Thread</a>&amp; ){
<a name="l00888"></a>00888                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00889"></a>00889         }
<a name="l00890"></a>00890         
<a name="l00891"></a>00891         <a class="code" href="classting_1_1Thread.htm" title="a base class for threads.">Thread</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1Thread.htm" title="a base class for threads.">Thread</a>&amp; ){
<a name="l00892"></a>00892                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00893"></a>00893         }
<a name="l00894"></a>00894 
<a name="l00895"></a>00895 <span class="keyword">public</span>:
<a name="l00896"></a>00896         <span class="keyword">inline</span> <a class="code" href="classting_1_1Thread.htm" title="a base class for threads.">Thread</a>();<span class="comment">//see implementation below as inline method</span>
<a name="l00897"></a>00897 
<a name="l00898"></a><a class="code" href="classting_1_1Thread.htm#af561ed1a1dafa9160d4b62107a34537f">00898</a>         <span class="keyword">virtual</span> <a class="code" href="classting_1_1Thread.htm#af561ed1a1dafa9160d4b62107a34537f">~Thread</a>(){
<a name="l00899"></a>00899                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(
<a name="l00900"></a>00900                                 this-&gt;state == JOINED || this-&gt;state == NEW,
<a name="l00901"></a>00901                                 <span class="stringliteral">&quot;~Thread() destructor is called while the thread was not joined before. &quot;</span>
<a name="l00902"></a>00902                                 &lt;&lt; <span class="stringliteral">&quot;Make sure the thread is joined by calling Thread::Join() &quot;</span>
<a name="l00903"></a>00903                                 &lt;&lt; <span class="stringliteral">&quot;before destroying the thread object.&quot;</span>
<a name="l00904"></a>00904                         )
<a name="l00905"></a>00905 
<a name="l00906"></a>00906                 <span class="comment">//NOTE: it is incorrect to put this-&gt;Join() to this destructor, because</span>
<a name="l00907"></a>00907                 <span class="comment">//thread shall already be stopped at the moment when this destructor</span>
<a name="l00908"></a>00908                 <span class="comment">//is called. If it is not, then the thread will be still running</span>
<a name="l00909"></a>00909                 <span class="comment">//when part of the thread object is already destroyed, since thread object is</span>
<a name="l00910"></a>00910                 <span class="comment">//usually a derived object from Thread class and the destructor of this derived</span>
<a name="l00911"></a>00911                 <span class="comment">//object will be called before ~Thread() destructor.</span>
<a name="l00912"></a>00912         }
<a name="l00913"></a>00913 
<a name="l00914"></a>00914 
<a name="l00915"></a>00915 
<a name="l00920"></a>00920         <span class="keyword">virtual</span> <span class="keywordtype">void</span> Run() = 0;
<a name="l00921"></a>00921 
<a name="l00922"></a>00922 
<a name="l00923"></a>00923 
<a name="l00931"></a>00931         <span class="comment">//0 stacksize stands for default stack size (platform dependent)</span>
<a name="l00932"></a><a class="code" href="classting_1_1Thread.htm#ac4450d86b2a69de26ed246eb7cd487c8">00932</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1Thread.htm#ac4450d86b2a69de26ed246eb7cd487c8" title="Start thread execution.">Start</a>(<span class="keywordtype">unsigned</span> stackSize = 0){
<a name="l00933"></a>00933                 <span class="comment">//Protect by mutex to avoid several Start() methods to be called</span>
<a name="l00934"></a>00934                 <span class="comment">//by concurrent threads simultaneously and to protect call to Join() before Start()</span>
<a name="l00935"></a>00935                 <span class="comment">//has returned.</span>
<a name="l00936"></a>00936                 <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">ting::Mutex::Guard</a> mutexGuard1(Thread::Mutex1());
<a name="l00937"></a>00937                 <span class="comment">//Protect by mutex to avoid incorrect state changing in case when thread</span>
<a name="l00938"></a>00938                 <span class="comment">//exits before the Start() method retruned.</span>
<a name="l00939"></a>00939                 <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">ting::Mutex::Guard</a> mutexGuard2(Thread::Mutex2());
<a name="l00940"></a>00940 
<a name="l00941"></a>00941                 <span class="keywordflow">if</span>(this-&gt;state != NEW)
<a name="l00942"></a>00942                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Thread::Start(): Thread is already running or stopped&quot;</span>);
<a name="l00943"></a>00943 
<a name="l00944"></a>00944 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00945"></a>00945 <span class="preprocessor"></span>                this-&gt;th = <span class="keyword">reinterpret_cast&lt;</span>HANDLE<span class="keyword">&gt;</span>(
<a name="l00946"></a>00946                                 _beginthreadex(
<a name="l00947"></a>00947                                                 NULL,
<a name="l00948"></a>00948                                                 <span class="keywordtype">unsigned</span>(stackSize),
<a name="l00949"></a>00949                                                 &amp;RunThread,
<a name="l00950"></a>00950                                                 reinterpret_cast&lt;void*&gt;(<span class="keyword">this</span>),
<a name="l00951"></a>00951                                                 0,
<a name="l00952"></a>00952                                                 NULL
<a name="l00953"></a>00953                                         )
<a name="l00954"></a>00954                         );
<a name="l00955"></a>00955                 <span class="keywordflow">if</span>(this-&gt;th == NULL)
<a name="l00956"></a>00956                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Thread::Start(): starting thread failed&quot;</span>);
<a name="l00957"></a>00957 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l00958"></a>00958 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(this-&gt;th.Create(_L(<span class="stringliteral">&quot;ting thread&quot;</span>), &amp;RunThread,
<a name="l00959"></a>00959                                         stackSize == 0 ? KDefaultStackSize : stackSize,
<a name="l00960"></a>00960                                         NULL, reinterpret_cast&lt;TAny*&gt;(<span class="keyword">this</span>)) != KErrNone
<a name="l00961"></a>00961                                 )
<a name="l00962"></a>00962                 {
<a name="l00963"></a>00963                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Thread::Start(): starting thread failed&quot;</span>);
<a name="l00964"></a>00964                 }
<a name="l00965"></a>00965                 this-&gt;th.Resume();<span class="comment">//start the thread execution</span>
<a name="l00966"></a>00966 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l00967"></a>00967 <span class="preprocessor"></span>                {
<a name="l00968"></a>00968                         pthread_attr_t attr;
<a name="l00969"></a>00969 
<a name="l00970"></a>00970                         pthread_attr_init(&amp;attr);
<a name="l00971"></a>00971                         pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);
<a name="l00972"></a>00972                         pthread_attr_setstacksize(&amp;attr, <span class="keywordtype">size_t</span>(stackSize));
<a name="l00973"></a>00973 
<a name="l00974"></a>00974                         <span class="keywordtype">int</span> res = pthread_create(&amp;this-&gt;th, &amp;attr, &amp;RunThread, <span class="keyword">this</span>);
<a name="l00975"></a>00975                         <span class="keywordflow">if</span>(res != 0){
<a name="l00976"></a>00976                                 pthread_attr_destroy(&amp;attr);
<a name="l00977"></a>00977                                 <a class="code" href="debug_8hpp.htm#adc03d55eb4a38b80591e8b091fd5d5ee">TRACE_AND_LOG</a>(&lt;&lt; <span class="stringliteral">&quot;Thread::Start(): pthread_create() failed, error code = &quot;</span> &lt;&lt; res
<a name="l00978"></a>00978                                                 &lt;&lt; <span class="stringliteral">&quot; meaning: &quot;</span> &lt;&lt; strerror(res) &lt;&lt; std::endl)
<a name="l00979"></a>00979                                 std::stringstream ss;
<a name="l00980"></a>00980                                 ss &lt;&lt; <span class="stringliteral">&quot;Thread::Start(): starting thread failed,&quot;</span>
<a name="l00981"></a>00981                                                 &lt;&lt; <span class="stringliteral">&quot; error code = &quot;</span> &lt;&lt; res &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; strerror(res);
<a name="l00982"></a>00982                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(ss.str().c_str());
<a name="l00983"></a>00983                         }
<a name="l00984"></a>00984                         pthread_attr_destroy(&amp;attr);
<a name="l00985"></a>00985                 }
<a name="l00986"></a>00986 <span class="preprocessor">#else</span>
<a name="l00987"></a>00987 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l00988"></a>00988 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00989"></a>00989 <span class="preprocessor"></span>                this-&gt;state = RUNNING;
<a name="l00990"></a>00990         }
<a name="l00991"></a>00991 
<a name="l00992"></a>00992 
<a name="l00993"></a>00993 
<a name="l01001"></a><a class="code" href="classting_1_1Thread.htm#a9003fe37567b9db72eabce12bd5b4e83">01001</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1Thread.htm#a9003fe37567b9db72eabce12bd5b4e83" title="Wait for thread to finish its execution.">Join</a>(){
<a name="l01002"></a>01002 <span class="comment">//              TRACE(&lt;&lt; &quot;Thread::Join(): enter&quot; &lt;&lt; std::endl)</span>
<a name="l01003"></a>01003 
<a name="l01004"></a>01004                 <span class="comment">//protect by mutex to avoid several Join() methods to be called by concurrent threads simultaneously</span>
<a name="l01005"></a>01005                 <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">ting::Mutex::Guard</a> mutexGuard(Thread::Mutex1());
<a name="l01006"></a>01006 
<a name="l01007"></a>01007                 <span class="keywordflow">if</span>(this-&gt;state == NEW){
<a name="l01008"></a>01008                         <span class="comment">//thread was not started, do nothing</span>
<a name="l01009"></a>01009                         <span class="keywordflow">return</span>;
<a name="l01010"></a>01010                 }
<a name="l01011"></a>01011 
<a name="l01012"></a>01012                 <span class="keywordflow">if</span>(this-&gt;state == JOINED){
<a name="l01013"></a>01013                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Thread::Join(): thread is already joined&quot;</span>);
<a name="l01014"></a>01014                 }
<a name="l01015"></a>01015 
<a name="l01016"></a>01016                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;state == RUNNING || this-&gt;state == STOPPED)
<a name="l01017"></a>01017 
<a name="l01018"></a>01018 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l01019"></a>01019 <span class="preprocessor"></span>                WaitForSingleObject(this-&gt;th, INFINITE);
<a name="l01020"></a>01020                 CloseHandle(this-&gt;th);
<a name="l01021"></a>01021                 this-&gt;th = NULL;
<a name="l01022"></a>01022 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l01023"></a>01023 <span class="preprocessor"></span>                TRequestStatus reqStat;
<a name="l01024"></a>01024                 this-&gt;th.Logon(reqStat);
<a name="l01025"></a>01025                 User::WaitForRequest(reqStat);
<a name="l01026"></a>01026                 this-&gt;th.Close();
<a name="l01027"></a>01027 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l01028"></a>01028 <span class="preprocessor"></span>                pthread_join(this-&gt;th, 0);
<a name="l01029"></a>01029 <span class="preprocessor">#else</span>
<a name="l01030"></a>01030 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l01031"></a>01031 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01032"></a>01032 <span class="preprocessor"></span>
<a name="l01033"></a>01033                 <span class="comment">//NOTE: at this point the thread&apos;s Run() method should already exit and state</span>
<a name="l01034"></a>01034                 <span class="comment">//should be set to STOPPED</span>
<a name="l01035"></a>01035                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;state == STOPPED)
<a name="l01036"></a>01036 
<a name="l01037"></a>01037                 this-&gt;state = JOINED;
<a name="l01038"></a>01038 
<a name="l01039"></a>01039 <span class="comment">//              TRACE(&lt;&lt; &quot;Thread::Join(): exit&quot; &lt;&lt; std::endl)</span>
<a name="l01040"></a>01040         }
<a name="l01041"></a>01041 
<a name="l01042"></a>01042 
<a name="l01043"></a>01043 
<a name="l01051"></a><a class="code" href="classting_1_1Thread.htm#a0dd3df130ca9de000129a552bf2dee46">01051</a>         <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Thread.htm#a0dd3df130ca9de000129a552bf2dee46" title="Suspend the thread for a given number of milliseconds.">Sleep</a>(<span class="keywordtype">unsigned</span> msec = 0){
<a name="l01052"></a>01052 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l01053"></a>01053 <span class="preprocessor"></span>                SleepEx(DWORD(msec), FALSE);<span class="comment">// Sleep() crashes on mingw (I do not know why), this is why I use SleepEx() here.</span>
<a name="l01054"></a>01054 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l01055"></a>01055 <span class="preprocessor"></span>                User::After(msec * 1000);
<a name="l01056"></a>01056 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l01057"></a>01057 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(msec == 0){
<a name="l01058"></a>01058 <span class="preprocessor">        #if defined(sun) || defined(__sun)</span>
<a name="l01059"></a>01059 <span class="preprocessor"></span>                        sched_yield();
<a name="l01060"></a>01060 <span class="preprocessor">        #else</span>
<a name="l01061"></a>01061 <span class="preprocessor"></span>                        pthread_yield();
<a name="l01062"></a>01062 <span class="preprocessor">        #endif</span>
<a name="l01063"></a>01063 <span class="preprocessor"></span>                }<span class="keywordflow">else</span>{
<a name="l01064"></a>01064                         usleep(msec * 1000);
<a name="l01065"></a>01065                 }
<a name="l01066"></a>01066 <span class="preprocessor">#else</span>
<a name="l01067"></a>01067 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l01068"></a>01068 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01069"></a>01069 <span class="preprocessor"></span>        }
<a name="l01070"></a>01070 
<a name="l01071"></a>01071 
<a name="l01072"></a>01072 
<a name="l01081"></a><a class="code" href="classting_1_1Thread.htm#aaca08c1818bfcd0435f0c61552b6dc60">01081</a>         <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1Thread.htm#aaca08c1818bfcd0435f0c61552b6dc60" title="get current thread ID.">GetCurrentThreadID</a>(){
<a name="l01082"></a>01082 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l01083"></a>01083 <span class="preprocessor"></span>                <span class="keywordflow">return</span> unsigned(GetCurrentThreadId());
<a name="l01084"></a>01084 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l01085"></a>01085 <span class="preprocessor"></span>                <span class="keywordflow">return</span> unsigned(pthread_self());
<a name="l01086"></a>01086 <span class="preprocessor">#else</span>
<a name="l01087"></a>01087 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l01088"></a>01088 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01089"></a>01089 <span class="preprocessor"></span>        }
<a name="l01090"></a>01090 };
<a name="l01091"></a>01091 
<a name="l01092"></a>01092 
<a name="l01093"></a>01093 
<a name="l01098"></a><a class="code" href="classting_1_1MsgThread.htm">01098</a> <span class="keyword">class </span><a class="code" href="classting_1_1MsgThread.htm" title="a thread with message queue.">MsgThread</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1Thread.htm" title="a base class for threads.">Thread</a>{
<a name="l01099"></a><a class="code" href="classting_1_1MsgThread.htm#a582f5bdd1caa6fa2a28694bcfaf143d0">01099</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1QuitMessage.htm" title="Tells the thread that it should quit its execution.">QuitMessage</a>;
<a name="l01100"></a>01100         
<a name="l01101"></a>01101 <span class="keyword">protected</span>:
<a name="l01102"></a><a class="code" href="classting_1_1MsgThread.htm#ab1c0ad3e387b061f2c056c59bd49c77f">01102</a>         <span class="keyword">volatile</span> <span class="keywordtype">bool</span> quitFlag;<span class="comment">//looks like it is not necessary to protect this flag by mutex, volatile will be enough</span>
<a name="l01103"></a>01103 
<a name="l01104"></a><a class="code" href="classting_1_1MsgThread.htm#af4811e389cfb75a8e57d228f13fe3584">01104</a>         <a class="code" href="classting_1_1Queue.htm" title="Message queue.">Queue</a> queue;
<a name="l01105"></a>01105 
<a name="l01106"></a>01106 <span class="keyword">public</span>:
<a name="l01107"></a><a class="code" href="classting_1_1MsgThread.htm#ae4873d301f00d9660f9526d557945143">01107</a>         <a class="code" href="classting_1_1MsgThread.htm" title="a thread with message queue.">MsgThread</a>() :
<a name="l01108"></a>01108                         quitFlag(false)
<a name="l01109"></a>01109         {}
<a name="l01110"></a>01110 
<a name="l01114"></a>01114         <span class="keyword">inline</span> <span class="keywordtype">void</span> PushQuitMessage();<span class="comment">//see implementation below</span>
<a name="l01115"></a>01115 
<a name="l01116"></a>01116 
<a name="l01117"></a>01117 
<a name="l01121"></a>01121         <span class="keyword">inline</span> <span class="keywordtype">void</span> PushNopMessage();<span class="comment">//see implementation below</span>
<a name="l01122"></a>01122 
<a name="l01123"></a>01123 
<a name="l01124"></a>01124 
<a name="l01129"></a><a class="code" href="classting_1_1MsgThread.htm#a322e5c2bd7f6ea1a88a16be41acba5db">01129</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1MsgThread.htm#a322e5c2bd7f6ea1a88a16be41acba5db" title="Send a message to thread&amp;#39;s queue.">PushMessage</a>(<a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;ting::Message&gt;</a> msg){
<a name="l01130"></a>01130                 this-&gt;queue.PushMessage(msg);
<a name="l01131"></a>01131         }
<a name="l01132"></a>01132 };
<a name="l01133"></a>01133 
<a name="l01134"></a>01134 
<a name="l01135"></a>01135 
<a name="l01141"></a><a class="code" href="classting_1_1QuitMessage.htm">01141</a> <span class="keyword">class </span><a class="code" href="classting_1_1QuitMessage.htm" title="Tells the thread that it should quit its execution.">QuitMessage</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1Message.htm" title="Message abstract class.">Message</a>{
<a name="l01142"></a>01142         <a class="code" href="classting_1_1MsgThread.htm" title="a thread with message queue.">MsgThread</a> *thr;
<a name="l01143"></a>01143   <span class="keyword">public</span>:
<a name="l01144"></a><a class="code" href="classting_1_1QuitMessage.htm#a70530ff381dda692b997602dca5fcdc4">01144</a>         <a class="code" href="classting_1_1QuitMessage.htm" title="Tells the thread that it should quit its execution.">QuitMessage</a>(<a class="code" href="classting_1_1MsgThread.htm" title="a thread with message queue.">MsgThread</a>* thread) :
<a name="l01145"></a>01145                         thr(thread)
<a name="l01146"></a>01146         {
<a name="l01147"></a>01147                 <span class="keywordflow">if</span>(!this-&gt;thr)
<a name="l01148"></a>01148                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;QuitMessage::QuitMessage(): thread pointer passed is 0&quot;</span>);
<a name="l01149"></a>01149         }
<a name="l01150"></a>01150 
<a name="l01151"></a>01151         <span class="comment">//override</span>
<a name="l01152"></a><a class="code" href="classting_1_1QuitMessage.htm#a9567e3ddf6fccaeba1e8c24c250c52c4">01152</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1QuitMessage.htm#a9567e3ddf6fccaeba1e8c24c250c52c4" title="message handler function.">Handle</a>(){
<a name="l01153"></a>01153                 this-&gt;thr-&gt;quitFlag = <span class="keyword">true</span>;
<a name="l01154"></a>01154         }
<a name="l01155"></a>01155 };
<a name="l01156"></a>01156 
<a name="l01157"></a>01157 
<a name="l01158"></a>01158 
<a name="l01164"></a><a class="code" href="classting_1_1NopMessage.htm">01164</a> <span class="keyword">class </span><a class="code" href="classting_1_1NopMessage.htm" title="do nothing message.">NopMessage</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1Message.htm" title="Message abstract class.">Message</a>{
<a name="l01165"></a>01165   <span class="keyword">public</span>:
<a name="l01166"></a><a class="code" href="classting_1_1NopMessage.htm#a49d0c543341b11a3c51bf51dbbd597fc">01166</a>         <a class="code" href="classting_1_1NopMessage.htm#a49d0c543341b11a3c51bf51dbbd597fc">NopMessage</a>(){}
<a name="l01167"></a>01167 
<a name="l01168"></a>01168         <span class="comment">//override</span>
<a name="l01169"></a><a class="code" href="classting_1_1NopMessage.htm#ad3d4d91a0b80585fc6e0b0a92de4ff17">01169</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1NopMessage.htm#ad3d4d91a0b80585fc6e0b0a92de4ff17" title="message handler function.">Handle</a>(){
<a name="l01170"></a>01170                 <span class="comment">//Do nothing, nop</span>
<a name="l01171"></a>01171         }
<a name="l01172"></a>01172 };
<a name="l01173"></a>01173 
<a name="l01174"></a>01174 
<a name="l01175"></a>01175 
<a name="l01176"></a><a class="code" href="classting_1_1MsgThread.htm#a9abce5986dcf5602997a9e01e99d4e88">01176</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1MsgThread.htm#a9abce5986dcf5602997a9e01e99d4e88" title="Send &amp;#39;no operation&amp;#39; message to thread&amp;#39;s queue.">MsgThread::PushNopMessage</a>(){
<a name="l01177"></a>01177         this-&gt;<a class="code" href="classting_1_1MsgThread.htm#a322e5c2bd7f6ea1a88a16be41acba5db" title="Send a message to thread&amp;#39;s queue.">PushMessage</a>(<a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;Message&gt;</a>(<span class="keyword">new</span> <a class="code" href="classting_1_1NopMessage.htm" title="do nothing message.">NopMessage</a>()));
<a name="l01178"></a>01178 }
<a name="l01179"></a>01179 
<a name="l01180"></a>01180 
<a name="l01181"></a>01181 
<a name="l01182"></a><a class="code" href="classting_1_1MsgThread.htm#a786ac1b6e3bcaa6b45242d3f49dee340">01182</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1MsgThread.htm#a786ac1b6e3bcaa6b45242d3f49dee340" title="Send &amp;#39;Quit&amp;#39; message to thread&amp;#39;s queue.">MsgThread::PushQuitMessage</a>(){
<a name="l01183"></a>01183         <span class="comment">//TODO: post preallocated quit message?</span>
<a name="l01184"></a>01184         this-&gt;<a class="code" href="classting_1_1MsgThread.htm#a322e5c2bd7f6ea1a88a16be41acba5db" title="Send a message to thread&amp;#39;s queue.">PushMessage</a>(<a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;Message&gt;</a>(<span class="keyword">new</span> <a class="code" href="classting_1_1MsgThread.htm#a582f5bdd1caa6fa2a28694bcfaf143d0">QuitMessage</a>(<span class="keyword">this</span>)));
<a name="l01185"></a>01185 }
<a name="l01186"></a>01186 
<a name="l01187"></a>01187 
<a name="l01188"></a>01188 
<a name="l01189"></a><a class="code" href="classting_1_1Thread.htm#ac2bb57a426b2935afb8c9ef64b463a9f">01189</a> <span class="keyword">inline</span> <a class="code" href="classting_1_1Thread.htm#ac2bb57a426b2935afb8c9ef64b463a9f">Thread::Thread</a>() :
<a name="l01190"></a>01190                 state(<a class="code" href="classting_1_1Thread.htm" title="a base class for threads.">Thread</a>::NEW)
<a name="l01191"></a>01191 {
<a name="l01192"></a>01192 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l01193"></a>01193 <span class="preprocessor"></span>        this-&gt;th = NULL;
<a name="l01194"></a>01194 <span class="preprocessor">#elif defined(__SYMBIAN32__)</span>
<a name="l01195"></a>01195 <span class="preprocessor"></span>        <span class="comment">//do nothing</span>
<a name="l01196"></a>01196 <span class="preprocessor">#elif defined(M_PTHREAD)</span>
<a name="l01197"></a>01197 <span class="preprocessor"></span>        <span class="comment">//do nothing</span>
<a name="l01198"></a>01198 <span class="preprocessor">#else</span>
<a name="l01199"></a>01199 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown system&quot;</span>
<a name="l01200"></a>01200 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01201"></a>01201 <span class="preprocessor"></span>}
<a name="l01202"></a>01202 
<a name="l01203"></a>01203 }<span class="comment">//~namespace ting</span>
<a name="l01204"></a>01204 
<a name="l01205"></a>01205 <span class="comment">//NOTE: do not put semicolon after namespace, some compilers issue a warning on this thinking that it is a declaration.</span>
<a name="l01206"></a>01206 
<a name="l01207"></a>01207 
<a name="l01208"></a>01208 
<a name="l01209"></a>01209 <span class="comment">//if Microsoft MSVC compiler, restore warnings state</span>
<a name="l01210"></a>01210 <span class="preprocessor">#ifdef _MSC_VER</span>
<a name="l01211"></a>01211 <span class="preprocessor"></span><span class="preprocessor">#pragma warning(pop) //pop warnings state</span>
<a name="l01212"></a>01212 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01213"></a>01213 <span class="preprocessor"></span>
<a name="l01214"></a>01214 
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
