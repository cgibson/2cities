<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: ting Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="namespaces.htm"><span>Namespace&nbsp;List</span></a></li>
      <li><a href="namespacemembers.htm"><span>Namespace&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>ting Namespace Reference</h1>
<p>the main namespace of <a class="el" href="namespaceting.htm" title="the main namespace of ting library.">ting</a> library.  
<a href="#_details">More...</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm">Array</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">wrapper above new[]/delete[].  <a href="classting_1_1Array.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm">Buffer</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">abstract buffer template class.  <a href="classting_1_1Buffer.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1StaticBuffer.htm">StaticBuffer</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">static buffer class template.  <a href="classting_1_1StaticBuffer.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Exc.htm">Exc</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Basic exception class.  <a href="classting_1_1Exc.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1PoolStored.htm">PoolStored</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Base class for pool-stored objects.  <a href="classting_1_1PoolStored.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm">Ptr</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Auto-pointer template class.  <a href="classting_1_1Ptr.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1RefCounted.htm">RefCounted</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">base class for a reference counted object.  <a href="classting_1_1RefCounted.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm">Ref</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Reference to a reference counted object.  <a href="classting_1_1Ref.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1WeakRef.htm">WeakRef</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Weak Reference to a reference counted object.  <a href="classting_1_1WeakRef.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Singleton.htm">Singleton</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">singleton base class.  <a href="classting_1_1Singleton.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Socket.htm">Socket</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Basic socket class.  <a href="classting_1_1Socket.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1IPAddress.htm">IPAddress</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">a structure which holds IP address  <a href="classting_1_1IPAddress.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1SocketLib.htm">SocketLib</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a> library singletone class.  <a href="classting_1_1SocketLib.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm">TCPSocket</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">a class which represents a TCP socket.  <a href="classting_1_1TCPSocket.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPServerSocket.htm">TCPServerSocket</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">a class which represents a TCP server socket.  <a href="classting_1_1TCPServerSocket.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1UDPSocket.htm">UDPSocket</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Mutex.htm">Mutex</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">Mutex</a> object class <a class="el" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">Mutex</a> stands for "Mutual execution".  <a href="classting_1_1Mutex.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Semaphore.htm">Semaphore</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="classting_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a> class.  <a href="classting_1_1Semaphore.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1CondVar.htm">CondVar</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Message.htm">Message</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="classting_1_1Message.htm" title="Message abstract class.">Message</a> abstract class.  <a href="classting_1_1Message.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Queue.htm">Queue</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="classting_1_1Message.htm" title="Message abstract class.">Message</a> queue.  <a href="classting_1_1Queue.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Thread.htm">Thread</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">a base class for threads.  <a href="classting_1_1Thread.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1MsgThread.htm">MsgThread</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">a thread with message queue.  <a href="classting_1_1MsgThread.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1QuitMessage.htm">QuitMessage</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tells the thread that it should quit its execution.  <a href="classting_1_1QuitMessage.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1NopMessage.htm">NopMessage</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">do nothing message.  <a href="classting_1_1NopMessage.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TimerLib.htm">TimerLib</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Timer.htm">Timer</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Vector2.htm">Vector2</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">2 dimensional vector class.  <a href="classting_1_1Vector2.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Vector3.htm">Vector3</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Matrix4.htm">Matrix4</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">4x4 matrix template class.  <a href="classting_1_1Matrix4.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Quaternion.htm">Quaternion</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><a class="el" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a> template class.  <a href="classting_1_1Quaternion.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Rectangle2.htm">Rectangle2</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Waitable.htm">Waitable</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Base class for objects which can be waited for.  <a href="classting_1_1Waitable.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1WaitSet.htm">WaitSet</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set of <a class="el" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a> objects to wait for.  <a href="classting_1_1WaitSet.htm#_details">More...</a><br/></td></tr>
<tr><td colspan="2"><h2>Typedefs</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef unsigned char&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Unsigned 8 bit type.  <a href="#a2debe052f64b3825ad3e8e3ee1861e66"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef signed char&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a24b0d4ccc987334dba107d8be629ceea">s8</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Signed 8 bit type.  <a href="#a24b0d4ccc987334dba107d8be629ceea"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef unsigned short int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Unsigned 16 bit type.  <a href="#ab6db9a617ea99ab580a064cef5030906"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef signed short int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#aa12935007e884cdbb9f0260684d8c59b">s16</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Signed 16 bit type.  <a href="#aa12935007e884cdbb9f0260684d8c59b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f">u32</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Unsigned 32 bit type.  <a href="#aa54945671d9955d39a42606fab2c1b0f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef signed int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a538865e72a75616abe86558cbe983026">s32</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Signed 32 bit type.  <a href="#a538865e72a75616abe86558cbe983026"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef unsigned long long int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#aa8ad0b6936aac454c0459ee8f45c7863">u64</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Unsigned 64 bit type.  <a href="#aa8ad0b6936aac454c0459ee8f45c7863"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef long long int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#ad45e2e1d17bf070219fa8c7ab4be0230">s64</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Signed 64 bit type.  <a href="#ad45e2e1d17bf070219fa8c7ab4be0230"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classting_1_1Vector2.htm">Vector2</a>&lt; int &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a2e2a2ab6b895f9e0d3f0c42eaa66e5ed">Vec2i</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classting_1_1Vector2.htm">Vector2</a>&lt; unsigned &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#aa5638b579937c183d46322e4516974ae">Vec2ui</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classting_1_1Vector2.htm">Vector2</a>&lt; float &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a44c76171780a2ab2f28e86290e6b5f61">Vec2f</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classting_1_1Vector2.htm">Vector2</a>&lt; double &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a2236975401830859bd6c97844a8297fe">Vec2d</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classting_1_1Vector3.htm">Vector3</a>&lt; float &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a720c1b9fcc71a30505fb056c0bb2007e">Vec3f</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classting_1_1Matrix4.htm">Matrix4</a>&lt; double &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a10e249d4c51b3c0149a1db2a1a48c923">Matr4d</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classting_1_1Quaternion.htm">Quaternion</a>&lt; float &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a709203c9f910bba7fe7abd39648386a8">Quatf</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classting_1_1Quaternion.htm">Quaternion</a>&lt; double &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#ac4b06b3f811504b4b53280bb1ed2762c">Quatd</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classting_1_1Rectangle2.htm">Rectangle2</a>&lt; float &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#ab3f7130b7168bd77820cd8e6cdbd456e">Rect2f</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classting_1_1Rectangle2.htm">Rectangle2</a>&lt; double &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a573acc8eaea768f5f6667bf1cb4b5165">Rect2d</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classting_1_1Rectangle2.htm">Rectangle2</a>&lt; int &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a81828e27c60cfe52ca2efd1dc9b600df">Rect2i</a></td></tr>
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T_Type &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T_Type&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#ab6b02dc3a432b859989f9b44a98a58b2">Sign</a> (T_Type n)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get sign of a number.  <a href="#ab6b02dc3a432b859989f9b44a98a58b2"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T_Type &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T_Type&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a128b67678415f0006c23e9901b1ba257">Abs</a> (T_Type n)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get absolute value of a number.  <a href="#a128b67678415f0006c23e9901b1ba257"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T_Type &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T_Type&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a0ff74d4f3338635cfee21416cca23774">Min</a> (T_Type a, T_Type b)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get minimal of two given values.  <a href="#a0ff74d4f3338635cfee21416cca23774"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T_Type &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T_Type&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a51f203d35a15702a459c4d8191fb13f6">Max</a> (T_Type a, T_Type b)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get maximal of two given values.  <a href="#a51f203d35a15702a459c4d8191fb13f6"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a43b6821347a98cec53a9a16987777ce7">DPi</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get number Pi.  <a href="#a43b6821347a98cec53a9a16987777ce7"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#aa62cceec4e1169e774ea6f03ebd7d20f">D2Pi</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get 2 * Pi.  <a href="#aa62cceec4e1169e774ea6f03ebd7d20f"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a2a72667b952369bc91bb5a232337461f">DLnOf2</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get natural logarithm of 2, i.e.  <a href="#a2a72667b952369bc91bb5a232337461f"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#ab5f789dfdb15dc9aa0f9ccffe4652330">DNaN</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Not-A-Number.  <a href="#ab5f789dfdb15dc9aa0f9ccffe4652330"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#ae286b6d4fcc60f608251074916a6b45a">DInf</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get infinity value.  <a href="#ae286b6d4fcc60f608251074916a6b45a"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T_Type &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T_Type&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a">Pow2</a> (T_Type x)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate x^2.  <a href="#aa3ac271b2062b40953c0e043db677d3a"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T_Type &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T_Type&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#af7a55ce33a3ca2c2ed49731cb2157e0f">Pow3</a> (T_Type x)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate x^3.  <a href="#af7a55ce33a3ca2c2ed49731cb2157e0f"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T_Type &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T_Type&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a32b4844e3b5ab8566dae37f782476640">Pow4</a> (T_Type x)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate x^4.  <a href="#a32b4844e3b5ab8566dae37f782476640"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T_Type &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T_Type&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a8147759c57e834f3fb7306afb3e646d4">Pow5</a> (T_Type x)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate x^5.  <a href="#a8147759c57e834f3fb7306afb3e646d4"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a739af88cc61a4ad19f5c07354a865255">Pow</a> (T x, T p)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculates x^p.  <a href="#a739af88cc61a4ad19f5c07354a865255"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T_Type &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T_Type&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#ac2ecea3eca50133bd7f80c8b8219f727">CubicRoot</a> (T_Type x)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate cubic root of a number.  <a href="#ac2ecea3eca50133bd7f80c8b8219f727"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T_Type &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T_Type&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#aa8e349e6291656a37c371fc952c65a41">Arg</a> (T_Type x, T_Type y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate argument of a complex number.  <a href="#aa8e349e6291656a37c371fc952c65a41"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#afd699254b968860b5c69ca809a190905">Sin</a> (T x)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate sine of an angle.  <a href="#afd699254b968860b5c69ca809a190905"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#afb16e6f011b877ff550dbdd5cf5b5bfc">Cos</a> (T x)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate cosine of an angle.  <a href="#afb16e6f011b877ff550dbdd5cf5b5bfc"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#ade87193a6277b1283ed987e4931162a4">Acos</a> (T x)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate arccosine of a number.  <a href="#ade87193a6277b1283ed987e4931162a4"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a6a7321f630950e8555304037f2d9e556">Sqrt</a> (T x)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate square root of a number.  <a href="#a6a7321f630950e8555304037f2d9e556"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#acd9006efe06dee84b450d8437a3e1cdc">Exp</a> (T x)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate e^x.  <a href="#acd9006efe06dee84b450d8437a3e1cdc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f">ting::u32</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a830387d5c7d300a176b380f9b5df3263">GetTicks</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns number of milliseconds since system start.  <a href="#a830387d5c7d300a176b380f9b5df3263"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">void&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#ab7e1d03ecc64fcfc9cbbc48816cbdece">Exchange</a> (T &amp;a, T &amp;b)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Exchange two values.  <a href="#ab7e1d03ecc64fcfc9cbbc48816cbdece"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">void&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a9fe2932411d412793f585877ac57e4af">ClampTop</a> (T &amp;v, const T top)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clamp value top.  <a href="#a9fe2932411d412793f585877ac57e4af"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">void&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#abbda4cbd8b58ac08b386e315bd349a6f">ClampBottom</a> (T &amp;v, const T bottom)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clamp value bottom.  <a href="#abbda4cbd8b58ac08b386e315bd349a6f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a2c64b94277d731225090b2b584baa6e1">ToNetworkFormat16</a> (<a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a> value, <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> *out_buf)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">convert byte order of 16 bit value to network format.  <a href="#a2c64b94277d731225090b2b584baa6e1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a7be6e3e8a4e67cd4b6a420c89bffae2d">ToNetworkFormat32</a> (<a class="el" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f">u32</a> value, <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> *out_buf)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">convert byte order of 32 bit value to network format.  <a href="#a7be6e3e8a4e67cd4b6a420c89bffae2d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a2a302e45f7284df559991c8b7888ceec">FromNetworkFormat16</a> (const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> *buf)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Convert 16 bit value from network byte order to native byte order.  <a href="#a2a302e45f7284df559991c8b7888ceec"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f">u32</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a34315587a277f84864e9d6cf996251cf">FromNetworkFormat32</a> (const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> *buf)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Convert 32 bit value from network byte order to native byte order.  <a href="#a34315587a277f84864e9d6cf996251cf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a66e29735360f55b08f4744137a16bf4f">DMaxUint</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Maximal value of unsigned integer type.  <a href="#a66e29735360f55b08f4744137a16bf4f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#af2db06bf4b5d3b18105cdb10237c1fd6">DMaxInt</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Maximal value of integer type.  <a href="#af2db06bf4b5d3b18105cdb10237c1fd6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a742bda65d1dbf0fba369934891f8e6c9">DMinInt</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Minimal value of integer type.  <a href="#a742bda65d1dbf0fba369934891f8e6c9"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">const char *&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a2a1e3e56cfa8cfa761da1f6383b95662">ParseNum</a> (const char *str, T &amp;out_Res)</td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">const char *&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#ab03f54d48e64f9069f07193acee0ed33">ParseNum&lt; int &gt;</a> (const char *str, int &amp;out_Res)</td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">const char *&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a545d974e4636e23f91b7a146b6798421">ParseNum&lt; float &gt;</a> (const char *str, float &amp;out_Res)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a4e15e8cdd044afbab6acf181c54edcb5">STATIC_ASSERT</a> (sizeof(<a class="el" href="classting_1_1Vector3.htm">Vec3f</a>)==sizeof(float)*3) typedef <a class="el" href="classting_1_1Vector3.htm">Vector3</a>&lt; double &gt; Vec3d</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceting.htm#a24c130f5be194b47f823892d6ed5fc03">STATIC_ASSERT</a> (sizeof(Vec3d)==sizeof(double)*3) typedef <a class="el" href="classting_1_1Matrix4.htm">Matrix4</a>&lt; float &gt; Matr4f</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>the main namespace of <a class="el" href="namespaceting.htm" title="the main namespace of ting library.">ting</a> library. </p>
<p>All the declarations of <a class="el" href="namespaceting.htm" title="the main namespace of ting library.">ting</a> library are made inside this namespace. </p>
<hr/><h2>Typedef Documentation</h2>
<a class="anchor" id="a10e249d4c51b3c0149a1db2a1a48c923"></a><!-- doxytag: member="ting::Matr4d" ref="a10e249d4c51b3c0149a1db2a1a48c923" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classting_1_1Matrix4.htm">Matrix4</a>&lt;double&gt; <a class="el" href="classting_1_1Matrix4.htm">ting::Matr4d</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac4b06b3f811504b4b53280bb1ed2762c"></a><!-- doxytag: member="ting::Quatd" ref="ac4b06b3f811504b4b53280bb1ed2762c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classting_1_1Quaternion.htm">Quaternion</a>&lt;double&gt; <a class="el" href="classting_1_1Quaternion.htm">ting::Quatd</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a709203c9f910bba7fe7abd39648386a8"></a><!-- doxytag: member="ting::Quatf" ref="a709203c9f910bba7fe7abd39648386a8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classting_1_1Quaternion.htm">Quaternion</a>&lt;float&gt; <a class="el" href="classting_1_1Quaternion.htm">ting::Quatf</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a573acc8eaea768f5f6667bf1cb4b5165"></a><!-- doxytag: member="ting::Rect2d" ref="a573acc8eaea768f5f6667bf1cb4b5165" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classting_1_1Rectangle2.htm">Rectangle2</a>&lt;double&gt; <a class="el" href="classting_1_1Rectangle2.htm">ting::Rect2d</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab3f7130b7168bd77820cd8e6cdbd456e"></a><!-- doxytag: member="ting::Rect2f" ref="ab3f7130b7168bd77820cd8e6cdbd456e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classting_1_1Rectangle2.htm">Rectangle2</a>&lt;float&gt; <a class="el" href="classting_1_1Rectangle2.htm">ting::Rect2f</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a81828e27c60cfe52ca2efd1dc9b600df"></a><!-- doxytag: member="ting::Rect2i" ref="a81828e27c60cfe52ca2efd1dc9b600df" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classting_1_1Rectangle2.htm">Rectangle2</a>&lt;int&gt; <a class="el" href="classting_1_1Rectangle2.htm">ting::Rect2i</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa12935007e884cdbb9f0260684d8c59b"></a><!-- doxytag: member="ting::s16" ref="aa12935007e884cdbb9f0260684d8c59b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef signed short int <a class="el" href="namespaceting.htm#aa12935007e884cdbb9f0260684d8c59b">ting::s16</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Signed 16 bit type. </p>

</div>
</div>
<a class="anchor" id="a538865e72a75616abe86558cbe983026"></a><!-- doxytag: member="ting::s32" ref="a538865e72a75616abe86558cbe983026" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef signed int <a class="el" href="namespaceting.htm#a538865e72a75616abe86558cbe983026">ting::s32</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Signed 32 bit type. </p>

</div>
</div>
<a class="anchor" id="ad45e2e1d17bf070219fa8c7ab4be0230"></a><!-- doxytag: member="ting::s64" ref="ad45e2e1d17bf070219fa8c7ab4be0230" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef long long int <a class="el" href="namespaceting.htm#ad45e2e1d17bf070219fa8c7ab4be0230">ting::s64</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Signed 64 bit type. </p>

</div>
</div>
<a class="anchor" id="a24b0d4ccc987334dba107d8be629ceea"></a><!-- doxytag: member="ting::s8" ref="a24b0d4ccc987334dba107d8be629ceea" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef signed char <a class="el" href="namespaceting.htm#a24b0d4ccc987334dba107d8be629ceea">ting::s8</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Signed 8 bit type. </p>

</div>
</div>
<a class="anchor" id="ab6db9a617ea99ab580a064cef5030906"></a><!-- doxytag: member="ting::u16" ref="ab6db9a617ea99ab580a064cef5030906" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef unsigned short int <a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">ting::u16</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Unsigned 16 bit type. </p>

</div>
</div>
<a class="anchor" id="aa54945671d9955d39a42606fab2c1b0f"></a><!-- doxytag: member="ting::u32" ref="aa54945671d9955d39a42606fab2c1b0f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef unsigned int <a class="el" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f">ting::u32</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Unsigned 32 bit type. </p>

</div>
</div>
<a class="anchor" id="aa8ad0b6936aac454c0459ee8f45c7863"></a><!-- doxytag: member="ting::u64" ref="aa8ad0b6936aac454c0459ee8f45c7863" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef unsigned long long int <a class="el" href="namespaceting.htm#aa8ad0b6936aac454c0459ee8f45c7863">ting::u64</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Unsigned 64 bit type. </p>

</div>
</div>
<a class="anchor" id="a2debe052f64b3825ad3e8e3ee1861e66"></a><!-- doxytag: member="ting::u8" ref="a2debe052f64b3825ad3e8e3ee1861e66" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef unsigned char <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Unsigned 8 bit type. </p>

</div>
</div>
<a class="anchor" id="a2236975401830859bd6c97844a8297fe"></a><!-- doxytag: member="ting::Vec2d" ref="a2236975401830859bd6c97844a8297fe" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classting_1_1Vector2.htm">Vector2</a>&lt;double&gt; <a class="el" href="classting_1_1Vector2.htm">ting::Vec2d</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a44c76171780a2ab2f28e86290e6b5f61"></a><!-- doxytag: member="ting::Vec2f" ref="a44c76171780a2ab2f28e86290e6b5f61" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classting_1_1Vector2.htm">Vector2</a>&lt;float&gt; <a class="el" href="classting_1_1Vector2.htm">ting::Vec2f</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a2e2a2ab6b895f9e0d3f0c42eaa66e5ed"></a><!-- doxytag: member="ting::Vec2i" ref="a2e2a2ab6b895f9e0d3f0c42eaa66e5ed" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classting_1_1Vector2.htm">Vector2</a>&lt;int&gt; <a class="el" href="classting_1_1Vector2.htm">ting::Vec2i</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aa5638b579937c183d46322e4516974ae"></a><!-- doxytag: member="ting::Vec2ui" ref="aa5638b579937c183d46322e4516974ae" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classting_1_1Vector2.htm">Vector2</a>&lt;unsigned&gt; <a class="el" href="classting_1_1Vector2.htm">ting::Vec2ui</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a720c1b9fcc71a30505fb056c0bb2007e"></a><!-- doxytag: member="ting::Vec3f" ref="a720c1b9fcc71a30505fb056c0bb2007e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classting_1_1Vector3.htm">Vector3</a>&lt;float&gt; <a class="el" href="classting_1_1Vector3.htm">ting::Vec3f</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a128b67678415f0006c23e9901b1ba257"></a><!-- doxytag: member="ting::Abs" ref="a128b67678415f0006c23e9901b1ba257" args="(T_Type n)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T_Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T_Type ting::Abs </td>
          <td>(</td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>n</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get absolute value of a number. </p>
<p>General implementation of this function is as follows: </p>
<div class="fragment"><pre class="fragment"> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_Type&gt; <span class="keyword">inline</span> T_Type <a class="code" href="namespaceting.htm#a128b67678415f0006c23e9901b1ba257" title="Get absolute value of a number.">Abs</a>(T_Type n){
     <span class="keywordflow">return</span> n &gt; 0 ? n : (-n);
 }
</pre></div> <dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>n</em>&nbsp;</td><td>- number to get absolute value of. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>absolute value of the passed argument. </dd></dl>

</div>
</div>
<a class="anchor" id="ade87193a6277b1283ed987e4931162a4"></a><!-- doxytag: member="ting::Acos" ref="ade87193a6277b1283ed987e4931162a4" args="(T x)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T ting::Acos </td>
          <td>(</td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>x</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate arccosine of a number. </p>

</div>
</div>
<a class="anchor" id="aa8e349e6291656a37c371fc952c65a41"></a><!-- doxytag: member="ting::Arg" ref="aa8e349e6291656a37c371fc952c65a41" args="(T_Type x, T_Type y)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T_Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T_Type ting::Arg </td>
          <td>(</td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate argument of a complex number. </p>
<p>Any complex number C = x + i * y can be represented in the form C = |C| * exp(i * arg) where 'arg' is the argument of a complex number. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>- real part of a complex number. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>- imaginary part of a complex number. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>argument of a complex number. </dd></dl>

</div>
</div>
<a class="anchor" id="abbda4cbd8b58ac08b386e315bd349a6f"></a><!-- doxytag: member="ting::ClampBottom" ref="abbda4cbd8b58ac08b386e315bd349a6f" args="(T &amp;v, const T bottom)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void ting::ClampBottom </td>
          <td>(</td>
          <td class="paramtype">T &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&nbsp;</td>
          <td class="paramname"> <em>bottom</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clamp value bottom. </p>
<p>Usage is analogous to <a class="el" href="namespaceting.htm#a9fe2932411d412793f585877ac57e4af" title="Clamp value top.">ting::ClampTop</a>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>v</em>&nbsp;</td><td>- reference to the value which bottom is to be clamped. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bottom</em>&nbsp;</td><td>- value to clamp the bottom to. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9fe2932411d412793f585877ac57e4af"></a><!-- doxytag: member="ting::ClampTop" ref="a9fe2932411d412793f585877ac57e4af" args="(T &amp;v, const T top)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void ting::ClampTop </td>
          <td>(</td>
          <td class="paramtype">T &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&nbsp;</td>
          <td class="paramname"> <em>top</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clamp value top. </p>
<p>This inline template function can be used to clamp the top of the value. Example: </p>
<div class="fragment"><pre class="fragment"> <span class="keywordtype">int</span> a = 30;

 <span class="comment">//Clamp to 40. Value of &apos;a&apos; remains unchanged,</span>
 <span class="comment">//since it is already less than 40.</span>
 <a class="code" href="namespaceting.htm#a9fe2932411d412793f585877ac57e4af" title="Clamp value top.">ting::ClampTop</a>(a, 40);
 std::cout &lt;&lt; a &lt;&lt; std::endl;

 <span class="comment">//Clamp to 27. Value of &apos;a&apos; is changed to 27,</span>
 <span class="comment">//since it is 30 which is greater than 27.</span>
 <a class="code" href="namespaceting.htm#a9fe2932411d412793f585877ac57e4af" title="Clamp value top.">ting::ClampTop</a>(a, 27);
 std::cout &lt;&lt; a &lt;&lt; std::endl;
</pre></div><p> As a result, this will print: </p>
<div class="fragment"><pre class="fragment"> 30
 27
</pre></div> <dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>v</em>&nbsp;</td><td>- reference to the value which top is to be clamped. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>top</em>&nbsp;</td><td>- value to clamp the top to. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afb16e6f011b877ff550dbdd5cf5b5bfc"></a><!-- doxytag: member="ting::Cos" ref="afb16e6f011b877ff550dbdd5cf5b5bfc" args="(T x)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T ting::Cos </td>
          <td>(</td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>x</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate cosine of an angle. </p>

</div>
</div>
<a class="anchor" id="ac2ecea3eca50133bd7f80c8b8219f727"></a><!-- doxytag: member="ting::CubicRoot" ref="ac2ecea3eca50133bd7f80c8b8219f727" args="(T_Type x)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T_Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T_Type ting::CubicRoot </td>
          <td>(</td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>x</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate cubic root of a number. </p>

</div>
</div>
<a class="anchor" id="aa62cceec4e1169e774ea6f03ebd7d20f"></a><!-- doxytag: member="ting::D2Pi" ref="aa62cceec4e1169e774ea6f03ebd7d20f" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T ting::D2Pi </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get 2 * Pi. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>2 * Pi. </dd></dl>

</div>
</div>
<a class="anchor" id="ae286b6d4fcc60f608251074916a6b45a"></a><!-- doxytag: member="ting::DInf" ref="ae286b6d4fcc60f608251074916a6b45a" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T ting::DInf </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get infinity value. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>infinity value. </dd></dl>

</div>
</div>
<a class="anchor" id="a2a72667b952369bc91bb5a232337461f"></a><!-- doxytag: member="ting::DLnOf2" ref="a2a72667b952369bc91bb5a232337461f" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T ting::DLnOf2 </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get natural logarithm of 2, i.e. </p>
<p>ln(2). </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>natural logarithm of 2. </dd></dl>

</div>
</div>
<a class="anchor" id="af2db06bf4b5d3b18105cdb10237c1fd6"></a><!-- doxytag: member="ting::DMaxInt" ref="af2db06bf4b5d3b18105cdb10237c1fd6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ting::DMaxInt </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Maximal value of integer type. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Maximal value an integer type can represent on the current platform. </dd></dl>

</div>
</div>
<a class="anchor" id="a66e29735360f55b08f4744137a16bf4f"></a><!-- doxytag: member="ting::DMaxUint" ref="a66e29735360f55b08f4744137a16bf4f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned ting::DMaxUint </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Maximal value of unsigned integer type. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Maximal value an unsigned integer type can represent on the current platform. </dd></dl>

</div>
</div>
<a class="anchor" id="a742bda65d1dbf0fba369934891f8e6c9"></a><!-- doxytag: member="ting::DMinInt" ref="a742bda65d1dbf0fba369934891f8e6c9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int ting::DMinInt </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Minimal value of integer type. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Minimal value an integer type can represent on the current platform. </dd></dl>

</div>
</div>
<a class="anchor" id="ab5f789dfdb15dc9aa0f9ccffe4652330"></a><!-- doxytag: member="ting::DNaN" ref="ab5f789dfdb15dc9aa0f9ccffe4652330" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T ting::DNaN </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Not-A-Number. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Not-A-Number value. </dd></dl>

</div>
</div>
<a class="anchor" id="a43b6821347a98cec53a9a16987777ce7"></a><!-- doxytag: member="ting::DPi" ref="a43b6821347a98cec53a9a16987777ce7" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T ting::DPi </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get number Pi. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>number Pi. </dd></dl>

</div>
</div>
<a class="anchor" id="ab7e1d03ecc64fcfc9cbbc48816cbdece"></a><!-- doxytag: member="ting::Exchange" ref="ab7e1d03ecc64fcfc9cbbc48816cbdece" args="(T &amp;a, T &amp;b)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void ting::Exchange </td>
          <td>(</td>
          <td class="paramtype">T &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Exchange two values. </p>
<p>Note, that it uses temporary variable to switch the values. Thus, the value should have proper copy constructor defined. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>- reference to value a. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>- reference to value b. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acd9006efe06dee84b450d8437a3e1cdc"></a><!-- doxytag: member="ting::Exp" ref="acd9006efe06dee84b450d8437a3e1cdc" args="(T x)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T ting::Exp </td>
          <td>(</td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>x</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate e^x. </p>

</div>
</div>
<a class="anchor" id="a2a302e45f7284df559991c8b7888ceec"></a><!-- doxytag: member="ting::FromNetworkFormat16" ref="a2a302e45f7284df559991c8b7888ceec" args="(const u8 *buf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a> ting::FromNetworkFormat16 </td>
          <td>(</td>
          <td class="paramtype">const u8 *&nbsp;</td>
          <td class="paramname"> <em>buf</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Convert 16 bit value from network byte order to native byte order. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>buf</em>&nbsp;</td><td>- pointer to buffer containig 2 bytes to convert from network format. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>16 bit unsigned integer converted from network byte order to native byte order. </dd></dl>

</div>
</div>
<a class="anchor" id="a34315587a277f84864e9d6cf996251cf"></a><!-- doxytag: member="ting::FromNetworkFormat32" ref="a34315587a277f84864e9d6cf996251cf" args="(const u8 *buf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f">u32</a> ting::FromNetworkFormat32 </td>
          <td>(</td>
          <td class="paramtype">const u8 *&nbsp;</td>
          <td class="paramname"> <em>buf</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Convert 32 bit value from network byte order to native byte order. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>buf</em>&nbsp;</td><td>- pointer to buffer containig 4 bytes to convert from network format. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>32 bit unsigned integer converted from network byte order to native byte order. </dd></dl>

</div>
</div>
<a class="anchor" id="a830387d5c7d300a176b380f9b5df3263"></a><!-- doxytag: member="ting::GetTicks" ref="a830387d5c7d300a176b380f9b5df3263" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f">ting::u32</a> ting::GetTicks </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns number of milliseconds since system start. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of milliseconds passed since system start. </dd></dl>

</div>
</div>
<a class="anchor" id="a51f203d35a15702a459c4d8191fb13f6"></a><!-- doxytag: member="ting::Max" ref="a51f203d35a15702a459c4d8191fb13f6" args="(T_Type a, T_Type b)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T_Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T_Type ting::Max </td>
          <td>(</td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get maximal of two given values. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>- 1st value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>- 2nd value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>value 'a' if a is greater than b. </dd>
<dd>
value 'b' if b is greater or equal to a. </dd></dl>

</div>
</div>
<a class="anchor" id="a0ff74d4f3338635cfee21416cca23774"></a><!-- doxytag: member="ting::Min" ref="a0ff74d4f3338635cfee21416cca23774" args="(T_Type a, T_Type b)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T_Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T_Type ting::Min </td>
          <td>(</td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get minimal of two given values. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>- 1st value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>- 2nd value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>value 'a' if a is less than b. </dd>
<dd>
value 'b' if b is less or equal to a. </dd></dl>

</div>
</div>
<a class="anchor" id="a2a1e3e56cfa8cfa761da1f6383b95662"></a><!-- doxytag: member="ting::ParseNum" ref="a2a1e3e56cfa8cfa761da1f6383b95662" args="(const char *str, T &amp;out_Res)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const char* ting::ParseNum </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&nbsp;</td>
          <td class="paramname"> <em>out_Res</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a545d974e4636e23f91b7a146b6798421"></a><!-- doxytag: member="ting::ParseNum&lt; float &gt;" ref="a545d974e4636e23f91b7a146b6798421" args="(const char *str, float &amp;out_Res)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const char* ting::ParseNum&lt; float &gt; </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float &amp;&nbsp;</td>
          <td class="paramname"> <em>out_Res</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab03f54d48e64f9069f07193acee0ed33"></a><!-- doxytag: member="ting::ParseNum&lt; int &gt;" ref="ab03f54d48e64f9069f07193acee0ed33" args="(const char *str, int &amp;out_Res)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const char* ting::ParseNum&lt; int &gt; </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&nbsp;</td>
          <td class="paramname"> <em>out_Res</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a739af88cc61a4ad19f5c07354a865255"></a><!-- doxytag: member="ting::Pow" ref="a739af88cc61a4ad19f5c07354a865255" args="(T x, T p)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T ting::Pow </td>
          <td>(</td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>p</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculates x^p. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>- value </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>p</em>&nbsp;</td><td>- power </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>x^p </dd></dl>

</div>
</div>
<a class="anchor" id="aa3ac271b2062b40953c0e043db677d3a"></a><!-- doxytag: member="ting::Pow2" ref="aa3ac271b2062b40953c0e043db677d3a" args="(T_Type x)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T_Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T_Type ting::Pow2 </td>
          <td>(</td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>x</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate x^2. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>- value. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>x * x. </dd></dl>

</div>
</div>
<a class="anchor" id="af7a55ce33a3ca2c2ed49731cb2157e0f"></a><!-- doxytag: member="ting::Pow3" ref="af7a55ce33a3ca2c2ed49731cb2157e0f" args="(T_Type x)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T_Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T_Type ting::Pow3 </td>
          <td>(</td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>x</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate x^3. </p>

</div>
</div>
<a class="anchor" id="a32b4844e3b5ab8566dae37f782476640"></a><!-- doxytag: member="ting::Pow4" ref="a32b4844e3b5ab8566dae37f782476640" args="(T_Type x)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T_Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T_Type ting::Pow4 </td>
          <td>(</td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>x</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate x^4. </p>

</div>
</div>
<a class="anchor" id="a8147759c57e834f3fb7306afb3e646d4"></a><!-- doxytag: member="ting::Pow5" ref="a8147759c57e834f3fb7306afb3e646d4" args="(T_Type x)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T_Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T_Type ting::Pow5 </td>
          <td>(</td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>x</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate x^5. </p>

</div>
</div>
<a class="anchor" id="ab6b02dc3a432b859989f9b44a98a58b2"></a><!-- doxytag: member="ting::Sign" ref="ab6b02dc3a432b859989f9b44a98a58b2" args="(T_Type n)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T_Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T_Type ting::Sign </td>
          <td>(</td>
          <td class="paramtype">T_Type&nbsp;</td>
          <td class="paramname"> <em>n</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get sign of a number. </p>
<p>Template function which returns the sign of a number. General implementation of this template is as easy as: </p>
<div class="fragment"><pre class="fragment"> <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T_Type&gt; <span class="keyword">inline</span> T_Type <a class="code" href="namespaceting.htm#ab6b02dc3a432b859989f9b44a98a58b2" title="Get sign of a number.">Sign</a>(T_Type n){
     <span class="keywordflow">return</span> n &gt; 0 ? (1) : (-1);
 }
</pre></div> <dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>n</em>&nbsp;</td><td>- number to get sign of. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>-1 if the argument is negative. </dd>
<dd>
1 if the number is positive. </dd></dl>

</div>
</div>
<a class="anchor" id="afd699254b968860b5c69ca809a190905"></a><!-- doxytag: member="ting::Sin" ref="afd699254b968860b5c69ca809a190905" args="(T x)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T ting::Sin </td>
          <td>(</td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>x</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate sine of an angle. </p>

</div>
</div>
<a class="anchor" id="a6a7321f630950e8555304037f2d9e556"></a><!-- doxytag: member="ting::Sqrt" ref="a6a7321f630950e8555304037f2d9e556" args="(T x)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T ting::Sqrt </td>
          <td>(</td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>x</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculate square root of a number. </p>

</div>
</div>
<a class="anchor" id="a24c130f5be194b47f823892d6ed5fc03"></a><!-- doxytag: member="ting::STATIC_ASSERT" ref="a24c130f5be194b47f823892d6ed5fc03" args="(sizeof(Vec3d)==sizeof(double)*3) typedef Matrix4&lt; float &gt; Matr4f" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ting::STATIC_ASSERT </td>
          <td>(</td>
          <td class="paramtype">sizeof(Vec3d)&nbsp;</td>
          <td class="paramname"> = <code>=sizeof(double)*3</code></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a4e15e8cdd044afbab6acf181c54edcb5"></a><!-- doxytag: member="ting::STATIC_ASSERT" ref="a4e15e8cdd044afbab6acf181c54edcb5" args="(sizeof(Vec3f)==sizeof(float)*3) typedef Vector3&lt; double &gt; Vec3d" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ting::STATIC_ASSERT </td>
          <td>(</td>
          <td class="paramtype">sizeof(Vec3f)&nbsp;</td>
          <td class="paramname"> = <code>=sizeof(float)*3</code></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a2c64b94277d731225090b2b584baa6e1"></a><!-- doxytag: member="ting::ToNetworkFormat16" ref="a2c64b94277d731225090b2b584baa6e1" args="(u16 value, u8 *out_buf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ting::ToNetworkFormat16 </td>
          <td>(</td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>out_buf</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>convert byte order of 16 bit value to network format. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>- the value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>out_buf</em>&nbsp;</td><td>- pointer to the 2 byte buffer where the result will be placed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7be6e3e8a4e67cd4b6a420c89bffae2d"></a><!-- doxytag: member="ting::ToNetworkFormat32" ref="a7be6e3e8a4e67cd4b6a420c89bffae2d" args="(u32 value, u8 *out_buf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ting::ToNetworkFormat32 </td>
          <td>(</td>
          <td class="paramtype">u32&nbsp;</td>
          <td class="paramname"> <em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8 *&nbsp;</td>
          <td class="paramname"> <em>out_buf</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>convert byte order of 32 bit value to network format. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>- the value. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>out_buf</em>&nbsp;</td><td>- pointer to the 4 byte buffer where the result will be placed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
