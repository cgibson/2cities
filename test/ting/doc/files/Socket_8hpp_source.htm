<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: Socket.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>Socket.hpp</h1><a href="Socket_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2009-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00033"></a>00033 <span class="preprocessor">#pragma once</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#if defined(__WIN32__) || defined(WIN32)</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">#ifndef __WIN32__</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#define __WIN32__</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="preprocessor">#ifndef WIN32</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="preprocessor">#define WIN32</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;winsock2.h&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &lt;windows.h&gt;</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="preprocessor">#else //assume *nix</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &lt;sys/socket.h&gt;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &lt;netinet/in.h&gt;</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &lt;netinet/tcp.h&gt;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include &lt;netdb.h&gt;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &lt;arpa/inet.h&gt;</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include &lt;fcntl.h&gt;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include &lt;signal.h&gt;</span>
<a name="l00060"></a>00060 <span class="preprocessor">#include &lt;errno.h&gt;</span>
<a name="l00061"></a>00061 <span class="preprocessor">#include &lt;unistd.h&gt;</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="preprocessor">#endif</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span>
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="comment">//#ifdef _MSC_VER</span>
<a name="l00068"></a>00068 <span class="comment">//#pragma  warning( disable : 4290)</span>
<a name="l00069"></a>00069 <span class="comment">//#endif</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="preprocessor">#include &quot;<a class="code" href="Singleton_8hpp.htm" title="Singleton base class (template).">Singleton.hpp</a>&quot;</span>
<a name="l00072"></a>00072 <span class="preprocessor">#include &quot;<a class="code" href="Exc_8hpp.htm" title="Basic Exception class.">Exc.hpp</a>&quot;</span>
<a name="l00073"></a>00073 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00074"></a>00074 <span class="preprocessor">#include &quot;<a class="code" href="WaitSet_8hpp.htm" title="Wait set.">WaitSet.hpp</a>&quot;</span>
<a name="l00075"></a>00075 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm" title="Debug utilities.">debug.hpp</a>&quot;</span>
<a name="l00076"></a>00076 <span class="preprocessor">#include &quot;<a class="code" href="Thread_8hpp.htm" title="Multithreading library.">Thread.hpp</a>&quot;</span>
<a name="l00077"></a>00077 <span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.htm" title="Utility functions and classes.">utils.hpp</a>&quot;</span>
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 
<a name="l00085"></a>00085 <span class="keyword">namespace </span>ting{
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 <span class="comment">//forward declarations</span>
<a name="l00090"></a>00090 <span class="comment">//...</span>
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 
<a name="l00098"></a><a class="code" href="classting_1_1Socket.htm">00098</a> <span class="keyword">class </span><a class="code" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>{
<a name="l00099"></a>00099 <span class="keyword">protected</span>:
<a name="l00100"></a>00100 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00101"></a>00101 <span class="preprocessor"></span>        <span class="keyword">typedef</span> SOCKET <a class="code" href="classting_1_1Socket.htm#a7b9e576f6518f38dd9b993d69b9345fa">T_Socket</a>;
<a name="l00102"></a>00102 
<a name="l00103"></a>00103         <span class="keyword">inline</span> <span class="keyword">static</span> <a class="code" href="classting_1_1Socket.htm#a7b9e576f6518f38dd9b993d69b9345fa">T_Socket</a> <a class="code" href="classting_1_1Socket.htm#a0c8de9408709f196ad46e080e36950f7">DInvalidSocket</a>(){
<a name="l00104"></a>00104                 <span class="keywordflow">return</span> INVALID_SOCKET;
<a name="l00105"></a>00105         }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107         <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classting_1_1Socket.htm#ac27aa7477d728fd5fc852ecfb798025f">DSocketError</a>(){
<a name="l00108"></a>00108                 <span class="keywordflow">return</span> SOCKET_ERROR;
<a name="l00109"></a>00109         }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111         <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classting_1_1Socket.htm#addbe8e53443c8fb4d72ba28107497c83">DEIntr</a>(){
<a name="l00112"></a>00112                 <span class="keywordflow">return</span> WSAEINTR;
<a name="l00113"></a>00113         }
<a name="l00114"></a>00114 <span class="preprocessor">#else //assume *nix</span>
<a name="l00115"></a><a class="code" href="classting_1_1Socket.htm#a7b9e576f6518f38dd9b993d69b9345fa">00115</a> <span class="preprocessor"></span>        <span class="keyword">typedef</span> <span class="keywordtype">int</span> <a class="code" href="classting_1_1Socket.htm#a7b9e576f6518f38dd9b993d69b9345fa">T_Socket</a>;
<a name="l00116"></a>00116 
<a name="l00117"></a><a class="code" href="classting_1_1Socket.htm#a0c8de9408709f196ad46e080e36950f7">00117</a>         <span class="keyword">inline</span> <span class="keyword">static</span> <a class="code" href="classting_1_1Socket.htm#a7b9e576f6518f38dd9b993d69b9345fa">T_Socket</a> <a class="code" href="classting_1_1Socket.htm#a0c8de9408709f196ad46e080e36950f7">DInvalidSocket</a>(){
<a name="l00118"></a>00118                 <span class="keywordflow">return</span> -1;
<a name="l00119"></a>00119         }
<a name="l00120"></a>00120 
<a name="l00121"></a><a class="code" href="classting_1_1Socket.htm#ac27aa7477d728fd5fc852ecfb798025f">00121</a>         <span class="keyword">inline</span> <span class="keyword">static</span> <a class="code" href="classting_1_1Socket.htm#a7b9e576f6518f38dd9b993d69b9345fa">T_Socket</a> <a class="code" href="classting_1_1Socket.htm#ac27aa7477d728fd5fc852ecfb798025f">DSocketError</a>(){
<a name="l00122"></a>00122                 <span class="keywordflow">return</span> -1;
<a name="l00123"></a>00123         }
<a name="l00124"></a>00124 
<a name="l00125"></a><a class="code" href="classting_1_1Socket.htm#addbe8e53443c8fb4d72ba28107497c83">00125</a>         <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classting_1_1Socket.htm#addbe8e53443c8fb4d72ba28107497c83">DEIntr</a>(){
<a name="l00126"></a>00126                 <span class="keywordflow">return</span> EINTR;
<a name="l00127"></a>00127         }
<a name="l00128"></a>00128 <span class="preprocessor">#endif</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span>
<a name="l00130"></a>00130 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00131"></a>00131 <span class="preprocessor"></span>        WSAEVENT eventForWaitable;
<a name="l00132"></a>00132 <span class="preprocessor">#endif</span>
<a name="l00133"></a>00133 <span class="preprocessor"></span>
<a name="l00134"></a><a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">00134</a>         <a class="code" href="classting_1_1Socket.htm#a7b9e576f6518f38dd9b993d69b9345fa">T_Socket</a> <a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>;
<a name="l00135"></a>00135 
<a name="l00136"></a><a class="code" href="classting_1_1Socket.htm#a64fb2770ae34e10252d042b2c672321e">00136</a>         <a class="code" href="classting_1_1Socket.htm#a64fb2770ae34e10252d042b2c672321e">Socket</a>() :
<a name="l00137"></a>00137 #ifdef __WIN32__
<a name="l00138"></a>00138                         eventForWaitable(WSA_INVALID_EVENT),
<a name="l00139"></a>00139 #endif
<a name="l00140"></a>00140                         <a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>(<a class="code" href="classting_1_1Socket.htm#a0c8de9408709f196ad46e080e36950f7">DInvalidSocket</a>())
<a name="l00141"></a>00141         {
<a name="l00142"></a>00142 <span class="comment">//              TRACE(&lt;&lt; &quot;Socket::Socket(): invoked &quot; &lt;&lt; this &lt;&lt; std::endl)</span>
<a name="l00143"></a>00143         }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 
<a name="l00147"></a>00147         <span class="comment">//same as std::auto_ptr</span>
<a name="l00148"></a><a class="code" href="classting_1_1Socket.htm#adf9973457979069b4996b3faab1f4e24">00148</a>         <a class="code" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a>&amp; <a class="code" href="classting_1_1Socket.htm#adf9973457979069b4996b3faab1f4e24">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a>&amp; s){
<a name="l00149"></a>00149 <span class="comment">//              TRACE(&lt;&lt; &quot;Socket::operator=(): invoked &quot; &lt;&lt; this &lt;&lt; std::endl)</span>
<a name="l00150"></a>00150                 <span class="keywordflow">if</span>(<span class="keyword">this</span> == &amp;s)<span class="comment">//detect self-assignment</span>
<a name="l00151"></a>00151                         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00152"></a>00152 
<a name="l00153"></a>00153                 <span class="comment">//first, assign as Waitable, it may throw an exception</span>
<a name="l00154"></a>00154                 <span class="comment">//if the waitable is added to some waitset</span>
<a name="l00155"></a>00155                 this-&gt;<a class="code" href="classting_1_1Socket.htm#adf9973457979069b4996b3faab1f4e24">Waitable::operator=</a>(s);
<a name="l00156"></a>00156 
<a name="l00157"></a>00157                 this-&gt;<a class="code" href="classting_1_1Socket.htm#adf9b6fde0aa78fb1706200807bd5221e" title="Closes the socket disconnecting it if necessary.">Close</a>();
<a name="l00158"></a>00158                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a> = s.<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>;
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span>                this-&gt;eventForWaitable = s.eventForWaitable;
<a name="l00162"></a>00162                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a>&amp;<span class="keyword">&gt;</span>(s).eventForWaitable = WSA_INVALID_EVENT;
<a name="l00163"></a>00163 <span class="preprocessor">#endif</span>
<a name="l00164"></a>00164 <span class="preprocessor"></span>
<a name="l00165"></a>00165                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a>&amp;<span class="keyword">&gt;</span>(s).<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a> = <a class="code" href="classting_1_1Socket.htm#a0c8de9408709f196ad46e080e36950f7">DInvalidSocket</a>();
<a name="l00166"></a>00166                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00167"></a>00167         }
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 <span class="keyword">public</span>:
<a name="l00176"></a><a class="code" href="classting_1_1Socket_1_1Exc.htm">00176</a>         <span class="keyword">class </span><a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Exc</a> : <span class="keyword">public</span> ting::<a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Exc</a>{
<a name="l00177"></a>00177         <span class="keyword">public</span>:
<a name="l00182"></a><a class="code" href="classting_1_1Socket_1_1Exc.htm#a5ddbe64b792b9c096069a9b3723d3376">00182</a>                 <a class="code" href="classting_1_1Socket_1_1Exc.htm#a5ddbe64b792b9c096069a9b3723d3376" title="Exception constructor.">Exc</a>(<span class="keyword">const</span> std::string&amp; message = std::string()) :
<a name="l00183"></a>00183                                 ting::<a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Exc</a>((std::string(<span class="stringliteral">&quot;[Socket::Exc] &quot;</span>) + message).c_str())
<a name="l00184"></a>00184                 {}
<a name="l00185"></a>00185         };
<a name="l00186"></a>00186 
<a name="l00187"></a>00187 
<a name="l00188"></a><a class="code" href="classting_1_1Socket.htm#afe369a76849a022fda4721b6d9d3a31b">00188</a>         <a class="code" href="classting_1_1Socket.htm#a64fb2770ae34e10252d042b2c672321e">Socket</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a>&amp; s) :
<a name="l00189"></a>00189                         <span class="comment">//NOTE: operator=() will call Close, so the socket should be in invalid state!!!</span>
<a name="l00190"></a>00190                         <span class="comment">//Therefore, init variables to invalid values.</span>
<a name="l00191"></a>00191 #ifdef __WIN32__
<a name="l00192"></a>00192                         eventForWaitable(WSA_INVALID_EVENT),
<a name="l00193"></a>00193 #endif
<a name="l00194"></a>00194                         <a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>(<a class="code" href="classting_1_1Socket.htm#a0c8de9408709f196ad46e080e36950f7">DInvalidSocket</a>())
<a name="l00195"></a>00195         {
<a name="l00196"></a>00196 <span class="comment">//              TRACE(&lt;&lt; &quot;Socket::Socket(copy): invoked &quot; &lt;&lt; this &lt;&lt; std::endl)</span>
<a name="l00197"></a>00197                 this-&gt;<a class="code" href="classting_1_1Socket.htm#adf9973457979069b4996b3faab1f4e24">operator=</a>(s);
<a name="l00198"></a>00198         }
<a name="l00199"></a>00199 
<a name="l00200"></a><a class="code" href="classting_1_1Socket.htm#a319ed0c03e2dcab45c9e2c28a43fa5aa">00200</a>         <span class="keyword">virtual</span> <a class="code" href="classting_1_1Socket.htm#a319ed0c03e2dcab45c9e2c28a43fa5aa">~Socket</a>(){
<a name="l00201"></a>00201                 this-&gt;<a class="code" href="classting_1_1Socket.htm#adf9b6fde0aa78fb1706200807bd5221e" title="Closes the socket disconnecting it if necessary.">Close</a>();
<a name="l00202"></a>00202         }
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 
<a name="l00210"></a><a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee">00210</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>()<span class="keyword">const</span>{
<a name="l00211"></a>00211                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a> != <a class="code" href="classting_1_1Socket.htm#a0c8de9408709f196ad46e080e36950f7">DInvalidSocket</a>();
<a name="l00212"></a>00212         }
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 
<a name="l00220"></a><a class="code" href="classting_1_1Socket.htm#a40c06c77c73e236468df28b1bc7c5ef2">00220</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Socket.htm#a40c06c77c73e236468df28b1bc7c5ef2" title="Tells whether the socket is opened or not.">IsNotValid</a>()<span class="keyword">const</span>{
<a name="l00221"></a>00221                 <span class="keywordflow">return</span> !this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>();
<a name="l00222"></a>00222         }
<a name="l00223"></a>00223 
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 
<a name="l00229"></a><a class="code" href="classting_1_1Socket.htm#adf9b6fde0aa78fb1706200807bd5221e">00229</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1Socket.htm#adf9b6fde0aa78fb1706200807bd5221e" title="Closes the socket disconnecting it if necessary.">Close</a>(){
<a name="l00230"></a>00230 <span class="comment">//              TRACE(&lt;&lt; &quot;Socket::Close(): invoked &quot; &lt;&lt; this &lt;&lt; std::endl)</span>
<a name="l00231"></a>00231                 <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>()){
<a name="l00232"></a>00232 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00233"></a>00233 <span class="preprocessor"></span>                        <span class="comment">//Closing socket in Win32.</span>
<a name="l00234"></a>00234                         <span class="comment">//refer to http://tangentsoft.net/wskfaq/newbie.html#howclose for details</span>
<a name="l00235"></a>00235                         shutdown(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, SD_BOTH);
<a name="l00236"></a>00236                         closesocket(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>);
<a name="l00237"></a>00237 
<a name="l00238"></a>00238                         this-&gt;CloseEventForWaitable();
<a name="l00239"></a>00239 <span class="preprocessor">#else //assume linux/unix</span>
<a name="l00240"></a>00240 <span class="preprocessor"></span>                        close(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>);
<a name="l00241"></a>00241 <span class="preprocessor">#endif</span>
<a name="l00242"></a>00242 <span class="preprocessor"></span>                }
<a name="l00243"></a>00243                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">ClearAllReadinessFlags</a>();
<a name="l00244"></a>00244                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a> = <a class="code" href="classting_1_1Socket.htm#a0c8de9408709f196ad46e080e36950f7">DInvalidSocket</a>();
<a name="l00245"></a>00245         }
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 
<a name="l00254"></a><a class="code" href="classting_1_1Socket.htm#ad37ac43feba7340a29f0001b53721762">00254</a>         <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> <a class="code" href="classting_1_1Socket.htm#ad37ac43feba7340a29f0001b53721762" title="Returns local port this socket is bound to.">GetLocalPort</a>(){
<a name="l00255"></a>00255                 <span class="keywordflow">if</span>(!this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l00256"></a>00256                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;Socket::GetLocalPort(): socket is not valid&quot;</span>);
<a name="l00257"></a>00257 
<a name="l00258"></a>00258                 sockaddr_in addr;
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00261"></a>00261 <span class="preprocessor"></span>                <span class="keywordtype">int</span> len = <span class="keyword">sizeof</span>(addr);
<a name="l00262"></a>00262 <span class="preprocessor">#else//assume linux/unix</span>
<a name="l00263"></a>00263 <span class="preprocessor"></span>                socklen_t len = <span class="keyword">sizeof</span>(addr);
<a name="l00264"></a>00264 <span class="preprocessor">#endif</span>
<a name="l00265"></a>00265 <span class="preprocessor"></span>
<a name="l00266"></a>00266                 <span class="keywordflow">if</span>(getsockname(
<a name="l00267"></a>00267                                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>,
<a name="l00268"></a>00268                                 reinterpret_cast&lt;sockaddr*&gt;(&amp;addr),
<a name="l00269"></a>00269                                 &amp;len
<a name="l00270"></a>00270                         ) &lt; 0)
<a name="l00271"></a>00271                 {
<a name="l00272"></a>00272                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;Socket::GetLocalPort(): getsockname() failed&quot;</span>);
<a name="l00273"></a>00273                 }
<a name="l00274"></a>00274 
<a name="l00275"></a>00275                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a>(ntohs(addr.sin_port));
<a name="l00276"></a>00276         }
<a name="l00277"></a>00277 
<a name="l00278"></a>00278 
<a name="l00279"></a>00279 
<a name="l00280"></a>00280 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00281"></a>00281 <span class="preprocessor"></span><span class="keyword">private</span>:
<a name="l00282"></a>00282         <span class="comment">//override</span>
<a name="l00283"></a>00283         HANDLE GetHandle(){
<a name="l00284"></a>00284                 <span class="comment">//return event handle</span>
<a name="l00285"></a>00285                 <span class="keywordflow">return</span> this-&gt;eventForWaitable;
<a name="l00286"></a>00286         }
<a name="l00287"></a>00287 
<a name="l00288"></a>00288         <span class="comment">//override</span>
<a name="l00289"></a>00289         <span class="keywordtype">bool</span> CheckSignalled(){
<a name="l00290"></a>00290                 WSANETWORKEVENTS events;
<a name="l00291"></a>00291                 memset(&amp;events, 0, <span class="keyword">sizeof</span>(events));
<a name="l00292"></a>00292                 <span class="keywordflow">if</span>(WSAEnumNetworkEvents(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, this-&gt;eventForWaitable, &amp;events) != 0){
<a name="l00293"></a>00293                         <span class="keywordflow">throw</span> Socket::Exc(<span class="stringliteral">&quot;Socket::CheckSignalled(): WSAEnumNetworkEvents() failed&quot;</span>);
<a name="l00294"></a>00294                 }
<a name="l00295"></a>00295 
<a name="l00296"></a>00296                 <span class="keywordflow">if</span>((events.lNetworkEvents &amp; (FD_READ | FD_ACCEPT | FD_CLOSE)) != 0){
<a name="l00297"></a>00297                         this-&gt;<a class="code" href="classting_1_1Waitable.htm#a88ad92a99e4828aa5d5003dcabfb97b8">SetCanReadFlag</a>();
<a name="l00298"></a>00298                 }
<a name="l00299"></a>00299 
<a name="l00300"></a>00300                 <span class="keywordflow">if</span>(events.lNetworkEvents &amp; FD_WRITE){
<a name="l00301"></a>00301                         this-&gt;<a class="code" href="classting_1_1Waitable.htm#aa65a87874bfe89d950901948176184d5">SetCanWriteFlag</a>();
<a name="l00302"></a>00302                 }
<a name="l00303"></a>00303 
<a name="l00304"></a>00304                 <span class="keywordflow">return</span> this-&gt;Waitable::CheckSignalled();
<a name="l00305"></a>00305         }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 <span class="keyword">protected</span>:
<a name="l00308"></a>00308         <span class="keyword">inline</span> <span class="keywordtype">void</span> CreateEventForWaitable(){
<a name="l00309"></a>00309                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;eventForWaitable == WSA_INVALID_EVENT)
<a name="l00310"></a>00310                 this-&gt;eventForWaitable = WSACreateEvent();
<a name="l00311"></a>00311                 if(this-&gt;eventForWaitable == WSA_INVALID_EVENT){
<a name="l00312"></a>00312                         <span class="keywordflow">throw</span> Socket::Exc(<span class="stringliteral">&quot;Socket::CreateEventForWaitable(): could not create event (Win32) for implementing Waitable&quot;</span>);
<a name="l00313"></a>00313                 }
<a name="l00314"></a>00314         }
<a name="l00315"></a>00315 
<a name="l00316"></a>00316         <span class="keyword">inline</span> <span class="keywordtype">void</span> CloseEventForWaitable(){
<a name="l00317"></a>00317                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;eventForWaitable != WSA_INVALID_EVENT)
<a name="l00318"></a>00318                 WSACloseEvent(this-&gt;eventForWaitable);
<a name="l00319"></a>00319                 this-&gt;eventForWaitable = WSA_INVALID_EVENT;
<a name="l00320"></a>00320         }
<a name="l00321"></a>00321 
<a name="l00322"></a>00322         inline <span class="keywordtype">void</span> SetWaitingEventsForWindows(<span class="keywordtype">long</span> flags){
<a name="l00323"></a>00323                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;eventForWaitable != WSA_INVALID_EVENT)
<a name="l00324"></a>00324                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l00325"></a>00325 
<a name="l00326"></a>00326                 if(WSAEventSelect(
<a name="l00327"></a>00327                                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>,
<a name="l00328"></a>00328                                 this-&gt;eventForWaitable,
<a name="l00329"></a>00329                                 flags
<a name="l00330"></a>00330                         ) != 0)
<a name="l00331"></a>00331                 {
<a name="l00332"></a>00332                         <span class="keywordflow">throw</span> Socket::Exc(<span class="stringliteral">&quot;Socket::SetWaitingEventsForWindows(): could not associate event (Win32) with socket&quot;</span>);
<a name="l00333"></a>00333                 }
<a name="l00334"></a>00334         }
<a name="l00335"></a>00335 
<a name="l00336"></a>00336 
<a name="l00337"></a>00337 
<a name="l00338"></a>00338 <span class="preprocessor">#else</span>
<a name="l00339"></a>00339 <span class="preprocessor"></span><span class="keyword">private</span>:
<a name="l00340"></a>00340         <span class="comment">//override</span>
<a name="l00341"></a>00341         <span class="keywordtype">int</span> GetHandle(){
<a name="l00342"></a>00342                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>;
<a name="l00343"></a>00343         }
<a name="l00344"></a>00344 <span class="preprocessor">#endif</span>
<a name="l00345"></a>00345 <span class="preprocessor"></span>};<span class="comment">//~class Socket</span>
<a name="l00346"></a>00346 
<a name="l00347"></a>00347 
<a name="l00348"></a>00348 
<a name="l00352"></a><a class="code" href="classting_1_1IPAddress.htm">00352</a> <span class="keyword">class </span><a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>{
<a name="l00353"></a>00353 <span class="keyword">public</span>:
<a name="l00354"></a><a class="code" href="classting_1_1IPAddress.htm#a225234d3a20b4c63868267193e331213">00354</a>         <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> host;
<a name="l00355"></a><a class="code" href="classting_1_1IPAddress.htm#a3b3f0ca7cc644be6be3b89b88359372e">00355</a>         <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> port;
<a name="l00356"></a>00356 
<a name="l00357"></a><a class="code" href="classting_1_1IPAddress.htm#a4aa1661a4cc9cc9840e278ee0ed7ccd6">00357</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>() :
<a name="l00358"></a>00358                         host(0),
<a name="l00359"></a>00359                         port(0)
<a name="l00360"></a>00360         {}
<a name="l00361"></a>00361 
<a name="l00367"></a><a class="code" href="classting_1_1IPAddress.htm#a608565c75b7c58cf25d2c00116b011aa">00367</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> h, <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> p) :
<a name="l00368"></a>00368                         host(h),
<a name="l00369"></a>00369                         port(p)
<a name="l00370"></a>00370         {}
<a name="l00371"></a>00371 
<a name="l00384"></a><a class="code" href="classting_1_1IPAddress.htm#a17e83ecad5493d950a62035f08427f6e">00384</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>(<a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a> h1, <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a> h2, <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a> h3, <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a> h4, <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> p) :
<a name="l00385"></a>00385                         host(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(h1) + (<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(h2) &lt;&lt; 8) + (<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(h3) &lt;&lt; 16) + (<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(h4) &lt;&lt; 24)),
<a name="l00386"></a>00386                         port(p)
<a name="l00387"></a>00387         {}
<a name="l00388"></a>00388 
<a name="l00394"></a><a class="code" href="classting_1_1IPAddress.htm#ae1516c0a9378a54455aab14d55530309">00394</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* ip, <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> p) :
<a name="l00395"></a>00395                         host(<a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>::ParseString(ip)),
<a name="l00396"></a>00396                         port(p)
<a name="l00397"></a>00397         {}
<a name="l00398"></a>00398 
<a name="l00405"></a><a class="code" href="classting_1_1IPAddress.htm#a57a63a51a8e2a1833287112b293f1d39">00405</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1IPAddress.htm#a57a63a51a8e2a1833287112b293f1d39" title="compares two IP addresses for equality.">operator==</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>&amp; ip){
<a name="l00406"></a>00406                 <span class="keywordflow">return</span> (this-&gt;host == ip.<a class="code" href="classting_1_1IPAddress.htm#a225234d3a20b4c63868267193e331213" title="IP address.">host</a>) &amp;&amp; (this-&gt;port == ip.<a class="code" href="classting_1_1IPAddress.htm#a3b3f0ca7cc644be6be3b89b88359372e" title="IP port number.">port</a>);
<a name="l00407"></a>00407         }
<a name="l00408"></a>00408 <span class="keyword">private</span>:
<a name="l00409"></a>00409         <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> ThrowInvalidIP(){
<a name="l00410"></a>00410                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;IPAddress::ParseString(): string is not a valid IP address&quot;</span>);
<a name="l00411"></a>00411         }
<a name="l00412"></a>00412 
<a name="l00413"></a>00413         <span class="comment">//parse IP address from string</span>
<a name="l00414"></a>00414         <span class="keyword">static</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> ParseString(<span class="keyword">const</span> <span class="keywordtype">char</span>* ip){
<a name="l00415"></a>00415                 <span class="comment">//TODO: there already is a IP parsing function in BSD sockets, consider using it here</span>
<a name="l00416"></a>00416                 <span class="keywordflow">if</span>(!ip)
<a name="l00417"></a>00417                         <span class="keywordflow">throw</span> Socket::Exc(<span class="stringliteral">&quot;IPAddress::ParseString(): pointer passed as argument is 0&quot;</span>);
<a name="l00418"></a>00418 
<a name="l00419"></a>00419                 <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> h = 0;<span class="comment">//parsed host</span>
<a name="l00420"></a>00420                 <span class="keyword">const</span> <span class="keywordtype">char</span> *curp = ip;
<a name="l00421"></a>00421                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> t = 0; t &lt; 4; ++t){
<a name="l00422"></a>00422                         <span class="keywordtype">unsigned</span> digits[3];
<a name="l00423"></a>00423                         <span class="keywordtype">unsigned</span> numDgts;
<a name="l00424"></a>00424                         <span class="keywordflow">for</span>(numDgts = 0; numDgts &lt; 3; ++numDgts){
<a name="l00425"></a>00425                                 <span class="keywordflow">if</span>( *curp == <span class="charliteral">&apos;.&apos;</span> || *curp == 0 ){
<a name="l00426"></a>00426                                         <span class="keywordflow">if</span>(numDgts==0)
<a name="l00427"></a>00427                                                 ThrowInvalidIP();
<a name="l00428"></a>00428                                         <span class="keywordflow">break</span>;
<a name="l00429"></a>00429                                 }<span class="keywordflow">else</span>{
<a name="l00430"></a>00430                                         <span class="keywordflow">if</span>(*curp &lt; &apos;0&apos; || *curp &gt; <span class="charliteral">&apos;9&apos;</span>)
<a name="l00431"></a>00431                                                 ThrowInvalidIP();
<a name="l00432"></a>00432                                         digits[numDgts] = unsigned(*curp) - unsigned(<span class="charliteral">&apos;0&apos;</span>);
<a name="l00433"></a>00433                                 }
<a name="l00434"></a>00434                                 ++curp;
<a name="l00435"></a>00435                         }
<a name="l00436"></a>00436 
<a name="l00437"></a>00437                         <span class="keywordflow">if</span>(t &lt; 3 &amp;&amp; *curp != <span class="charliteral">&apos;.&apos;</span>)<span class="comment">//unexpected delimiter or unexpected end of string</span>
<a name="l00438"></a>00438                                 ThrowInvalidIP();
<a name="l00439"></a>00439                         <span class="keywordflow">else</span> <span class="keywordflow">if</span>(t == 3 &amp;&amp; *curp != 0)
<a name="l00440"></a>00440                                 ThrowInvalidIP();
<a name="l00441"></a>00441 
<a name="l00442"></a>00442                         <span class="keywordtype">unsigned</span> xxx = 0;
<a name="l00443"></a>00443                         <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> i = 0; i &lt; numDgts; ++i){
<a name="l00444"></a>00444                                 <span class="keywordtype">unsigned</span> ord = 1;
<a name="l00445"></a>00445                                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> j = 1; j &lt; numDgts - i; ++j)
<a name="l00446"></a>00446                                    ord *= 10;
<a name="l00447"></a>00447                                 xxx += digits[i] * ord;
<a name="l00448"></a>00448                         }
<a name="l00449"></a>00449                         <span class="keywordflow">if</span>(xxx &gt; 255)
<a name="l00450"></a>00450                                 ThrowInvalidIP();
<a name="l00451"></a>00451 
<a name="l00452"></a>00452                         h |= (xxx &lt;&lt; (8 * t));
<a name="l00453"></a>00453 
<a name="l00454"></a>00454                         ++curp;
<a name="l00455"></a>00455                 }
<a name="l00456"></a>00456                 <span class="keywordflow">return</span> h;
<a name="l00457"></a>00457         }
<a name="l00458"></a>00458 };<span class="comment">//~class IPAddress</span>
<a name="l00459"></a>00459 
<a name="l00460"></a>00460 
<a name="l00461"></a>00461 
<a name="l00470"></a><a class="code" href="classting_1_1SocketLib.htm">00470</a> <span class="keyword">class </span><a class="code" href="classting_1_1SocketLib.htm" title="Socket library singletone class.">SocketLib</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1Singleton.htm" title="singleton base class.">Singleton</a>&lt;SocketLib&gt;{
<a name="l00471"></a>00471 <span class="keyword">public</span>:
<a name="l00472"></a><a class="code" href="classting_1_1SocketLib.htm#a06eae92fadfc0218904734c3febec30b">00472</a>         <a class="code" href="classting_1_1SocketLib.htm#a06eae92fadfc0218904734c3febec30b">SocketLib</a>(){
<a name="l00473"></a>00473 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00474"></a>00474 <span class="preprocessor"></span>                WORD versionWanted = MAKEWORD(2,2);
<a name="l00475"></a>00475                 WSADATA wsaData;
<a name="l00476"></a>00476                 <span class="keywordflow">if</span>(WSAStartup(versionWanted, &amp;wsaData) != 0 )
<a name="l00477"></a>00477                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;SocketLib::SocketLib(): Winsock 2.2 initialization failed&quot;</span>);
<a name="l00478"></a>00478 <span class="preprocessor">#else //assume linux/unix</span>
<a name="l00479"></a>00479 <span class="preprocessor"></span>                <span class="comment">// SIGPIPE is generated when a remote socket is closed</span>
<a name="l00480"></a>00480                 void (*handler)(int);
<a name="l00481"></a>00481                 handler = signal(SIGPIPE, SIG_IGN);
<a name="l00482"></a>00482                 <span class="keywordflow">if</span>(handler != SIG_DFL)
<a name="l00483"></a>00483                         signal(SIGPIPE, handler);
<a name="l00484"></a>00484 <span class="preprocessor">#endif</span>
<a name="l00485"></a>00485 <span class="preprocessor"></span>        }
<a name="l00486"></a>00486 
<a name="l00487"></a><a class="code" href="classting_1_1SocketLib.htm#ab62f01074baa038c7a2a16bce7535aa4">00487</a>         <a class="code" href="classting_1_1SocketLib.htm#ab62f01074baa038c7a2a16bce7535aa4">~SocketLib</a>(){
<a name="l00488"></a>00488 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00489"></a>00489 <span class="preprocessor"></span>                <span class="comment">// Clean up windows networking</span>
<a name="l00490"></a>00490                 <span class="keywordflow">if</span>(WSACleanup() == SOCKET_ERROR)
<a name="l00491"></a>00491                         <span class="keywordflow">if</span>(WSAGetLastError() == WSAEINPROGRESS){
<a name="l00492"></a>00492                                 WSACancelBlockingCall();
<a name="l00493"></a>00493                                 WSACleanup();
<a name="l00494"></a>00494                         }
<a name="l00495"></a>00495 <span class="preprocessor">#else //assume linux/unix</span>
<a name="l00496"></a>00496 <span class="preprocessor"></span>                <span class="comment">// Restore the SIGPIPE handler</span>
<a name="l00497"></a>00497                 void (*handler)(int);
<a name="l00498"></a>00498                 handler = signal(SIGPIPE, SIG_DFL);
<a name="l00499"></a>00499                 <span class="keywordflow">if</span>(handler != SIG_IGN)
<a name="l00500"></a>00500                         signal(SIGPIPE, handler);
<a name="l00501"></a>00501 <span class="preprocessor">#endif</span>
<a name="l00502"></a>00502 <span class="preprocessor"></span>        }
<a name="l00503"></a>00503 
<a name="l00504"></a>00504 
<a name="l00512"></a><a class="code" href="classting_1_1SocketLib.htm#a90b9a26c7cb2a26f595f4fc74bc22894">00512</a>         <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a> <a class="code" href="classting_1_1SocketLib.htm#a90b9a26c7cb2a26f595f4fc74bc22894" title="Resolve host IP by its name.">GetHostByName</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *hostName, <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> port){
<a name="l00513"></a>00513                 <span class="keywordflow">if</span>(!hostName)
<a name="l00514"></a>00514                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;SocketLib::GetHostByName(): pointer passed as argument is 0&quot;</span>);
<a name="l00515"></a>00515 
<a name="l00516"></a>00516                 <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a> addr;
<a name="l00517"></a>00517                 addr.<a class="code" href="classting_1_1IPAddress.htm#a225234d3a20b4c63868267193e331213" title="IP address.">host</a> = inet_addr(hostName);
<a name="l00518"></a>00518                 <span class="keywordflow">if</span>(addr.<a class="code" href="classting_1_1IPAddress.htm#a225234d3a20b4c63868267193e331213" title="IP address.">host</a> == INADDR_NONE){
<a name="l00519"></a>00519                         <span class="keyword">struct </span>hostent *hp;
<a name="l00520"></a>00520                         hp = gethostbyname(hostName);
<a name="l00521"></a>00521                         <span class="keywordflow">if</span>(hp){
<a name="l00522"></a>00522                                 memcpy(&amp;(addr.<a class="code" href="classting_1_1IPAddress.htm#a225234d3a20b4c63868267193e331213" title="IP address.">host</a>), hp-&gt;h_addr, <span class="keyword">sizeof</span>(addr.<a class="code" href="classting_1_1IPAddress.htm#a225234d3a20b4c63868267193e331213" title="IP address.">host</a>)<span class="comment">/* hp-&gt;h_length */</span>);
<a name="l00523"></a>00523                         }<span class="keywordflow">else</span>{
<a name="l00524"></a>00524                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;SocketLib::GetHostByName(): gethostbyname() failed&quot;</span>);
<a name="l00525"></a>00525                         }
<a name="l00526"></a>00526                 }
<a name="l00527"></a>00527                 addr.<a class="code" href="classting_1_1IPAddress.htm#a3b3f0ca7cc644be6be3b89b88359372e" title="IP port number.">port</a> = port;
<a name="l00528"></a>00528                 <span class="keywordflow">return</span> addr;
<a name="l00529"></a>00529         }
<a name="l00530"></a>00530 };<span class="comment">//~class SocketLib</span>
<a name="l00531"></a>00531 
<a name="l00532"></a>00532 
<a name="l00533"></a>00533 
<a name="l00537"></a><a class="code" href="classting_1_1TCPSocket.htm">00537</a> <span class="keyword">class </span><a class="code" href="classting_1_1TCPSocket.htm" title="a class which represents a TCP socket.">TCPSocket</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a>{
<a name="l00538"></a><a class="code" href="classting_1_1TCPSocket.htm#ae8bcdc0d25881a17b23e557296236fa9">00538</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1TCPServerSocket.htm" title="a class which represents a TCP server socket.">TCPServerSocket</a>;
<a name="l00539"></a>00539 <span class="keyword">public</span>:
<a name="l00543"></a><a class="code" href="classting_1_1TCPSocket.htm#ae9e2247bfceb9cc7a30a141870e97d3f">00543</a>         <a class="code" href="classting_1_1TCPSocket.htm#ae9e2247bfceb9cc7a30a141870e97d3f" title="Constructs an invalid TCP socket object.">TCPSocket</a>(){
<a name="l00544"></a>00544 <span class="comment">//              TRACE(&lt;&lt; &quot;TCPSocket::TCPSocket(): invoked &quot; &lt;&lt; this &lt;&lt; std::endl)</span>
<a name="l00545"></a>00545         };
<a name="l00546"></a>00546 
<a name="l00554"></a>00554         <span class="comment">//copy constructor</span>
<a name="l00555"></a><a class="code" href="classting_1_1TCPSocket.htm#a914098ee4716d04a84876b9ba4e43f33">00555</a>         <a class="code" href="classting_1_1TCPSocket.htm" title="a class which represents a TCP socket.">TCPSocket</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1TCPSocket.htm" title="a class which represents a TCP socket.">TCPSocket</a>&amp; s) :
<a name="l00556"></a>00556                         <a class="code" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a>(s)
<a name="l00557"></a>00557         {
<a name="l00558"></a>00558 <span class="comment">//              TRACE(&lt;&lt; &quot;TCPSocket::TCPSocket(copy): invoked &quot; &lt;&lt; this &lt;&lt; std::endl)</span>
<a name="l00559"></a>00559         }
<a name="l00560"></a>00560 
<a name="l00568"></a><a class="code" href="classting_1_1TCPSocket.htm#a871346e7548cbe063d4780cbdf048aa5">00568</a>         <a class="code" href="classting_1_1TCPSocket.htm#a871346e7548cbe063d4780cbdf048aa5" title="A constructor which automatically calls TCPSocket::Open() method.">TCPSocket</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>&amp; ip, <span class="keywordtype">bool</span> disableNaggle = <span class="keyword">false</span>){
<a name="l00569"></a>00569                 this-&gt;Open(ip, disableNaggle);
<a name="l00570"></a>00570         }
<a name="l00571"></a>00571 
<a name="l00578"></a><a class="code" href="classting_1_1TCPSocket.htm#a2ced4bafbd69a9e57bfb90890ca1c2a7">00578</a>         <a class="code" href="classting_1_1TCPSocket.htm" title="a class which represents a TCP socket.">TCPSocket</a>&amp; <a class="code" href="classting_1_1TCPSocket.htm#a2ced4bafbd69a9e57bfb90890ca1c2a7" title="Assignment operator, works similar to std::auto_ptr::operator=().">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1TCPSocket.htm" title="a class which represents a TCP socket.">TCPSocket</a>&amp; s){
<a name="l00579"></a>00579                 this-&gt;<a class="code" href="classting_1_1Socket.htm#adf9973457979069b4996b3faab1f4e24">Socket::operator=</a>(s);
<a name="l00580"></a>00580                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00581"></a>00581         }
<a name="l00582"></a>00582 
<a name="l00589"></a><a class="code" href="classting_1_1TCPSocket.htm#a89da0727ecfe9ece94a397e896be2525">00589</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1TCPSocket.htm#a89da0727ecfe9ece94a397e896be2525" title="Connects the socket.">Open</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>&amp; ip, <span class="keywordtype">bool</span> disableNaggle = <span class="keyword">false</span>){
<a name="l00590"></a>00590                 <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l00591"></a>00591                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPSocket::Open(): socket already opened&quot;</span>);
<a name="l00592"></a>00592 
<a name="l00593"></a>00593                 <span class="comment">//create event for implementing Waitable</span>
<a name="l00594"></a>00594 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00595"></a>00595 <span class="preprocessor"></span>                this-&gt;CreateEventForWaitable();
<a name="l00596"></a>00596 <span class="preprocessor">#endif</span>
<a name="l00597"></a>00597 <span class="preprocessor"></span>
<a name="l00598"></a>00598                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a> =<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436"> ::socket</a>(AF_INET, SOCK_STREAM, 0);
<a name="l00599"></a>00599                 <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a> == <a class="code" href="classting_1_1Socket.htm#a0c8de9408709f196ad46e080e36950f7">DInvalidSocket</a>()){
<a name="l00600"></a>00600 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00601"></a>00601 <span class="preprocessor"></span>                        this-&gt;CloseEventForWaitable();
<a name="l00602"></a>00602 <span class="preprocessor">#endif</span>
<a name="l00603"></a>00603 <span class="preprocessor"></span>                        <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPSocket::Open(): Couldn&apos;t create socket&quot;</span>);
<a name="l00604"></a>00604                 }
<a name="l00605"></a>00605 
<a name="l00606"></a>00606                 <span class="comment">//Connecting to remote host</span>
<a name="l00607"></a>00607                 sockaddr_in sockAddr;
<a name="l00608"></a>00608                 memset(&amp;sockAddr, 0, <span class="keyword">sizeof</span>(sockAddr));
<a name="l00609"></a>00609                 sockAddr.sin_family = AF_INET;
<a name="l00610"></a>00610                 sockAddr.sin_addr.s_addr = ip.<a class="code" href="classting_1_1IPAddress.htm#a225234d3a20b4c63868267193e331213" title="IP address.">host</a>;
<a name="l00611"></a>00611                 sockAddr.sin_port = htons(ip.<a class="code" href="classting_1_1IPAddress.htm#a3b3f0ca7cc644be6be3b89b88359372e" title="IP port number.">port</a>);
<a name="l00612"></a>00612 
<a name="l00613"></a>00613                 <span class="comment">// Connect to the remote host</span>
<a name="l00614"></a>00614                 <span class="keywordflow">if</span>(connect(
<a name="l00615"></a>00615                                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>,
<a name="l00616"></a>00616                                 reinterpret_cast&lt;sockaddr *&gt;(&amp;sockAddr),
<a name="l00617"></a>00617                                 <span class="keyword">sizeof</span>(sockAddr)
<a name="l00618"></a>00618                         ) == <a class="code" href="classting_1_1Socket.htm#ac27aa7477d728fd5fc852ecfb798025f">DSocketError</a>())
<a name="l00619"></a>00619                 {
<a name="l00620"></a>00620                         this-&gt;<a class="code" href="classting_1_1Socket.htm#adf9b6fde0aa78fb1706200807bd5221e" title="Closes the socket disconnecting it if necessary.">Close</a>();
<a name="l00621"></a>00621                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPSocket::Open(): Couldn&apos;t connect to remote host&quot;</span>);
<a name="l00622"></a>00622                 }
<a name="l00623"></a>00623 
<a name="l00624"></a>00624                 <span class="comment">//Disable Naggle algorithm if required</span>
<a name="l00625"></a>00625                 <span class="keywordflow">if</span>(disableNaggle)
<a name="l00626"></a>00626                         this-&gt;DisableNaggle();
<a name="l00627"></a>00627 
<a name="l00628"></a>00628                 <span class="comment">//Set the socket to non-blocking mode</span>
<a name="l00629"></a>00629 <span class="preprocessor">#if defined(O_NONBLOCK)</span>
<a name="l00630"></a>00630 <span class="preprocessor"></span>                {
<a name="l00631"></a>00631                         fcntl(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, F_SETFL, O_NONBLOCK);
<a name="l00632"></a>00632                 }
<a name="l00633"></a>00633 <span class="preprocessor">#elif defined(__WIN32__)</span>
<a name="l00634"></a>00634 <span class="preprocessor"></span>                {
<a name="l00635"></a>00635                         u_long mode = 1;
<a name="l00636"></a>00636                         ioctlsocket(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, FIONBIO, &amp;mode);
<a name="l00637"></a>00637                 }
<a name="l00638"></a>00638 <span class="preprocessor">#else</span>
<a name="l00639"></a>00639 <span class="preprocessor"></span><span class="preprocessor">#error &quot;How do we set non-blocking mode on other operating systems?&quot;</span>
<a name="l00640"></a>00640 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00641"></a>00641 <span class="preprocessor"></span>
<a name="l00642"></a>00642                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">ClearAllReadinessFlags</a>();
<a name="l00643"></a>00643         }
<a name="l00644"></a>00644 
<a name="l00653"></a>00653         <span class="comment">//TODO:remove this deprecated function</span>
<a name="l00654"></a><a class="code" href="classting_1_1TCPSocket.htm#a0779da2c776c3e59a0189386c1c512fa">00654</a>         <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1TCPSocket.htm#a0779da2c776c3e59a0189386c1c512fa" title="Send data to connected socket.">Send</a>(<span class="keyword">const</span> <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* data, <span class="keywordtype">unsigned</span> size){
<a name="l00655"></a>00655                 <a class="code" href="debug_8hpp.htm#a5c90b51dab9663ac5f3b7876d7d1965f">TRACE_ALWAYS</a>(&lt;&lt; <span class="stringliteral">&quot;TCPSocket::Send(const u8* data, unsigned size) is DEPRECATED, use Send(ting::Buffer&lt;u8&gt;&amp; buf) instead&quot;</span> &lt;&lt; std::endl)
<a name="l00656"></a>00656                 <a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">ting::Buffer&lt;u8&gt;</a> wrap(const_cast&lt;u8*&gt;(data), size);
<a name="l00657"></a>00657                 <span class="keywordflow">return</span> this-&gt;Send(wrap);
<a name="l00658"></a>00658         }
<a name="l00659"></a>00659 
<a name="l00660"></a>00660 
<a name="l00661"></a>00661 
<a name="l00670"></a><a class="code" href="classting_1_1TCPSocket.htm#a7e025a750453c96484fb49cccde77518">00670</a>         <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1TCPSocket.htm#a7e025a750453c96484fb49cccde77518" title="Send data to connected socket.">Send</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">ting::Buffer&lt;u8&gt;</a>&amp; buf, <span class="keywordtype">unsigned</span> offset = 0){
<a name="l00671"></a>00671                 <span class="keywordflow">if</span>(!this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l00672"></a>00672                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPSocket::Send(): socket is not opened&quot;</span>);
<a name="l00673"></a>00673 
<a name="l00674"></a>00674                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#af593425a807d59fbef4c0206dcd91935">ClearCanWriteFlag</a>();
<a name="l00675"></a>00675 
<a name="l00676"></a>00676                 <span class="comment">//Keep sending data until it is sent or an error occurs</span>
<a name="l00677"></a>00677                 <span class="keywordtype">int</span> res;
<a name="l00678"></a>00678                 <span class="keywordflow">while</span>(<span class="keyword">true</span>){
<a name="l00679"></a>00679                         res = send(
<a name="l00680"></a>00680                                         this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>,
<a name="l00681"></a>00681                                         reinterpret_cast&lt;const char*&gt;(&amp;buf[offset]),
<a name="l00682"></a>00682                                         buf.<a class="code" href="classting_1_1Buffer.htm#a72614973b8c68b8f4f261ffb21aedf29" title="get buffer size.">Size</a>() - offset,
<a name="l00683"></a>00683                                         0
<a name="l00684"></a>00684                                 );
<a name="l00685"></a>00685                         <span class="keywordflow">if</span>(res == <a class="code" href="classting_1_1Socket.htm#ac27aa7477d728fd5fc852ecfb798025f">DSocketError</a>()){
<a name="l00686"></a>00686 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00687"></a>00687 <span class="preprocessor"></span>                                <span class="keywordtype">int</span> errorCode = WSAGetLastError();
<a name="l00688"></a>00688 <span class="preprocessor">#else //linux/unix</span>
<a name="l00689"></a>00689 <span class="preprocessor"></span>                                <span class="keywordtype">int</span> errorCode = errno;
<a name="l00690"></a>00690 <span class="preprocessor">#endif</span>
<a name="l00691"></a>00691 <span class="preprocessor"></span>                                <span class="keywordflow">if</span>(errorCode == <a class="code" href="classting_1_1Socket.htm#addbe8e53443c8fb4d72ba28107497c83">DEIntr</a>()){
<a name="l00692"></a>00692                                         <span class="keywordflow">continue</span>;
<a name="l00693"></a>00693                                 }<span class="keywordflow">else</span>{
<a name="l00694"></a>00694                                         std::stringstream ss;
<a name="l00695"></a>00695                                         ss &lt;&lt; <span class="stringliteral">&quot;TCPSocket::Send(): send() failed, error code = &quot;</span> &lt;&lt; errorCode &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; strerror(errorCode);
<a name="l00696"></a>00696                                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(ss.str());
<a name="l00697"></a>00697                                 }
<a name="l00698"></a>00698                         }
<a name="l00699"></a>00699                         <span class="keywordflow">break</span>;
<a name="l00700"></a>00700                 }<span class="comment">//~while</span>
<a name="l00701"></a>00701 
<a name="l00702"></a>00702                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(res &gt;= 0)
<a name="l00703"></a>00703                 <span class="keywordflow">return</span> unsigned(res);
<a name="l00704"></a>00704         }
<a name="l00705"></a>00705 
<a name="l00706"></a>00706 
<a name="l00707"></a>00707 
<a name="l00714"></a>00714         <span class="comment">//TODO:remove this deprecated function</span>
<a name="l00715"></a><a class="code" href="classting_1_1TCPSocket.htm#a25f6a383eb9bcce83f5148e19de5b7f6">00715</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1TCPSocket.htm#a25f6a383eb9bcce83f5148e19de5b7f6" title="Send data to connected socket.">SendAll</a>(<span class="keyword">const</span> <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* data, <span class="keywordtype">unsigned</span> size){
<a name="l00716"></a>00716                 <a class="code" href="debug_8hpp.htm#a5c90b51dab9663ac5f3b7876d7d1965f">TRACE_ALWAYS</a>(&lt;&lt; <span class="stringliteral">&quot;TCPSocket::SendAll(const u8* data, unsigned size) is DEPRECATED, use SendAll(const ting::Buffer&lt;u8&gt;&amp; buf) instead&quot;</span> &lt;&lt; std::endl)
<a name="l00717"></a>00717                 <a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">ting::Buffer&lt;u8&gt;</a> wrap(const_cast&lt;u8*&gt;(data), size);
<a name="l00718"></a>00718                 this-&gt;SendAll(wrap);
<a name="l00719"></a>00719         }
<a name="l00720"></a>00720 
<a name="l00721"></a>00721 
<a name="l00722"></a>00722 
<a name="l00728"></a><a class="code" href="classting_1_1TCPSocket.htm#a09597b2c73be99246c330bbf8adda69b">00728</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1TCPSocket.htm#a09597b2c73be99246c330bbf8adda69b" title="Send data to connected socket.">SendAll</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">ting::Buffer&lt;u8&gt;</a>&amp; buf){
<a name="l00729"></a>00729                 <span class="keywordflow">if</span>(!this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l00730"></a>00730                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPSocket::Send(): socket is not opened&quot;</span>);
<a name="l00731"></a>00731 
<a name="l00732"></a>00732                 <a class="code" href="debug_8hpp.htm#a21a773603fea5f18c619371655eaf9fb">DEBUG_CODE</a>(<span class="keywordtype">int</span> left = <span class="keywordtype">int</span>(buf.<a class="code" href="classting_1_1Buffer.htm#a72614973b8c68b8f4f261ffb21aedf29" title="get buffer size.">Size</a>());)
<a name="l00733"></a>00733                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(left &gt;= 0)
<a name="l00734"></a>00734 
<a name="l00735"></a>00735                 <span class="keywordtype">unsigned</span> offset = 0;
<a name="l00736"></a>00736 
<a name="l00737"></a>00737                 <span class="keywordflow">while</span>(<span class="keyword">true</span>){
<a name="l00738"></a>00738                         <span class="keywordtype">int</span> res = this-&gt;Send(buf, offset);
<a name="l00739"></a>00739                         <a class="code" href="debug_8hpp.htm#a21a773603fea5f18c619371655eaf9fb">DEBUG_CODE</a>(left -= res;)
<a name="l00740"></a>00740                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(left &gt;= 0)
<a name="l00741"></a>00741                         offset += res;
<a name="l00742"></a>00742                         <span class="keywordflow">if</span>(offset == buf.<a class="code" href="classting_1_1Buffer.htm#a72614973b8c68b8f4f261ffb21aedf29" title="get buffer size.">Size</a>()){
<a name="l00743"></a>00743                                 <span class="keywordflow">break</span>;
<a name="l00744"></a>00744                         }
<a name="l00745"></a>00745                         <span class="comment">//give 30ms to allow data from send buffer to be sent</span>
<a name="l00746"></a>00746                         <a class="code" href="classting_1_1Thread.htm#a0dd3df130ca9de000129a552bf2dee46" title="Suspend the thread for a given number of milliseconds.">Thread::Sleep</a>(30);
<a name="l00747"></a>00747                 }
<a name="l00748"></a>00748 
<a name="l00749"></a>00749                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(left == 0)
<a name="l00750"></a>00750         }
<a name="l00751"></a>00751 
<a name="l00752"></a>00752 
<a name="l00753"></a>00753 
<a name="l00765"></a>00765         <span class="comment">//returns 0 if connection was closed by peer</span>
<a name="l00766"></a>00766         <span class="comment">//TODO:remove this deprecated function</span>
<a name="l00767"></a><a class="code" href="classting_1_1TCPSocket.htm#acf3ac7f3f1dbbc2d2017f99a25ef7120">00767</a>         <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1TCPSocket.htm#acf3ac7f3f1dbbc2d2017f99a25ef7120" title="Receive data from connected socket.">Recv</a>(<a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* buf, <span class="keywordtype">unsigned</span> maxSize){
<a name="l00768"></a>00768                 <a class="code" href="debug_8hpp.htm#a5c90b51dab9663ac5f3b7876d7d1965f">TRACE_ALWAYS</a>(&lt;&lt; <span class="stringliteral">&quot;TCPSocket::Recv(u8* buf, unsigned maxSize) is DEPRECATED, use Recv(ting::Buffer&lt;u8&gt;&amp; buf) instead&quot;</span> &lt;&lt; std::endl)
<a name="l00769"></a>00769                 <a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">ting::Buffer&lt;u8&gt;</a> wrap(buf, maxSize);
<a name="l00770"></a>00770                 <span class="keywordflow">return</span> this-&gt;Recv(wrap);
<a name="l00771"></a>00771         }
<a name="l00772"></a>00772 
<a name="l00784"></a><a class="code" href="classting_1_1TCPSocket.htm#ad588f325764009beb671f905c20e5889">00784</a>         <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1TCPSocket.htm#ad588f325764009beb671f905c20e5889" title="Receive data from connected socket.">Recv</a>(<a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">ting::Buffer&lt;u8&gt;</a>&amp; buf, <span class="keywordtype">unsigned</span> offset = 0){
<a name="l00785"></a>00785                 <span class="comment">//the &apos;can read&apos; flag shall be cleared even if this function fails to avoid subsequent</span>
<a name="l00786"></a>00786                 <span class="comment">//calls to Recv() because it indicates that there&apos;s activity.</span>
<a name="l00787"></a>00787                 <span class="comment">//So, do it at the beginning of the function.</span>
<a name="l00788"></a>00788                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#ae7a518cea602c4d2c050d0f0faa4902d">ClearCanReadFlag</a>();
<a name="l00789"></a>00789 
<a name="l00790"></a>00790                 <span class="keywordflow">if</span>(!this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l00791"></a>00791                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPSocket::Send(): socket is not opened&quot;</span>);
<a name="l00792"></a>00792 
<a name="l00793"></a>00793                 <span class="keywordtype">int</span> len;
<a name="l00794"></a>00794 
<a name="l00795"></a>00795                 <span class="keywordflow">while</span>(<span class="keyword">true</span>){
<a name="l00796"></a>00796                         len = recv(
<a name="l00797"></a>00797                                         this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>,
<a name="l00798"></a>00798                                         reinterpret_cast&lt;char*&gt;(&amp;buf[offset]),
<a name="l00799"></a>00799                                         buf.<a class="code" href="classting_1_1Buffer.htm#a72614973b8c68b8f4f261ffb21aedf29" title="get buffer size.">Size</a>() - offset,
<a name="l00800"></a>00800                                         0
<a name="l00801"></a>00801                                 );
<a name="l00802"></a>00802                         <span class="keywordflow">if</span>(len == <a class="code" href="classting_1_1Socket.htm#ac27aa7477d728fd5fc852ecfb798025f">DSocketError</a>()){
<a name="l00803"></a>00803 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00804"></a>00804 <span class="preprocessor"></span>                                <span class="keywordtype">int</span> errorCode = WSAGetLastError();
<a name="l00805"></a>00805 <span class="preprocessor">#else //linux/unix</span>
<a name="l00806"></a>00806 <span class="preprocessor"></span>                                <span class="keywordtype">int</span> errorCode = errno;
<a name="l00807"></a>00807 <span class="preprocessor">#endif</span>
<a name="l00808"></a>00808 <span class="preprocessor"></span>                                <span class="keywordflow">if</span>(errorCode == <a class="code" href="classting_1_1Socket.htm#addbe8e53443c8fb4d72ba28107497c83">DEIntr</a>()){
<a name="l00809"></a>00809                                         <span class="keywordflow">continue</span>;
<a name="l00810"></a>00810                                 }<span class="keywordflow">else</span>{
<a name="l00811"></a>00811                                         std::stringstream ss;
<a name="l00812"></a>00812                                         ss &lt;&lt; <span class="stringliteral">&quot;TCPSocket::Recv(): recv() failed, error code = &quot;</span> &lt;&lt; errorCode &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; strerror(errorCode);
<a name="l00813"></a>00813                                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(ss.str());
<a name="l00814"></a>00814                                 }
<a name="l00815"></a>00815                         }
<a name="l00816"></a>00816                         <span class="keywordflow">break</span>;
<a name="l00817"></a>00817                 }<span class="comment">//~while</span>
<a name="l00818"></a>00818 
<a name="l00819"></a>00819                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(len &gt;= 0)
<a name="l00820"></a>00820                 <span class="keywordflow">return</span> unsigned(len);
<a name="l00821"></a>00821         }
<a name="l00822"></a>00822 
<a name="l00827"></a><a class="code" href="classting_1_1TCPSocket.htm#aa938bd439530cfe3a720a772f344fa60">00827</a>         <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a> <a class="code" href="classting_1_1TCPSocket.htm#aa938bd439530cfe3a720a772f344fa60" title="Get local IP address and port.">GetLocalAddress</a>(){
<a name="l00828"></a>00828                 <span class="keywordflow">if</span>(!this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l00829"></a>00829                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;Socket::GetLocalPort(): socket is not valid&quot;</span>);
<a name="l00830"></a>00830 
<a name="l00831"></a>00831                 sockaddr_in addr;
<a name="l00832"></a>00832 
<a name="l00833"></a>00833 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00834"></a>00834 <span class="preprocessor"></span>                <span class="keywordtype">int</span> len = <span class="keyword">sizeof</span>(addr);
<a name="l00835"></a>00835 <span class="preprocessor">#else//assume linux/unix</span>
<a name="l00836"></a>00836 <span class="preprocessor"></span>                socklen_t len = <span class="keyword">sizeof</span>(addr);
<a name="l00837"></a>00837 <span class="preprocessor">#endif</span>
<a name="l00838"></a>00838 <span class="preprocessor"></span>
<a name="l00839"></a>00839                 <span class="keywordflow">if</span>(getsockname(
<a name="l00840"></a>00840                                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>,
<a name="l00841"></a>00841                                 reinterpret_cast&lt;sockaddr*&gt;(&amp;addr),
<a name="l00842"></a>00842                                 &amp;len
<a name="l00843"></a>00843                         ) &lt; 0)
<a name="l00844"></a>00844                 {
<a name="l00845"></a>00845                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;Socket::GetLocalPort(): getsockname() failed&quot;</span>);
<a name="l00846"></a>00846                 }
<a name="l00847"></a>00847 
<a name="l00848"></a>00848                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>(
<a name="l00849"></a>00849                                 <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(ntohl(addr.sin_addr.s_addr)),
<a name="l00850"></a>00850                                 <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a>(ntohs(addr.sin_port))
<a name="l00851"></a>00851                         );
<a name="l00852"></a>00852         }
<a name="l00853"></a>00853 
<a name="l00858"></a><a class="code" href="classting_1_1TCPSocket.htm#a913c3b41d53a219d7a59e1033b8ef7a8">00858</a>         <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a> <a class="code" href="classting_1_1TCPSocket.htm#a913c3b41d53a219d7a59e1033b8ef7a8" title="Get remote IP address and port.">GetRemoteAddress</a>(){
<a name="l00859"></a>00859                 <span class="keywordflow">if</span>(!this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l00860"></a>00860                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPSocket::GetRemoteAddress(): socket is not valid&quot;</span>);
<a name="l00861"></a>00861 
<a name="l00862"></a>00862                 sockaddr_in addr;
<a name="l00863"></a>00863 
<a name="l00864"></a>00864 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00865"></a>00865 <span class="preprocessor"></span>                <span class="keywordtype">int</span> len = <span class="keyword">sizeof</span>(addr);
<a name="l00866"></a>00866 <span class="preprocessor">#else//assume linux/unix</span>
<a name="l00867"></a>00867 <span class="preprocessor"></span>                socklen_t len = <span class="keyword">sizeof</span>(addr);
<a name="l00868"></a>00868 <span class="preprocessor">#endif</span>
<a name="l00869"></a>00869 <span class="preprocessor"></span>
<a name="l00870"></a>00870                 <span class="keywordflow">if</span>(getpeername(
<a name="l00871"></a>00871                                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>,
<a name="l00872"></a>00872                                 reinterpret_cast&lt;sockaddr*&gt;(&amp;addr),
<a name="l00873"></a>00873                                 &amp;len
<a name="l00874"></a>00874                         ) &lt; 0)
<a name="l00875"></a>00875                 {
<a name="l00876"></a>00876                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPSocket::GetRemoteAddress(): getpeername() failed&quot;</span>);
<a name="l00877"></a>00877                 }
<a name="l00878"></a>00878 
<a name="l00879"></a>00879                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>(
<a name="l00880"></a>00880                                 <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(ntohl(addr.sin_addr.s_addr)),
<a name="l00881"></a>00881                                 <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a>(ntohs(addr.sin_port))
<a name="l00882"></a>00882                         );
<a name="l00883"></a>00883         }
<a name="l00884"></a>00884 
<a name="l00885"></a>00885 <span class="keyword">private</span>:
<a name="l00886"></a>00886         <span class="keywordtype">void</span> DisableNaggle(){
<a name="l00887"></a>00887                 <span class="keywordflow">if</span>(!this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l00888"></a>00888                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPSocket::DisableNaggle(): socket is not opened&quot;</span>);
<a name="l00889"></a>00889 
<a name="l00890"></a>00890                 <span class="keywordtype">int</span> yes = 1;
<a name="l00891"></a>00891                 setsockopt(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, IPPROTO_TCP, TCP_NODELAY, (<span class="keywordtype">char</span>*)&amp;yes, <span class="keyword">sizeof</span>(yes));
<a name="l00892"></a>00892         }
<a name="l00893"></a>00893 
<a name="l00894"></a>00894 
<a name="l00895"></a>00895 
<a name="l00896"></a>00896 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00897"></a>00897 <span class="preprocessor"></span><span class="keyword">private</span>:
<a name="l00898"></a>00898         <span class="comment">//override</span>
<a name="l00899"></a>00899         <span class="keywordtype">void</span> SetWaitingEvents(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> flagsToWaitFor){
<a name="l00900"></a>00900                 <span class="keywordtype">long</span> flags = FD_CLOSE;
<a name="l00901"></a>00901                 <span class="keywordflow">if</span>((flagsToWaitFor &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">Waitable::READ</a>) != 0){
<a name="l00902"></a>00902                         flags |= FD_READ;
<a name="l00903"></a>00903                 }
<a name="l00904"></a>00904                 <span class="keywordflow">if</span>((flagsToWaitFor &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">Waitable::WRITE</a>) != 0){
<a name="l00905"></a>00905                         flags |= FD_WRITE;
<a name="l00906"></a>00906                 }
<a name="l00907"></a>00907                 this-&gt;SetWaitingEventsForWindows(flags);
<a name="l00908"></a>00908         }
<a name="l00909"></a>00909 <span class="preprocessor">#endif</span>
<a name="l00910"></a>00910 <span class="preprocessor"></span>
<a name="l00911"></a>00911 };<span class="comment">//~class TCPSocket</span>
<a name="l00912"></a>00912 
<a name="l00913"></a>00913 
<a name="l00914"></a>00914 
<a name="l00920"></a><a class="code" href="classting_1_1TCPServerSocket.htm">00920</a> <span class="keyword">class </span><a class="code" href="classting_1_1TCPServerSocket.htm" title="a class which represents a TCP server socket.">TCPServerSocket</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a>{
<a name="l00921"></a>00921         <span class="keywordtype">bool</span> disableNaggle;<span class="comment">//this flag indicates if accepted sockets should be created with disabled Naggle</span>
<a name="l00922"></a>00922 <span class="keyword">public</span>:
<a name="l00926"></a><a class="code" href="classting_1_1TCPServerSocket.htm#a8b74952db9a2268ddb2e6a2be53af8b8">00926</a>         <a class="code" href="classting_1_1TCPServerSocket.htm" title="a class which represents a TCP server socket.">TCPServerSocket</a>() :
<a name="l00927"></a>00927                         disableNaggle(false)
<a name="l00928"></a>00928         {}
<a name="l00929"></a>00929 
<a name="l00937"></a>00937         <span class="comment">//copy constructor</span>
<a name="l00938"></a><a class="code" href="classting_1_1TCPServerSocket.htm#a162511ee700e167fa9d0fb73142cf49e">00938</a>         <a class="code" href="classting_1_1TCPServerSocket.htm" title="a class which represents a TCP server socket.">TCPServerSocket</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1TCPServerSocket.htm" title="a class which represents a TCP server socket.">TCPServerSocket</a>&amp; s) :
<a name="l00939"></a>00939                         <a class="code" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a>(s),
<a name="l00940"></a>00940                         disableNaggle(s.disableNaggle)
<a name="l00941"></a>00941         {}
<a name="l00942"></a>00942 
<a name="l00949"></a><a class="code" href="classting_1_1TCPServerSocket.htm#a2f4591ac79c9a3a19ca4c771698fc2fd">00949</a>         <a class="code" href="classting_1_1TCPServerSocket.htm" title="a class which represents a TCP server socket.">TCPServerSocket</a>&amp; <a class="code" href="classting_1_1TCPServerSocket.htm#a2f4591ac79c9a3a19ca4c771698fc2fd" title="Assignment operator, works similar to std::auto_ptr::operator=().">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1TCPServerSocket.htm" title="a class which represents a TCP server socket.">TCPServerSocket</a>&amp; s){
<a name="l00950"></a>00950                 this-&gt;disableNaggle = s.disableNaggle;
<a name="l00951"></a>00951                 this-&gt;<a class="code" href="classting_1_1Socket.htm#adf9973457979069b4996b3faab1f4e24">Socket::operator=</a>(s);
<a name="l00952"></a>00952                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00953"></a>00953         }
<a name="l00954"></a>00954 
<a name="l00962"></a><a class="code" href="classting_1_1TCPServerSocket.htm#a8551ebbc477278b16e72854fc2c91758">00962</a>         <a class="code" href="classting_1_1TCPServerSocket.htm#a8551ebbc477278b16e72854fc2c91758" title="A constructor which automatically calls TCPServerSocket::Open() method.">TCPServerSocket</a>(<a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> port, <span class="keywordtype">bool</span> disableNaggle = <span class="keyword">false</span>){
<a name="l00963"></a>00963                 this-&gt;Open(port, disableNaggle);
<a name="l00964"></a>00964         }
<a name="l00965"></a>00965 
<a name="l00973"></a><a class="code" href="classting_1_1TCPServerSocket.htm#a37517ec33cee52bba2d94a636eb9813f">00973</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1TCPServerSocket.htm#a37517ec33cee52bba2d94a636eb9813f" title="Connects the socket or starts listening on it.">Open</a>(<a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> port, <span class="keywordtype">bool</span> disableNaggle = <span class="keyword">false</span>, <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> queueLength = 50){
<a name="l00974"></a>00974                 <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l00975"></a>00975                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPServerSocket::Open(): socket already opened&quot;</span>);
<a name="l00976"></a>00976 
<a name="l00977"></a>00977                 this-&gt;disableNaggle = disableNaggle;
<a name="l00978"></a>00978 
<a name="l00979"></a>00979 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00980"></a>00980 <span class="preprocessor"></span>                this-&gt;CreateEventForWaitable();
<a name="l00981"></a>00981 <span class="preprocessor">#endif</span>
<a name="l00982"></a>00982 <span class="preprocessor"></span>
<a name="l00983"></a>00983                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a> =<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436"> ::socket</a>(AF_INET, SOCK_STREAM, 0);
<a name="l00984"></a>00984                 <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a> == <a class="code" href="classting_1_1Socket.htm#a0c8de9408709f196ad46e080e36950f7">DInvalidSocket</a>()){
<a name="l00985"></a>00985 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00986"></a>00986 <span class="preprocessor"></span>                        this-&gt;CloseEventForWaitable();
<a name="l00987"></a>00987 <span class="preprocessor">#endif</span>
<a name="l00988"></a>00988 <span class="preprocessor"></span>                        <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPServerSocket::Open(): Couldn&apos;t create socket&quot;</span>);
<a name="l00989"></a>00989                 }
<a name="l00990"></a>00990 
<a name="l00991"></a>00991                 sockaddr_in sockAddr;
<a name="l00992"></a>00992                 memset(&amp;sockAddr, 0, <span class="keyword">sizeof</span>(sockAddr));
<a name="l00993"></a>00993                 sockAddr.sin_family = AF_INET;
<a name="l00994"></a>00994                 sockAddr.sin_addr.s_addr = INADDR_ANY;
<a name="l00995"></a>00995                 sockAddr.sin_port = htons(port);
<a name="l00996"></a>00996 
<a name="l00997"></a>00997                 <span class="comment">// allow local address reuse</span>
<a name="l00998"></a>00998                 {
<a name="l00999"></a>00999                         <span class="keywordtype">int</span> yes = 1;
<a name="l01000"></a>01000                         setsockopt(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, SOL_SOCKET, SO_REUSEADDR, (<span class="keywordtype">char</span>*)&amp;yes, <span class="keyword">sizeof</span>(yes));
<a name="l01001"></a>01001                 }
<a name="l01002"></a>01002 
<a name="l01003"></a>01003                 <span class="comment">// Bind the socket for listening</span>
<a name="l01004"></a>01004                 <span class="keywordflow">if</span>(bind(
<a name="l01005"></a>01005                                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>,
<a name="l01006"></a>01006                                 reinterpret_cast&lt;sockaddr*&gt;(&amp;sockAddr),
<a name="l01007"></a>01007                                 <span class="keyword">sizeof</span>(sockAddr)
<a name="l01008"></a>01008                         ) == <a class="code" href="classting_1_1Socket.htm#ac27aa7477d728fd5fc852ecfb798025f">DSocketError</a>())
<a name="l01009"></a>01009                 {
<a name="l01010"></a>01010                         this-&gt;<a class="code" href="classting_1_1Socket.htm#adf9b6fde0aa78fb1706200807bd5221e" title="Closes the socket disconnecting it if necessary.">Close</a>();
<a name="l01011"></a>01011                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPServerSocket::Open(): Couldn&apos;t bind to local port&quot;</span>);
<a name="l01012"></a>01012                 }
<a name="l01013"></a>01013 
<a name="l01014"></a>01014                 <span class="keywordflow">if</span>(listen(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, <span class="keywordtype">int</span>(queueLength)) == <a class="code" href="classting_1_1Socket.htm#ac27aa7477d728fd5fc852ecfb798025f">DSocketError</a>()){
<a name="l01015"></a>01015                         this-&gt;<a class="code" href="classting_1_1Socket.htm#adf9b6fde0aa78fb1706200807bd5221e" title="Closes the socket disconnecting it if necessary.">Close</a>();
<a name="l01016"></a>01016                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPServerSocket::Open(): Couldn&apos;t listen to local port&quot;</span>);
<a name="l01017"></a>01017                 }
<a name="l01018"></a>01018 
<a name="l01019"></a>01019                 <span class="comment">//Set the socket to non-blocking mode for accept()</span>
<a name="l01020"></a>01020 <span class="preprocessor">#if defined(O_NONBLOCK)</span>
<a name="l01021"></a>01021 <span class="preprocessor"></span>                {
<a name="l01022"></a>01022                         fcntl(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, F_SETFL, O_NONBLOCK);
<a name="l01023"></a>01023                 }
<a name="l01024"></a>01024 <span class="preprocessor">#elif defined(__WIN32__)</span>
<a name="l01025"></a>01025 <span class="preprocessor"></span>                {
<a name="l01026"></a>01026                         u_long mode = 1;
<a name="l01027"></a>01027                         ioctlsocket(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, FIONBIO, &amp;mode);
<a name="l01028"></a>01028                 }
<a name="l01029"></a>01029 <span class="preprocessor">#else</span>
<a name="l01030"></a>01030 <span class="preprocessor"></span><span class="preprocessor">#error &quot;How do we set non-blocking mode on other operating systems?&quot;</span>
<a name="l01031"></a>01031 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01032"></a>01032 <span class="preprocessor"></span>        }
<a name="l01033"></a>01033 
<a name="l01045"></a><a class="code" href="classting_1_1TCPServerSocket.htm#ab00890b689d13c8853677091740c4d7c">01045</a>         <a class="code" href="classting_1_1TCPSocket.htm" title="a class which represents a TCP socket.">TCPSocket</a> <a class="code" href="classting_1_1TCPServerSocket.htm#ab00890b689d13c8853677091740c4d7c" title="Accepts one of the pending connections, non-blocking.">Accept</a>(){
<a name="l01046"></a>01046                 <span class="keywordflow">if</span>(!this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l01047"></a>01047                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;TCPServerSocket::Accept(): the socket is not opened&quot;</span>);
<a name="l01048"></a>01048 
<a name="l01049"></a>01049                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#ae7a518cea602c4d2c050d0f0faa4902d">ClearCanReadFlag</a>();
<a name="l01050"></a>01050 
<a name="l01051"></a>01051                 sockaddr_in sockAddr;
<a name="l01052"></a>01052 
<a name="l01053"></a>01053 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l01054"></a>01054 <span class="preprocessor"></span>                <span class="keywordtype">int</span> sock_alen = <span class="keyword">sizeof</span>(sockAddr);
<a name="l01055"></a>01055 <span class="preprocessor">#else //linux/unix</span>
<a name="l01056"></a>01056 <span class="preprocessor"></span>                socklen_t sock_alen = <span class="keyword">sizeof</span>(sockAddr);
<a name="l01057"></a>01057 <span class="preprocessor">#endif</span>
<a name="l01058"></a>01058 <span class="preprocessor"></span>
<a name="l01059"></a>01059                 <a class="code" href="classting_1_1TCPSocket.htm" title="a class which represents a TCP socket.">TCPSocket</a> sock;<span class="comment">//allocate a new socket object</span>
<a name="l01060"></a>01060 
<a name="l01061"></a>01061                 sock.<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a> = ::accept(
<a name="l01062"></a>01062                                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>,
<a name="l01063"></a>01063                                 <span class="keyword">reinterpret_cast&lt;</span>sockaddr*<span class="keyword">&gt;</span>(&amp;sockAddr),
<a name="l01064"></a>01064 #ifdef USE_GUSI_SOCKETS
<a name="l01065"></a>01065                                 (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *)&amp;sock_alen
<a name="l01066"></a>01066 <span class="preprocessor">#else</span>
<a name="l01067"></a>01067 <span class="preprocessor"></span>                                &amp;sock_alen
<a name="l01068"></a>01068 <span class="preprocessor">#endif</span>
<a name="l01069"></a>01069 <span class="preprocessor"></span>                        );
<a name="l01070"></a>01070 
<a name="l01071"></a>01071                 <span class="keywordflow">if</span>(sock.<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a> == <a class="code" href="classting_1_1Socket.htm#a0c8de9408709f196ad46e080e36950f7">DInvalidSocket</a>())
<a name="l01072"></a>01072                         <span class="keywordflow">return</span> sock;<span class="comment">//no connections to be accepted, return invalid socket</span>
<a name="l01073"></a>01073 
<a name="l01074"></a>01074 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l01075"></a>01075 <span class="preprocessor"></span>                sock.CreateEventForWaitable();
<a name="l01076"></a>01076 <span class="preprocessor">#endif</span>
<a name="l01077"></a>01077 <span class="preprocessor"></span>
<a name="l01078"></a>01078                 <span class="comment">//set blocking mode</span>
<a name="l01079"></a>01079 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l01080"></a>01080 <span class="preprocessor"></span>                {
<a name="l01081"></a>01081                         <span class="comment">//passing a zero value, socket mode set to block on</span>
<a name="l01082"></a>01082                         u_long mode = 0;
<a name="l01083"></a>01083                         ioctlsocket(sock.<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, FIONBIO, &amp;mode);
<a name="l01084"></a>01084                 }
<a name="l01085"></a>01085 <span class="preprocessor">#elif defined(O_NONBLOCK)</span>
<a name="l01086"></a>01086 <span class="preprocessor"></span>                {
<a name="l01087"></a>01087                         <span class="keywordtype">int</span> flags = fcntl(sock.<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, F_GETFL, 0);
<a name="l01088"></a>01088                         fcntl(sock.<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, F_SETFL, flags &amp; (~O_NONBLOCK));
<a name="l01089"></a>01089                 }
<a name="l01090"></a>01090 <span class="preprocessor">#else</span>
<a name="l01091"></a>01091 <span class="preprocessor"></span><span class="preprocessor">#error &quot;do not know how to set blocking mode to socket&quot;</span>
<a name="l01092"></a>01092 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01093"></a>01093 <span class="preprocessor"></span>
<a name="l01094"></a>01094                 <span class="keywordflow">if</span>(this-&gt;disableNaggle)
<a name="l01095"></a>01095                         sock.DisableNaggle();
<a name="l01096"></a>01096 
<a name="l01097"></a>01097                 <span class="keywordflow">return</span> sock;<span class="comment">//return a newly created socket</span>
<a name="l01098"></a>01098         }<span class="comment">//~Accept()</span>
<a name="l01099"></a>01099 
<a name="l01100"></a>01100 
<a name="l01101"></a>01101 
<a name="l01102"></a>01102 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l01103"></a>01103 <span class="preprocessor"></span><span class="keyword">private</span>:
<a name="l01104"></a>01104         <span class="comment">//override</span>
<a name="l01105"></a>01105         <span class="keywordtype">void</span> SetWaitingEvents(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> flagsToWaitFor){
<a name="l01106"></a>01106                 <span class="keywordtype">long</span> flags = FD_CLOSE;
<a name="l01107"></a>01107                 <span class="keywordflow">if</span>((flagsToWaitFor &amp; Waitable::READ) != 0){
<a name="l01108"></a>01108                         flags |= FD_ACCEPT;
<a name="l01109"></a>01109                 }
<a name="l01110"></a>01110                 this-&gt;SetWaitingEventsForWindows(flags);
<a name="l01111"></a>01111         }
<a name="l01112"></a>01112 <span class="preprocessor">#endif</span>
<a name="l01113"></a>01113 <span class="preprocessor"></span>};<span class="comment">//~class TCPServerSocket</span>
<a name="l01114"></a>01114 
<a name="l01115"></a>01115 
<a name="l01116"></a>01116 
<a name="l01117"></a><a class="code" href="classting_1_1UDPSocket.htm">01117</a> <span class="keyword">class </span><a class="code" href="classting_1_1UDPSocket.htm">UDPSocket</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a>{
<a name="l01118"></a>01118 <span class="keyword">public</span>:
<a name="l01119"></a><a class="code" href="classting_1_1UDPSocket.htm#a7f2e72ccbf8fa20a46215f0a9408c4a7">01119</a>         <a class="code" href="classting_1_1UDPSocket.htm#a7f2e72ccbf8fa20a46215f0a9408c4a7">UDPSocket</a>(){}
<a name="l01120"></a>01120 
<a name="l01121"></a>01121 
<a name="l01122"></a>01122 
<a name="l01123"></a><a class="code" href="classting_1_1UDPSocket.htm#a2bedf6709d928d1ea28a15d477540a31">01123</a>         <a class="code" href="classting_1_1UDPSocket.htm">UDPSocket</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1UDPSocket.htm">UDPSocket</a>&amp; s) :
<a name="l01124"></a>01124                         <a class="code" href="classting_1_1Socket.htm" title="Basic socket class.">Socket</a>(s)
<a name="l01125"></a>01125         {}
<a name="l01126"></a>01126 
<a name="l01127"></a>01127 
<a name="l01128"></a>01128 
<a name="l01129"></a><a class="code" href="classting_1_1UDPSocket.htm#ab2ca411a5fa6208f06aa50fdcc60c994">01129</a>         <a class="code" href="classting_1_1UDPSocket.htm">UDPSocket</a>&amp; <a class="code" href="classting_1_1UDPSocket.htm#ab2ca411a5fa6208f06aa50fdcc60c994">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1UDPSocket.htm">UDPSocket</a>&amp; s){
<a name="l01130"></a>01130                 this-&gt;<a class="code" href="classting_1_1Socket.htm#adf9973457979069b4996b3faab1f4e24">Socket::operator=</a>(s);
<a name="l01131"></a>01131                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l01132"></a>01132         }
<a name="l01133"></a>01133 
<a name="l01134"></a>01134 
<a name="l01145"></a><a class="code" href="classting_1_1UDPSocket.htm#a1548c4e017183f974dd6679e3361f789">01145</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1UDPSocket.htm#a1548c4e017183f974dd6679e3361f789" title="Open the socket.">Open</a>(<a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> port){
<a name="l01146"></a>01146                 <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l01147"></a>01147                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;UDPSocket::Open(): the socket is already opened&quot;</span>);
<a name="l01148"></a>01148 
<a name="l01149"></a>01149 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l01150"></a>01150 <span class="preprocessor"></span>                this-&gt;CreateEventForWaitable();
<a name="l01151"></a>01151 <span class="preprocessor">#endif</span>
<a name="l01152"></a>01152 <span class="preprocessor"></span>
<a name="l01153"></a>01153                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a> =<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436"> ::socket</a>(AF_INET, SOCK_DGRAM, 0);
<a name="l01154"></a>01154                 <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a> == <a class="code" href="classting_1_1Socket.htm#a0c8de9408709f196ad46e080e36950f7">DInvalidSocket</a>()){
<a name="l01155"></a>01155 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l01156"></a>01156 <span class="preprocessor"></span>                        this-&gt;CloseEventForWaitable();
<a name="l01157"></a>01157 <span class="preprocessor">#endif</span>
<a name="l01158"></a>01158 <span class="preprocessor"></span>                        <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;UDPSocket::Open(): ::socket() failed&quot;</span>);
<a name="l01159"></a>01159                 }
<a name="l01160"></a>01160 
<a name="l01161"></a>01161                 <span class="comment">//Bind locally, if appropriate</span>
<a name="l01162"></a>01162                 <span class="keywordflow">if</span>(port != 0){
<a name="l01163"></a>01163                         <span class="keyword">struct </span>sockaddr_in sockAddr;
<a name="l01164"></a>01164                         memset(&amp;sockAddr, 0, <span class="keyword">sizeof</span>(sockAddr));
<a name="l01165"></a>01165                         sockAddr.sin_family = AF_INET;
<a name="l01166"></a>01166                         sockAddr.sin_addr.s_addr = INADDR_ANY;
<a name="l01167"></a>01167                         sockAddr.sin_port = htons(port);
<a name="l01168"></a>01168 
<a name="l01169"></a>01169                         <span class="comment">// Bind the socket for listening</span>
<a name="l01170"></a>01170                         <span class="keywordflow">if</span>(::bind(
<a name="l01171"></a>01171                                         this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>,
<a name="l01172"></a>01172                                         reinterpret_cast&lt;struct sockaddr*&gt;(&amp;sockAddr),
<a name="l01173"></a>01173                                         <span class="keyword">sizeof</span>(sockAddr)
<a name="l01174"></a>01174                                 ) == <a class="code" href="classting_1_1Socket.htm#ac27aa7477d728fd5fc852ecfb798025f">DSocketError</a>())
<a name="l01175"></a>01175                         {
<a name="l01176"></a>01176                                 this-&gt;<a class="code" href="classting_1_1Socket.htm#adf9b6fde0aa78fb1706200807bd5221e" title="Closes the socket disconnecting it if necessary.">Close</a>();
<a name="l01177"></a>01177                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;UDPSocket::Open(): could not bind to local port&quot;</span>);
<a name="l01178"></a>01178                         }
<a name="l01179"></a>01179                 }
<a name="l01180"></a>01180 <span class="preprocessor">#ifdef SO_BROADCAST</span>
<a name="l01181"></a>01181 <span class="preprocessor"></span>                <span class="comment">//Allow LAN broadcasts with the socket</span>
<a name="l01182"></a>01182                 {
<a name="l01183"></a>01183                         <span class="keywordtype">int</span> yes = 1;
<a name="l01184"></a>01184                         setsockopt(this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>, SOL_SOCKET, SO_BROADCAST, (<span class="keywordtype">char</span>*)&amp;yes, <span class="keyword">sizeof</span>(yes));
<a name="l01185"></a>01185                 }
<a name="l01186"></a>01186 <span class="preprocessor">#endif</span>
<a name="l01187"></a>01187 <span class="preprocessor"></span>
<a name="l01188"></a>01188                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">ClearAllReadinessFlags</a>();
<a name="l01189"></a>01189         }
<a name="l01190"></a>01190 
<a name="l01191"></a>01191 
<a name="l01192"></a><a class="code" href="classting_1_1UDPSocket.htm#a7bfa7e0d518a3cbf0dbccfdd8dcde051">01192</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1UDPSocket.htm#a7bfa7e0d518a3cbf0dbccfdd8dcde051">Open</a>(){
<a name="l01193"></a>01193                 this-&gt;Open(0);
<a name="l01194"></a>01194         }
<a name="l01195"></a>01195 
<a name="l01196"></a>01196         <span class="comment">//returns number of bytes sent, should be less or equal to size.</span>
<a name="l01197"></a>01197         <span class="comment">//TODO: remove this deprecated function</span>
<a name="l01198"></a><a class="code" href="classting_1_1UDPSocket.htm#a77c9ff1216ff89b2fb86e411535ffe07">01198</a>         <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1UDPSocket.htm#a77c9ff1216ff89b2fb86e411535ffe07">Send</a>(<span class="keyword">const</span> <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* buf, <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> size, <span class="keyword">const</span> <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>&amp; destinationIP){
<a name="l01199"></a>01199                 <a class="code" href="debug_8hpp.htm#a494d31903e7b0333dfa03b0778679113">TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;UDPSocket::Send(const u8* buf, u16 size, IPAddress destinationIP) is DEPRECATED, use Send(const ting::Buffer&lt;u8&gt;&amp; buf, IPAddress destinationIP) instead&quot;</span> &lt;&lt; std::endl)
<a name="l01200"></a>01200                 <a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">ting::Buffer&lt;u8&gt;</a> wrap(const_cast&lt;u8*&gt;(buf), size);
<a name="l01201"></a>01201                 <span class="keywordflow">return</span> this-&gt;Send(wrap, destinationIP);
<a name="l01202"></a>01202         }
<a name="l01203"></a>01203 
<a name="l01204"></a>01204         <span class="comment">//returns number of bytes sent, should be less or equal to size.</span>
<a name="l01205"></a><a class="code" href="classting_1_1UDPSocket.htm#a67b16e2b6e504816970bd837a4d8527f">01205</a>         <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1UDPSocket.htm#a67b16e2b6e504816970bd837a4d8527f">Send</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">ting::Buffer&lt;u8&gt;</a>&amp; buf, <span class="keyword">const</span> <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a>&amp; destinationIP){
<a name="l01206"></a>01206                 <span class="keywordflow">if</span>(!this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l01207"></a>01207                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;UDPSocket::Send(): socket is not opened&quot;</span>);
<a name="l01208"></a>01208 
<a name="l01209"></a>01209                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#af593425a807d59fbef4c0206dcd91935">ClearCanWriteFlag</a>();
<a name="l01210"></a>01210 
<a name="l01211"></a>01211                 sockaddr_in sockAddr;
<a name="l01212"></a>01212                 <span class="keywordtype">int</span> sockLen = <span class="keyword">sizeof</span>(sockAddr);
<a name="l01213"></a>01213 
<a name="l01214"></a>01214                 sockAddr.sin_addr.s_addr = destinationIP.<a class="code" href="classting_1_1IPAddress.htm#a225234d3a20b4c63868267193e331213" title="IP address.">host</a>;
<a name="l01215"></a>01215                 sockAddr.sin_port = htons(destinationIP.<a class="code" href="classting_1_1IPAddress.htm#a3b3f0ca7cc644be6be3b89b88359372e" title="IP port number.">port</a>);
<a name="l01216"></a>01216                 sockAddr.sin_family = AF_INET;
<a name="l01217"></a>01217                 <span class="keywordtype">int</span> res = ::sendto(
<a name="l01218"></a>01218                                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>,
<a name="l01219"></a>01219                                 <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(buf.<a class="code" href="classting_1_1Buffer.htm#aee3b65d2c5fd9d3b73c20c725a3d5757" title="get pointer to first element of the buffer.">Buf</a>()),
<a name="l01220"></a>01220                                 buf.<a class="code" href="classting_1_1Buffer.htm#a72614973b8c68b8f4f261ffb21aedf29" title="get buffer size.">Size</a>(),
<a name="l01221"></a>01221                                 0,
<a name="l01222"></a>01222                                 <span class="keyword">reinterpret_cast&lt;</span>struct sockaddr*<span class="keyword">&gt;</span>(&amp;sockAddr),
<a name="l01223"></a>01223                                 sockLen
<a name="l01224"></a>01224                         );
<a name="l01225"></a>01225 
<a name="l01226"></a>01226                 <span class="keywordflow">if</span>(res == <a class="code" href="classting_1_1Socket.htm#ac27aa7477d728fd5fc852ecfb798025f">DSocketError</a>())
<a name="l01227"></a>01227                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;UDPSocket::Send(): sendto() failed&quot;</span>);
<a name="l01228"></a>01228 
<a name="l01229"></a>01229                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(buf.<a class="code" href="classting_1_1Buffer.htm#a72614973b8c68b8f4f261ffb21aedf29" title="get buffer size.">Size</a>() &lt;= unsigned(<a class="code" href="namespaceting.htm#af2db06bf4b5d3b18105cdb10237c1fd6" title="Maximal value of integer type.">ting::DMaxInt</a>()))
<a name="l01230"></a>01230                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(res &lt;= <span class="keywordtype">int</span>(buf.<a class="code" href="classting_1_1Buffer.htm#a72614973b8c68b8f4f261ffb21aedf29" title="get buffer size.">Size</a>()), <span class="stringliteral">&quot;res = &quot;</span> &lt;&lt; res)
<a name="l01231"></a>01231 
<a name="l01232"></a>01232                 <span class="keywordflow">return</span> res;
<a name="l01233"></a>01233         }
<a name="l01234"></a>01234 
<a name="l01235"></a>01235 
<a name="l01236"></a>01236         <span class="comment">//returns number of bytes received</span>
<a name="l01237"></a>01237         <span class="comment">//TODO: remove this deprecated function</span>
<a name="l01238"></a><a class="code" href="classting_1_1UDPSocket.htm#acd6bb0daaa389b576f80d3583aa8bfc5">01238</a>         <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1UDPSocket.htm#acd6bb0daaa389b576f80d3583aa8bfc5">Recv</a>(<a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* buf, <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> maxSize, <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a> &amp;out_SenderIP){
<a name="l01239"></a>01239                 <a class="code" href="debug_8hpp.htm#a494d31903e7b0333dfa03b0778679113">TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;UDPSocket::Recv(u8* buf, u16 maxSize, IPAddress &amp;out_SenderIP) is DEPRECATED, use Recv(ting::Buffer&lt;u8&gt;&amp; buf, IPAddress &amp;out_SenderIP) insted&quot;</span> &lt;&lt; std::endl)
<a name="l01240"></a>01240                 <a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">ting::Buffer&lt;u8&gt;</a> wrap(buf, maxSize);
<a name="l01241"></a>01241                 <span class="keywordflow">return</span> this-&gt;Recv(wrap, out_SenderIP);
<a name="l01242"></a>01242         }
<a name="l01243"></a>01243 
<a name="l01244"></a>01244         <span class="comment">//returns number of bytes received</span>
<a name="l01245"></a><a class="code" href="classting_1_1UDPSocket.htm#a597295e88c192b63a81a42037ec9dd19">01245</a>         <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1UDPSocket.htm#a597295e88c192b63a81a42037ec9dd19">Recv</a>(<a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">ting::Buffer&lt;u8&gt;</a>&amp; buf, <a class="code" href="classting_1_1IPAddress.htm" title="a structure which holds IP address">IPAddress</a> &amp;out_SenderIP){
<a name="l01246"></a>01246                 <span class="keywordflow">if</span>(!this-&gt;<a class="code" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">IsValid</a>())
<a name="l01247"></a>01247                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;UDPSocket::Recv(): socket is not opened&quot;</span>);
<a name="l01248"></a>01248 
<a name="l01249"></a>01249                 <span class="comment">//the flag shall be cleared even if this function fails to avoid subsequent</span>
<a name="l01250"></a>01250                 <span class="comment">//calls to Recv() because it indicates that there&apos;s activity.</span>
<a name="l01251"></a>01251                 <span class="comment">//So, do it at the beginning of the function.</span>
<a name="l01252"></a>01252                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#ae7a518cea602c4d2c050d0f0faa4902d">ClearCanReadFlag</a>();
<a name="l01253"></a>01253 
<a name="l01254"></a>01254                 sockaddr_in sockAddr;
<a name="l01255"></a>01255 
<a name="l01256"></a>01256 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l01257"></a>01257 <span class="preprocessor"></span>                <span class="keywordtype">int</span> sockLen = <span class="keyword">sizeof</span>(sockAddr);
<a name="l01258"></a>01258 <span class="preprocessor">#else //linux/unix</span>
<a name="l01259"></a>01259 <span class="preprocessor"></span>                socklen_t sockLen = <span class="keyword">sizeof</span>(sockAddr);
<a name="l01260"></a>01260 <span class="preprocessor">#endif</span>
<a name="l01261"></a>01261 <span class="preprocessor"></span>
<a name="l01262"></a>01262                 <span class="keywordtype">int</span> res = ::recvfrom(
<a name="l01263"></a>01263                                 this-&gt;<a class="code" href="classting_1_1Socket.htm#a4310dc94f5392ce4c627512ab63d5436">socket</a>,
<a name="l01264"></a>01264                                 <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(buf.<a class="code" href="classting_1_1Buffer.htm#aee3b65d2c5fd9d3b73c20c725a3d5757" title="get pointer to first element of the buffer.">Buf</a>()),
<a name="l01265"></a>01265                                 buf.<a class="code" href="classting_1_1Buffer.htm#a72614973b8c68b8f4f261ffb21aedf29" title="get buffer size.">Size</a>(),
<a name="l01266"></a>01266                                 0,
<a name="l01267"></a>01267                                 <span class="keyword">reinterpret_cast&lt;</span>sockaddr*<span class="keyword">&gt;</span>(&amp;sockAddr),
<a name="l01268"></a>01268                                 &amp;sockLen
<a name="l01269"></a>01269                         );
<a name="l01270"></a>01270 
<a name="l01271"></a>01271                 <span class="keywordflow">if</span>(res == <a class="code" href="classting_1_1Socket.htm#ac27aa7477d728fd5fc852ecfb798025f">DSocketError</a>())
<a name="l01272"></a>01272                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Socket_1_1Exc.htm" title="Basic exception class.">Socket::Exc</a>(<span class="stringliteral">&quot;UDPSocket::Recv(): recvfrom() failed&quot;</span>);
<a name="l01273"></a>01273 
<a name="l01274"></a>01274                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(buf.<a class="code" href="classting_1_1Buffer.htm#a72614973b8c68b8f4f261ffb21aedf29" title="get buffer size.">Size</a>() &lt;= unsigned(<a class="code" href="namespaceting.htm#af2db06bf4b5d3b18105cdb10237c1fd6" title="Maximal value of integer type.">ting::DMaxInt</a>()))
<a name="l01275"></a>01275                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(res &lt;= <span class="keywordtype">int</span>(buf.<a class="code" href="classting_1_1Buffer.htm#a72614973b8c68b8f4f261ffb21aedf29" title="get buffer size.">Size</a>()), <span class="stringliteral">&quot;res = &quot;</span> &lt;&lt; res)
<a name="l01276"></a>01276 
<a name="l01277"></a>01277                 out_SenderIP.<a class="code" href="classting_1_1IPAddress.htm#a225234d3a20b4c63868267193e331213" title="IP address.">host</a> = ntohl(sockAddr.sin_addr.s_addr);
<a name="l01278"></a>01278                 out_SenderIP.<a class="code" href="classting_1_1IPAddress.htm#a3b3f0ca7cc644be6be3b89b88359372e" title="IP port number.">port</a> = ntohs(sockAddr.sin_port);
<a name="l01279"></a>01279                 <span class="keywordflow">return</span> res;
<a name="l01280"></a>01280         }
<a name="l01281"></a>01281 
<a name="l01282"></a>01282 
<a name="l01283"></a>01283 
<a name="l01284"></a>01284 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l01285"></a>01285 <span class="preprocessor"></span><span class="keyword">private</span>:
<a name="l01286"></a>01286         <span class="comment">//override</span>
<a name="l01287"></a>01287         <span class="keywordtype">void</span> SetWaitingEvents(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> flagsToWaitFor){
<a name="l01288"></a>01288                 <span class="keywordtype">long</span> flags = FD_CLOSE;
<a name="l01289"></a>01289                 <span class="keywordflow">if</span>((flagsToWaitFor &amp; Waitable::READ) != 0){
<a name="l01290"></a>01290                         flags |= FD_READ;
<a name="l01291"></a>01291                 }
<a name="l01292"></a>01292                 <span class="keywordflow">if</span>((flagsToWaitFor &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">Waitable::WRITE</a>) != 0){
<a name="l01293"></a>01293                         flags |= FD_WRITE;
<a name="l01294"></a>01294                 }
<a name="l01295"></a>01295                 this-&gt;SetWaitingEventsForWindows(flags);
<a name="l01296"></a>01296         }
<a name="l01297"></a>01297 <span class="preprocessor">#endif</span>
<a name="l01298"></a>01298 <span class="preprocessor"></span>};<span class="comment">//~class UDPSocket</span>
<a name="l01299"></a>01299 
<a name="l01300"></a>01300 
<a name="l01301"></a>01301 
<a name="l01302"></a>01302 }<span class="comment">//~namespace</span>
<a name="l01303"></a>01303 
<a name="l01304"></a>01304 
<a name="l01305"></a>01305 <span class="comment">/*</span>
<a name="l01306"></a>01306 <span class="comment"> * @mainpage ting::Socket library</span>
<a name="l01307"></a>01307 <span class="comment"> *</span>
<a name="l01308"></a>01308 <span class="comment"> * @section sec_about About</span>
<a name="l01309"></a>01309 <span class="comment"> * &lt;b&gt;tin::Socket&lt;/b&gt; is a simple cross platfrom C++ wrapper above sockets networking API designed for games.</span>
<a name="l01310"></a>01310 <span class="comment"> *</span>
<a name="l01311"></a>01311 <span class="comment"> * @section sec_getting_started Getting started</span>
<a name="l01312"></a>01312 <span class="comment"> * @ref page_usage_tutorial &quot;library usage tutorial&quot; - quickstart tutorial</span>
<a name="l01313"></a>01313 <span class="comment"> */</span>
<a name="l01314"></a>01314 
<a name="l01315"></a>01315 <span class="comment">/*</span>
<a name="l01316"></a>01316 <span class="comment"> * @page page_usage_tutorial ting::Socket usage tutorial</span>
<a name="l01317"></a>01317 <span class="comment"> *</span>
<a name="l01318"></a>01318 <span class="comment"> * TODO: write usage tutorial</span>
<a name="l01319"></a>01319 <span class="comment"> */</span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
