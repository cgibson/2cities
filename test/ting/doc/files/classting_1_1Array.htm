<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: ting::Array&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceting.htm">ting</a>::<a class="el" href="classting_1_1Array.htm">Array</a>
  </div>
</div>
<div class="contents">
<h1>ting::Array&lt; T &gt; Class Template Reference</h1><!-- doxytag: class="ting::Array" --><!-- doxytag: inherits="ting::Buffer" -->
<p>wrapper above new[]/delete[].  
<a href="#_details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Array_8hpp_source.htm">Array.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ting::Array&lt; T &gt;:</div>
<div class="dynsection">
 <div class="center">
  <img src="classting_1_1Array.gif" usemap="#ting::Array&lt; T &gt;_map" alt=""/>
  <map id="ting::Array&lt; T &gt;_map" name="ting::Array&lt; T &gt;_map">
<area href="classting_1_1Buffer.htm" alt="ting::Buffer&lt; T &gt;" shape="rect" coords="0,0,104,24"/>
</map>
 </div>
</div>

<p><a href="classting_1_1Array-members.htm">List of all members.</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#aca9df210080f5415bcba30989a621ef7">Array</a> (unsigned arraySize=0)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Creates new array of requested size.  <a href="#aca9df210080f5415bcba30989a621ef7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#a5844d7598a08f66ee96bb2ae2f79f4c6">Array</a> (const <a class="el" href="classting_1_1Array.htm">Array</a> &amp;a)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy constructor, works as auto-pointer.  <a href="#a5844d7598a08f66ee96bb2ae2f79f4c6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1Array.htm">Array</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#ab8a7736487146584c1628a4540395d48">operator=</a> (const <a class="el" href="classting_1_1Array.htm">Array</a> &amp;a)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assignment operator, works as auto-pointer.  <a href="#ab8a7736487146584c1628a4540395d48"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#a55327acb2f0bbc8107dfec172bae388a">~Array</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#ac092594f79ec06d7e23b0cd3d8b5678a">Init</a> (unsigned arraySize)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">initialize array with new memory buffer of given size.  <a href="#ac092594f79ec06d7e23b0cd3d8b5678a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e">IsValid</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">returns true if <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> is allocated.  <a href="#a17b530cca6e388418cdd35b70ff6745e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#ac597495916260174e6270e64ac80b3ca">IsNotValid</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">inverse of <a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">Array::IsValid()</a>.  <a href="#ac597495916260174e6270e64ac80b3ca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#ae55c4b53ddd7eb1d204676c5b888ca9b">operator bool</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Converts to bool.  <a href="#ae55c4b53ddd7eb1d204676c5b888ca9b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#ab15fdd2519ca706d00ab9222982f6c3b">Reset</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">free array memory buffer.  <a href="#ab15fdd2519ca706d00ab9222982f6c3b"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;class T&gt;<br/>
 class ting::Array&lt; T &gt;</h3>

<p>wrapper above new[]/delete[]. </p>
<p>This template class is a wrapper above new[]/delete[] operators. Note that it behaves like auto-pointer. It defines <a class="el" href="classting_1_1Array.htm#ab8a7736487146584c1628a4540395d48" title="Assignment operator, works as auto-pointer.">operator=()</a> and copy constructor and when one class instance is assigned (by <a class="el" href="classting_1_1Array.htm#ab8a7736487146584c1628a4540395d48" title="Assignment operator, works as auto-pointer.">operator=()</a> or copy constructor) to another, the first one becomes invalid while the second becomes valid and acquires the memory buffer from first. </p>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="aca9df210080f5415bcba30989a621ef7"></a><!-- doxytag: member="ting::Array::Array" ref="aca9df210080f5415bcba30989a621ef7" args="(unsigned arraySize=0)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::<a class="el" href="classting_1_1Array.htm">Array</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>arraySize</em> = <code>0</code></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Creates new array of requested size. </p>
<p>Creates new array of requested size. Note, that it will call new[], so it will initialize all the elements by calling default constructor of the element class for each element. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>arraySize</em>&nbsp;</td><td>- number of elements this array should hold. If 0 is supplied then memory is not allocated and the created <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object is not valid (<a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">Array::IsValid()</a> will return false). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5844d7598a08f66ee96bb2ae2f79f4c6"></a><!-- doxytag: member="ting::Array::Array" ref="a5844d7598a08f66ee96bb2ae2f79f4c6" args="(const Array &amp;a)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::<a class="el" href="classting_1_1Array.htm">Array</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Array.htm">Array</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor, works as auto-pointer. </p>
<p>Creates a copy of 'a'. This copy constructor works as auto-pointer. This means that if creating <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object like this: Array&lt;int&gt; a(10);//create array 'a' Array&lt;int&gt; b(a);//create array 'b' using copy constructor then 'a' will become invalid while 'b' will hold pointer to the memory buffer which 'a' was holding before. I.e. when using copy constructor, no memory allocation occurs, the memory buffer kept by 'a' is moved to 'b' and 'a' is invalidated. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>- <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object to copy. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a55327acb2f0bbc8107dfec172bae388a"></a><!-- doxytag: member="ting::Array::~Array" ref="a55327acb2f0bbc8107dfec172bae388a" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::~<a class="el" href="classting_1_1Array.htm">Array</a> </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ac092594f79ec06d7e23b0cd3d8b5678a"></a><!-- doxytag: member="ting::Array::Init" ref="ac092594f79ec06d7e23b0cd3d8b5678a" args="(unsigned arraySize)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::Init </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>arraySize</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>initialize array with new memory buffer of given size. </p>
<p>If array was already initialized then the memory buffer is freed (using delete[]) and new memory buffer of requested size is allocated. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>arraySize</em>&nbsp;</td><td>- number of elements this array should hold. If 0 is supplied then array will become invalid. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac597495916260174e6270e64ac80b3ca"></a><!-- doxytag: member="ting::Array::IsNotValid" ref="ac597495916260174e6270e64ac80b3ca" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::IsNotValid </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>inverse of <a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">Array::IsValid()</a>. </p>
<p>Inverse of <a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">Array::IsValid()</a>. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true - if <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> is not valid. </dd>
<dd>
false - if <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> is valid. </dd></dl>

</div>
</div>
<a class="anchor" id="a17b530cca6e388418cdd35b70ff6745e"></a><!-- doxytag: member="ting::Array::IsValid" ref="a17b530cca6e388418cdd35b70ff6745e" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::IsValid </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>returns true if <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> is allocated. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true - if this <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object holds memory buffer of not zero size. </dd>
<dd>
false - if this <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object does not hold any memory buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="ae55c4b53ddd7eb1d204676c5b888ca9b"></a><!-- doxytag: member="ting::Array::operator bool" ref="ae55c4b53ddd7eb1d204676c5b888ca9b" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::operator bool </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Converts to bool. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>bool - value of <a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">Array::IsValid()</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="ab8a7736487146584c1628a4540395d48"></a><!-- doxytag: member="ting::Array::operator=" ref="ab8a7736487146584c1628a4540395d48" args="(const Array &amp;a)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">Array</a>&amp; <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Array.htm">Array</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment operator, works as auto-pointer. </p>
<p>This operator works the same way as copy constructor does. That is, if assignng like this: Array&lt;int&gt; b(20), a(10); b = a; then 'a' will become invalid and 'b' will hold the memory buffer owned by 'a' before. Note, that memory buffer owned by 'b' prior to assignment is freed and destructors are called on every element of the buffer (i.e. buffer is freed using delete[] operator). Thus, no memory leak occurs. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>- <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object to assign from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab15fdd2519ca706d00ab9222982f6c3b"></a><!-- doxytag: member="ting::Array::Reset" ref="ab15fdd2519ca706d00ab9222982f6c3b" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::Reset </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>free array memory buffer. </p>
<p>Frees memory buffer hold by <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object (if any). After that the <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object becomes invalid. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Array_8hpp_source.htm">Array.hpp</a></li>
</ul>
</div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
