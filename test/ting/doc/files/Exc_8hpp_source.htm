<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: Exc.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>Exc.hpp</h1><a href="Exc_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;exception&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;new&gt;</span>                    <span class="comment">//for std::nothrow</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">namespace </span>ting{
<a name="l00039"></a>00039 
<a name="l00043"></a>00043 <span class="preprocessor">#ifdef __SYMBIAN32__ // we have symbian which does not have std c++ library</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="keyword">class </span>Exc
<a name="l00045"></a>00045 #else
<a name="l00046"></a><a class="code" href="classting_1_1Exc.htm">00046</a> class <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">Exc</a> : <span class="keyword">public</span> std::exception
<a name="l00047"></a>00047 <span class="preprocessor">#endif</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>{
<a name="l00049"></a>00049         <span class="keywordtype">char</span> *msg;
<a name="l00050"></a>00050 <span class="keyword">public</span>:
<a name="l00057"></a><a class="code" href="classting_1_1Exc.htm#a28b09afed057206e6f9e18389531a8ff">00057</a>         <a class="code" href="classting_1_1Exc.htm#a28b09afed057206e6f9e18389531a8ff" title="Exception constructor.">Exc</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* message = 0){
<a name="l00058"></a>00058                 <span class="keywordflow">if</span>(!message)
<a name="l00059"></a>00059                         message = <span class="stringliteral">&quot;no exception info&quot;</span>;
<a name="l00060"></a>00060 
<a name="l00061"></a>00061                 <span class="keywordtype">size_t</span> len = strlen(message);
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="preprocessor">        #ifdef __SYMBIAN32__</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span>                <span class="comment">//if I&apos;m right in symbian simple new operator does not throw or leave, it will return 0 in case of error</span>
<a name="l00065"></a>00065                 this-&gt;msg = <span class="keyword">new</span> <span class="keywordtype">char</span>[len+1];
<a name="l00066"></a>00066 <span class="preprocessor">        #else</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span>                <span class="comment">//we do not want another exception, use std::nothrow</span>
<a name="l00068"></a>00068                 this-&gt;msg = <span class="keyword">new</span>(std::nothrow) <span class="keywordtype">char</span>[len+1];
<a name="l00069"></a>00069 <span class="preprocessor">        #endif</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(!this-&gt;msg)
<a name="l00071"></a>00071                         <span class="keywordflow">return</span>;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073                 memcpy(this-&gt;msg, message, len);
<a name="l00074"></a>00074                 this-&gt;msg[len] = 0;<span class="comment">//null-terminate</span>
<a name="l00075"></a>00075         }
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 
<a name="l00079"></a><a class="code" href="classting_1_1Exc.htm#a975a59621e0fdc8ef515cc23a0d465a2">00079</a>         <span class="keyword">virtual</span> <a class="code" href="classting_1_1Exc.htm#a975a59621e0fdc8ef515cc23a0d465a2">~Exc</a>()throw(){<span class="comment">//use throw() because base class (std::exception) uses it.</span>
<a name="l00080"></a>00080                 <span class="keyword">delete</span>[] this-&gt;msg;
<a name="l00081"></a>00081         }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 
<a name="l00092"></a><a class="code" href="classting_1_1Exc.htm#aeb42b766109aa53fdb2130ce83d4276a">00092</a>         <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classting_1_1Exc.htm#aeb42b766109aa53fdb2130ce83d4276a" title="Returns a pointer to exception message.">What</a>()<span class="keyword">const</span>{
<a name="l00093"></a>00093                 <span class="keywordflow">return</span> this-&gt;what();
<a name="l00094"></a>00094         }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 <span class="keyword">private</span>:
<a name="l00099"></a>00099         <span class="comment">//override from std::exception</span>
<a name="l00100"></a>00100         <span class="keyword">const</span> <span class="keywordtype">char</span> *what()<span class="keyword">const</span> throw(){<span class="comment">//use throw() because base class (std::exception) uses it.</span>
<a name="l00101"></a>00101                 <span class="keywordflow">return</span> this-&gt;msg;<span class="comment">//this-&gt;msg is never 0 (see Exc constructor for more info).</span>
<a name="l00102"></a>00102         }
<a name="l00103"></a>00103 };
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 }<span class="comment">//~namespace ting</span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
