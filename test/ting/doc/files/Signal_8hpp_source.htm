<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: Signal.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>Signal.hpp</h1><a href="Signal_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="codegen_8h.htm" title="Code generation with preprocessor.">codegen.h</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="Ref_8hpp.htm" title="Reference counting mechanism base classes.">Ref.hpp</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="Thread_8hpp.htm" title="Multithreading library.">Thread.hpp</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm" title="Debug utilities.">debug.hpp</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a><a class="code" href="Signal_8hpp.htm#a9787dae13801fca2d795c0f4621bb189">00040</a> <span class="preprocessor">#define M_MAX_NUM_SIG_PARAMETERS 10</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span>
<a name="l00042"></a>00042 <span class="comment">//output &quot;, class T_Pn&quot;, the comma is written only if n==0</span>
<a name="l00043"></a><a class="code" href="Signal_8hpp.htm#ac2e09b5ed308aef5bc1d3a02b4631d0e">00043</a> <span class="preprocessor">#define M_TEMPLATE_PARAM(n, a) M_COMMA_IF_NOT_0(n) class T_P##n</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>
<a name="l00045"></a>00045 <span class="comment">//output &quot;class T_P0, ... class T_Pn&quot;</span>
<a name="l00046"></a><a class="code" href="Signal_8hpp.htm#a00edffe73a19f0b65da07defa4a0a57b">00046</a> <span class="preprocessor">#define M_TEMPLATE_PARAMS(n) M_REPEAT1(n, M_TEMPLATE_PARAM, )</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span>
<a name="l00048"></a>00048 <span class="comment">//output &quot;template &lt;class T_P0, ... class T_Pn&gt;&quot;</span>
<a name="l00049"></a><a class="code" href="Signal_8hpp.htm#a4ab915b43f00dd493c8eb9fa1dfeaf8f">00049</a> <span class="preprocessor">#define M_TEMPLATE(n) M_IF_NOT_0(n, template &lt;, ) M_TEMPLATE_PARAMS(n) M_IF_NOT_0(n, &gt;, )</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">//output &quot;, TPn pn&quot;, the comma is written only if n==0</span>
<a name="l00054"></a><a class="code" href="Signal_8hpp.htm#a8e4329df3fb11ed1c78114fd48096fab">00054</a> <span class="preprocessor">#define M_FUNC_PARAM_FULL(n, a) M_COMMA_IF_NOT_0(n) T_P##n p##n</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span>
<a name="l00056"></a>00056 <span class="comment">//output &quot;T_P0 p0, ... T_Pn pn&quot;</span>
<a name="l00057"></a><a class="code" href="Signal_8hpp.htm#a4cde2f03e3fa32522439246e4a98b198">00057</a> <span class="preprocessor">#define M_FUNC_PARAMS_FULL(n) M_REPEAT1(n, M_FUNC_PARAM_FULL, )</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span>
<a name="l00059"></a>00059 
<a name="l00060"></a><a class="code" href="Signal_8hpp.htm#a00847195d6cf19cf5f8f70eabc8242d0">00060</a> <span class="preprocessor">#define M_FUNC_PARAM_TYPE(n, a) M_COMMA_IF_NOT_0(n) T_P##n</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span>
<a name="l00062"></a>00062 <span class="comment">//output &quot;T_P0, ... T_Pn&quot;</span>
<a name="l00063"></a><a class="code" href="Signal_8hpp.htm#a4c9c16dded757fd7d883c9c3ce5035ba">00063</a> <span class="preprocessor">#define M_FUNC_PARAM_TYPES(n) M_REPEAT1(n, M_FUNC_PARAM_TYPE, )</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span><span class="comment">//#define M_FUNC_PARAM_TYPES(n) M_FUNC_PARAM_TYPES_I(n)</span>
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="comment">//output &quot;, pn&quot;, the comma is written only if n==0</span>
<a name="l00067"></a><a class="code" href="Signal_8hpp.htm#a8dff8a96b2e78999308f721544366613">00067</a> <span class="preprocessor">#define M_FUNC_PARAM_NAME(n, a) M_COMMA_IF_NOT_0(n) p##n</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span>
<a name="l00069"></a>00069 <span class="comment">//output &quot;p0, ... pn&quot;</span>
<a name="l00070"></a><a class="code" href="Signal_8hpp.htm#a72286fea7ff3862d60f35a40ae98f756">00070</a> <span class="preprocessor">#define M_FUNC_PARAM_NAMES(n) M_REPEAT1(n, M_FUNC_PARAM_NAME, )</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span>
<a name="l00072"></a>00072 
<a name="l00073"></a><a class="code" href="Signal_8hpp.htm#af3ea08a89d379991f729107b32fedf81">00073</a> <span class="preprocessor">#define M_FUNC_SLOT(num_func_params, num_sig_params) \</span>
<a name="l00074"></a>00074 <span class="preprocessor">template &lt;class T_Ret&gt; class FuncSlot##num_func_params : public SlotLink{ \</span>
<a name="l00075"></a>00075 <span class="preprocessor">public: \</span>
<a name="l00076"></a>00076 <span class="preprocessor">        T_Ret(*f)(M_FUNC_PARAM_TYPES(num_func_params)); \</span>
<a name="l00077"></a>00077 <span class="preprocessor">\</span>
<a name="l00078"></a>00078 <span class="preprocessor">        FuncSlot##num_func_params(T_Ret(*function)(M_FUNC_PARAM_TYPES(num_func_params))) : \</span>
<a name="l00079"></a>00079 <span class="preprocessor">                        f(function) \</span>
<a name="l00080"></a>00080 <span class="preprocessor">        {} \</span>
<a name="l00081"></a>00081 <span class="preprocessor">        virtual bool Execute(M_FUNC_PARAMS_FULL(num_sig_params)){ \</span>
<a name="l00082"></a>00082 <span class="preprocessor">                (*this-&gt;f)(M_FUNC_PARAM_NAMES(num_func_params)); \</span>
<a name="l00083"></a>00083 <span class="preprocessor">                return false; \</span>
<a name="l00084"></a>00084 <span class="preprocessor">        } \</span>
<a name="l00085"></a>00085 <span class="preprocessor">};</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span>
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 <span class="comment">//output the template for method slot with n parameters</span>
<a name="l00089"></a><a class="code" href="Signal_8hpp.htm#ae2c863227b961c0fff1cc7845dbbf46a">00089</a> <span class="preprocessor">#define M_METHOD_SLOT(num_meth_params, num_sig_params) \</span>
<a name="l00090"></a>00090 <span class="preprocessor">template &lt;class T_Ob, class T_Ret&gt; class MethodSlot##num_meth_params : public SlotLink{ \</span>
<a name="l00091"></a>00091 <span class="preprocessor">public: \</span>
<a name="l00092"></a>00092 <span class="preprocessor">        T_Ob* o; \</span>
<a name="l00093"></a>00093 <span class="preprocessor">        T_Ret(T_Ob::*m)(M_FUNC_PARAM_TYPES(num_meth_params)); \</span>
<a name="l00094"></a>00094 <span class="preprocessor">\</span>
<a name="l00095"></a>00095 <span class="preprocessor">        MethodSlot##num_meth_params(T_Ob* object, T_Ret(T_Ob::*method)(M_FUNC_PARAM_TYPES(num_meth_params))) : \</span>
<a name="l00096"></a>00096 <span class="preprocessor">                        o(object), \</span>
<a name="l00097"></a>00097 <span class="preprocessor">                        m(method) \</span>
<a name="l00098"></a>00098 <span class="preprocessor">        {} \</span>
<a name="l00099"></a>00099 <span class="preprocessor">        virtual bool Execute(M_FUNC_PARAMS_FULL(num_sig_params)){ \</span>
<a name="l00100"></a>00100 <span class="preprocessor">                (this-&gt;o-&gt;*(this-&gt;m))(M_FUNC_PARAM_NAMES(num_meth_params)); \</span>
<a name="l00101"></a>00101 <span class="preprocessor">                return false; \</span>
<a name="l00102"></a>00102 <span class="preprocessor">        } \</span>
<a name="l00103"></a>00103 <span class="preprocessor">};</span>
<a name="l00104"></a>00104 <span class="preprocessor"></span><span class="comment">//#define M_METHOD_SLOT(num_meth_params, num_sig_params) M_METHOD_SLOT_I(num_meth_params, num_sig_params)</span>
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="comment">//output the template for method slot for WeakRef object with n parameters</span>
<a name="l00107"></a><a class="code" href="Signal_8hpp.htm#a3741b69e6b5d9e3c8c9abad291ca3da3">00107</a> <span class="preprocessor">#define M_METHOD_WEAKREF_SLOT(num_meth_params, num_sig_params) \</span>
<a name="l00108"></a>00108 <span class="preprocessor">template &lt;class T_Ob, class T_Ret&gt; class WeakRefMethodSlot##num_meth_params : public SlotLink{ \</span>
<a name="l00109"></a>00109 <span class="preprocessor">public: \</span>
<a name="l00110"></a>00110 <span class="preprocessor">        WeakRef&lt;T_Ob&gt; o; \</span>
<a name="l00111"></a>00111 <span class="preprocessor">        T_Ret(T_Ob::*m)(M_FUNC_PARAM_TYPES(num_meth_params)); \</span>
<a name="l00112"></a>00112 <span class="preprocessor">\</span>
<a name="l00113"></a>00113 <span class="preprocessor">        WeakRefMethodSlot##num_meth_params(WeakRef&lt;T_Ob&gt;&amp; object, T_Ret(T_Ob::*method)(M_FUNC_PARAM_TYPES(num_meth_params))) : \</span>
<a name="l00114"></a>00114 <span class="preprocessor">                        o(object), \</span>
<a name="l00115"></a>00115 <span class="preprocessor">                        m(method) \</span>
<a name="l00116"></a>00116 <span class="preprocessor">        {} \</span>
<a name="l00117"></a>00117 <span class="preprocessor">        virtual bool Execute(M_FUNC_PARAMS_FULL(num_sig_params)){ \</span>
<a name="l00118"></a>00118 <span class="preprocessor">                if(Ref&lt;T_Ob&gt; r = this-&gt;o){ \</span>
<a name="l00119"></a>00119 <span class="preprocessor">                        (r.operator-&gt;()-&gt;*(this-&gt;m))(M_FUNC_PARAM_NAMES(num_meth_params)); \</span>
<a name="l00120"></a>00120 <span class="preprocessor">                        return false; \</span>
<a name="l00121"></a>00121 <span class="preprocessor">                }else{\</span>
<a name="l00122"></a>00122 <span class="preprocessor">                        return true; \</span>
<a name="l00123"></a>00123 <span class="preprocessor">                } \</span>
<a name="l00124"></a>00124 <span class="preprocessor">        } \</span>
<a name="l00125"></a>00125 <span class="preprocessor">};</span>
<a name="l00126"></a>00126 <span class="preprocessor"></span>
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="comment">//func Connect</span>
<a name="l00129"></a><a class="code" href="Signal_8hpp.htm#a8b69e77a39422439fcb7c64c2bb410dd">00129</a> <span class="preprocessor">#define M_CONNECT_FUNC(num_func_params, unused) \</span>
<a name="l00130"></a>00130 <span class="preprocessor">template &lt;class T_Ret&gt; void Connect(T_Ret(*f)(M_FUNC_PARAM_TYPES(num_func_params))){ \</span>
<a name="l00131"></a>00131 <span class="preprocessor">        ASSERT(f) \</span>
<a name="l00132"></a>00132 <span class="preprocessor">        Ptr&lt;SlotLink&gt; sl( \</span>
<a name="l00133"></a>00133 <span class="preprocessor">                        static_cast&lt;SlotLink*&gt;( new FuncSlot##num_func_params&lt;T_Ret&gt;(f)) \</span>
<a name="l00134"></a>00134 <span class="preprocessor">                ); \</span>
<a name="l00135"></a>00135 <span class="preprocessor">        ting::Mutex::Guard mutexGuard(this-&gt;mutex); \</span>
<a name="l00136"></a>00136 <span class="preprocessor">        this-&gt;slotLink.push_back(sl); \</span>
<a name="l00137"></a>00137 <span class="preprocessor">}</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span>
<a name="l00139"></a>00139 <span class="comment">//method and pointer to object Connect</span>
<a name="l00140"></a><a class="code" href="Signal_8hpp.htm#a04356d427e7212f573cbd78768ee0e83">00140</a> <span class="preprocessor">#define M_CONNECT_METH(num_meth_params, unused) \</span>
<a name="l00141"></a>00141 <span class="preprocessor">template &lt;class T_Ob, class T_Ret&gt; void Connect(T_Ob* o, T_Ret(T_Ob::*m)(M_FUNC_PARAM_TYPES(num_meth_params))){ \</span>
<a name="l00142"></a>00142 <span class="preprocessor">        ASSERT(o) \</span>
<a name="l00143"></a>00143 <span class="preprocessor">        ASSERT(m) \</span>
<a name="l00144"></a>00144 <span class="preprocessor">        Ptr&lt;SlotLink&gt; sl( \</span>
<a name="l00145"></a>00145 <span class="preprocessor">                        static_cast&lt;SlotLink*&gt;(new MethodSlot##num_meth_params&lt;T_Ob, T_Ret&gt;(o, m)) \</span>
<a name="l00146"></a>00146 <span class="preprocessor">                ); \</span>
<a name="l00147"></a>00147 <span class="preprocessor">        ting::Mutex::Guard mutexGuard(this-&gt;mutex); \</span>
<a name="l00148"></a>00148 <span class="preprocessor">        this-&gt;slotLink.push_back(sl); \</span>
<a name="l00149"></a>00149 <span class="preprocessor">}</span>
<a name="l00150"></a>00150 <span class="preprocessor"></span>
<a name="l00151"></a>00151 <span class="comment">//Weak ref and method Connect</span>
<a name="l00152"></a><a class="code" href="Signal_8hpp.htm#a0b0cb1803379c237b8b1b9564187d743">00152</a> <span class="preprocessor">#define M_CONNECT_METH_WEAKREF(num_meth_params, unused) \</span>
<a name="l00153"></a>00153 <span class="preprocessor">template &lt;class T_Ob, class T_Ret&gt; void Connect(WeakRef&lt;T_Ob&gt;&amp; o, T_Ret(T_Ob::*m)(M_FUNC_PARAM_TYPES(num_meth_params))){ \</span>
<a name="l00154"></a>00154 <span class="preprocessor">        ASSERT(m) \</span>
<a name="l00155"></a>00155 <span class="preprocessor">        Ptr&lt;SlotLink&gt; sl( \</span>
<a name="l00156"></a>00156 <span class="preprocessor">                        static_cast&lt;SlotLink*&gt;(new WeakRefMethodSlot##num_meth_params&lt;T_Ob, T_Ret&gt;(o, m)) \</span>
<a name="l00157"></a>00157 <span class="preprocessor">                ); \</span>
<a name="l00158"></a>00158 <span class="preprocessor">        ting::Mutex::Guard mutexGuard(this-&gt;mutex); \</span>
<a name="l00159"></a>00159 <span class="preprocessor">        this-&gt;slotLink.push_back(sl); \</span>
<a name="l00160"></a>00160 <span class="preprocessor">}</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span>
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00164"></a>00164 <span class="comment">//Search for existing connection to a given function</span>
<a name="l00165"></a><a class="code" href="Signal_8hpp.htm#a286f87d7166842083364fdedcf375808">00165</a> <span class="preprocessor">#define M_SEARCH_FUNCSLOT(num_func_params, num_sig_params) \</span>
<a name="l00166"></a>00166 <span class="preprocessor">template &lt;class T_Ret&gt; T_SlotLinkIter SearchFuncSlot(T_Ret(*f)(M_FUNC_PARAM_TYPES(num_func_params))){ \</span>
<a name="l00167"></a>00167 <span class="preprocessor">        ASSERT(f) \</span>
<a name="l00168"></a>00168 <span class="preprocessor">        for(T_SlotLinkIter i = this-&gt;slotLink.begin(); i != this-&gt;slotLink.end(); ++i){ \</span>
<a name="l00169"></a>00169 <span class="preprocessor">                FuncSlot##num_func_params&lt;T_Ret&gt; *slot = \</span>
<a name="l00170"></a>00170 <span class="preprocessor">                                dynamic_cast&lt;FuncSlot##num_func_params&lt;T_Ret&gt;* &gt;( \</span>
<a name="l00171"></a>00171 <span class="preprocessor">                                                (*i).operator-&gt;() \</span>
<a name="l00172"></a>00172 <span class="preprocessor">                                        ) \</span>
<a name="l00173"></a>00173 <span class="preprocessor">                        ; \</span>
<a name="l00174"></a>00174 <span class="preprocessor">                if(slot){ \</span>
<a name="l00175"></a>00175 <span class="preprocessor">                        if(slot-&gt;f == f){ \</span>
<a name="l00176"></a>00176 <span class="preprocessor">                                return i; \</span>
<a name="l00177"></a>00177 <span class="preprocessor">                        } \</span>
<a name="l00178"></a>00178 <span class="preprocessor">                } \</span>
<a name="l00179"></a>00179 <span class="preprocessor">        } \</span>
<a name="l00180"></a>00180 <span class="preprocessor">        return this-&gt;slotLink.end(); \</span>
<a name="l00181"></a>00181 <span class="preprocessor">}</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span>
<a name="l00183"></a>00183 <span class="comment">//Search for existing connection to a given object-method slot</span>
<a name="l00184"></a><a class="code" href="Signal_8hpp.htm#a4ccf98921746c7f4f3115f195c41f6a8">00184</a> <span class="preprocessor">#define M_SEARCH_METHSLOT(num_meth_params, unused) \</span>
<a name="l00185"></a>00185 <span class="preprocessor">template &lt;class T_Ob, class T_Ret&gt; T_SlotLinkIter SearchMethSlot( \</span>
<a name="l00186"></a>00186 <span class="preprocessor">                T_Ob* o, \</span>
<a name="l00187"></a>00187 <span class="preprocessor">                T_Ret(T_Ob::*m)(M_FUNC_PARAM_TYPES(num_meth_params)) \</span>
<a name="l00188"></a>00188 <span class="preprocessor">        ) \</span>
<a name="l00189"></a>00189 <span class="preprocessor">{ \</span>
<a name="l00190"></a>00190 <span class="preprocessor">        ASSERT(o) \</span>
<a name="l00191"></a>00191 <span class="preprocessor">        ASSERT(m) \</span>
<a name="l00192"></a>00192 <span class="preprocessor">        for(T_SlotLinkIter i = this-&gt;slotLink.begin(); i != this-&gt;slotLink.end(); ++i){ \</span>
<a name="l00193"></a>00193 <span class="preprocessor">                MethodSlot##num_meth_params&lt;T_Ob, T_Ret&gt; *slot = \</span>
<a name="l00194"></a>00194 <span class="preprocessor">                                dynamic_cast&lt;MethodSlot##num_meth_params&lt;T_Ob, T_Ret&gt;* &gt;( \</span>
<a name="l00195"></a>00195 <span class="preprocessor">                                                (*i).operator-&gt;() \</span>
<a name="l00196"></a>00196 <span class="preprocessor">                                        ) \</span>
<a name="l00197"></a>00197 <span class="preprocessor">                        ; \</span>
<a name="l00198"></a>00198 <span class="preprocessor">                if(slot){ \</span>
<a name="l00199"></a>00199 <span class="preprocessor">                        if(slot-&gt;m == m &amp;&amp; slot-&gt;o == o){ \</span>
<a name="l00200"></a>00200 <span class="preprocessor">                                return i; \</span>
<a name="l00201"></a>00201 <span class="preprocessor">                        } \</span>
<a name="l00202"></a>00202 <span class="preprocessor">                } \</span>
<a name="l00203"></a>00203 <span class="preprocessor">        } \</span>
<a name="l00204"></a>00204 <span class="preprocessor">        return this-&gt;slotLink.end(); \</span>
<a name="l00205"></a>00205 <span class="preprocessor">}</span>
<a name="l00206"></a>00206 <span class="preprocessor"></span>
<a name="l00207"></a>00207 <span class="comment">//Search for existing connection to a given WeakRef_object-method slot</span>
<a name="l00208"></a><a class="code" href="Signal_8hpp.htm#a62792d50ace6e73082e82fc7e0056da6">00208</a> <span class="preprocessor">#define M_SEARCH_METHSLOT_WEAKREF(num_meth_params, unused) \</span>
<a name="l00209"></a>00209 <span class="preprocessor">template &lt;class T_Ob, class T_Ret&gt; T_SlotLinkIter SearchWeakRefMethSlot( \</span>
<a name="l00210"></a>00210 <span class="preprocessor">                ting::WeakRef&lt;T_Ob&gt;&amp; o, \</span>
<a name="l00211"></a>00211 <span class="preprocessor">                T_Ret(T_Ob::*m)(M_FUNC_PARAM_TYPES(num_meth_params)) \</span>
<a name="l00212"></a>00212 <span class="preprocessor">        ) \</span>
<a name="l00213"></a>00213 <span class="preprocessor">{ \</span>
<a name="l00214"></a>00214 <span class="preprocessor">        ASSERT(m) \</span>
<a name="l00215"></a>00215 <span class="preprocessor">        ting::Ref&lt;T_Ob&gt; ho(o); \</span>
<a name="l00216"></a>00216 <span class="preprocessor">        for(T_SlotLinkIter i = this-&gt;slotLink.begin(); i != this-&gt;slotLink.end(); ++i){ \</span>
<a name="l00217"></a>00217 <span class="preprocessor">                WeakRefMethodSlot##num_meth_params&lt;T_Ob, T_Ret&gt; *slot = \</span>
<a name="l00218"></a>00218 <span class="preprocessor">                                dynamic_cast&lt;WeakRefMethodSlot##num_meth_params&lt;T_Ob, T_Ret&gt;* &gt;( \</span>
<a name="l00219"></a>00219 <span class="preprocessor">                                                (*i).operator-&gt;() \</span>
<a name="l00220"></a>00220 <span class="preprocessor">                                        ) \</span>
<a name="l00221"></a>00221 <span class="preprocessor">                        ; \</span>
<a name="l00222"></a>00222 <span class="preprocessor">                if(slot){ \</span>
<a name="l00223"></a>00223 <span class="preprocessor">                        ting::Ref&lt;T_Ob&gt; hso(slot-&gt;o); \</span>
<a name="l00224"></a>00224 <span class="preprocessor">                        if(slot-&gt;m == m &amp;&amp; ho == hso){ \</span>
<a name="l00225"></a>00225 <span class="preprocessor">                                return i; \</span>
<a name="l00226"></a>00226 <span class="preprocessor">                        } \</span>
<a name="l00227"></a>00227 <span class="preprocessor">                } \</span>
<a name="l00228"></a>00228 <span class="preprocessor">        } \</span>
<a name="l00229"></a>00229 <span class="preprocessor">        return this-&gt;slotLink.end(); \</span>
<a name="l00230"></a>00230 <span class="preprocessor">}</span>
<a name="l00231"></a>00231 <span class="preprocessor"></span>
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 <span class="comment">//Disconnect function slot</span>
<a name="l00235"></a><a class="code" href="Signal_8hpp.htm#a6cde0218a676f99158784bdda8e6c7ba">00235</a> <span class="preprocessor">#define M_DISCONNECT_FUNC(num_func_params, unused) \</span>
<a name="l00236"></a>00236 <span class="preprocessor">template &lt;class T_Ret&gt; bool Disconnect(T_Ret(*f)(M_FUNC_PARAM_TYPES(num_func_params))){ \</span>
<a name="l00237"></a>00237 <span class="preprocessor">        ASSERT(f) \</span>
<a name="l00238"></a>00238 <span class="preprocessor">        ting::Mutex::Guard mutexGuard(this-&gt;mutex); \</span>
<a name="l00239"></a>00239 <span class="preprocessor">        T_SlotLinkIter i = this-&gt;SearchFuncSlot(f); \</span>
<a name="l00240"></a>00240 <span class="preprocessor">        if(i != this-&gt;slotLink.end()){ \</span>
<a name="l00241"></a>00241 <span class="preprocessor">                this-&gt;slotLink.erase(i); \</span>
<a name="l00242"></a>00242 <span class="preprocessor">                return true; \</span>
<a name="l00243"></a>00243 <span class="preprocessor">        } \</span>
<a name="l00244"></a>00244 <span class="preprocessor">        return false; \</span>
<a name="l00245"></a>00245 <span class="preprocessor">}</span>
<a name="l00246"></a>00246 <span class="preprocessor"></span>
<a name="l00247"></a>00247 <span class="comment">//Disconnect object-method slot</span>
<a name="l00248"></a><a class="code" href="Signal_8hpp.htm#a4543e92ad3a8bfd1a19f2a7e69803af1">00248</a> <span class="preprocessor">#define M_DISCONNECT_METH(num_meth_params, unused) \</span>
<a name="l00249"></a>00249 <span class="preprocessor">template &lt;class T_Ob, class T_Ret&gt; bool Disconnect( \</span>
<a name="l00250"></a>00250 <span class="preprocessor">                T_Ob* o, \</span>
<a name="l00251"></a>00251 <span class="preprocessor">                T_Ret(T_Ob::*m)(M_FUNC_PARAM_TYPES(num_meth_params)) \</span>
<a name="l00252"></a>00252 <span class="preprocessor">        ) \</span>
<a name="l00253"></a>00253 <span class="preprocessor">{ \</span>
<a name="l00254"></a>00254 <span class="preprocessor">        ASSERT(o) \</span>
<a name="l00255"></a>00255 <span class="preprocessor">        ASSERT(m) \</span>
<a name="l00256"></a>00256 <span class="preprocessor">        ting::Mutex::Guard mutexGuard(this-&gt;mutex); \</span>
<a name="l00257"></a>00257 <span class="preprocessor">        T_SlotLinkIter i = this-&gt;SearchMethSlot(o, m); \</span>
<a name="l00258"></a>00258 <span class="preprocessor">        if(i != this-&gt;slotLink.end()){ \</span>
<a name="l00259"></a>00259 <span class="preprocessor">                this-&gt;slotLink.erase(i); \</span>
<a name="l00260"></a>00260 <span class="preprocessor">                return true; \</span>
<a name="l00261"></a>00261 <span class="preprocessor">        } \</span>
<a name="l00262"></a>00262 <span class="preprocessor">        return false; \</span>
<a name="l00263"></a>00263 <span class="preprocessor">}</span>
<a name="l00264"></a>00264 <span class="preprocessor"></span>
<a name="l00265"></a>00265 <span class="comment">//Disconnect WeakRef_object-method slot</span>
<a name="l00266"></a><a class="code" href="Signal_8hpp.htm#ac325140e2b014c5531179f607f0fe7fb">00266</a> <span class="preprocessor">#define M_DISCONNECT_METH_WEAKREF(num_meth_params, unused) \</span>
<a name="l00267"></a>00267 <span class="preprocessor">template &lt;class T_Ob, class T_Ret&gt; bool Disconnect( \</span>
<a name="l00268"></a>00268 <span class="preprocessor">                ting::WeakRef&lt;T_Ob&gt;&amp; o, \</span>
<a name="l00269"></a>00269 <span class="preprocessor">                T_Ret(T_Ob::*m)(M_FUNC_PARAM_TYPES(num_meth_params)) \</span>
<a name="l00270"></a>00270 <span class="preprocessor">        ) \</span>
<a name="l00271"></a>00271 <span class="preprocessor">{ \</span>
<a name="l00272"></a>00272 <span class="preprocessor">        ASSERT(m) \</span>
<a name="l00273"></a>00273 <span class="preprocessor">        ting::Mutex::Guard mutexGuard(this-&gt;mutex); \</span>
<a name="l00274"></a>00274 <span class="preprocessor">        T_SlotLinkIter i = this-&gt;SearchWeakRefMethSlot(o, m); \</span>
<a name="l00275"></a>00275 <span class="preprocessor">        if(i != this-&gt;slotLink.end()){ \</span>
<a name="l00276"></a>00276 <span class="preprocessor">                this-&gt;slotLink.erase(i); \</span>
<a name="l00277"></a>00277 <span class="preprocessor">                return true; \</span>
<a name="l00278"></a>00278 <span class="preprocessor">        } \</span>
<a name="l00279"></a>00279 <span class="preprocessor">        return false; \</span>
<a name="l00280"></a>00280 <span class="preprocessor">}</span>
<a name="l00281"></a>00281 <span class="preprocessor"></span>
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="comment">//TODO:</span>
<a name="l00285"></a>00285 <span class="comment">//  - add IsConnected(obj, method) family of functions</span>
<a name="l00286"></a>00286 
<a name="l00287"></a>00287 <span class="comment">//</span>
<a name="l00288"></a>00288 <span class="comment">// M   M        SSSS IIIII  GGG  N   N  AAA  L</span>
<a name="l00289"></a>00289 <span class="comment">// MM MM       S       I   G     NN  N A   A L</span>
<a name="l00290"></a>00290 <span class="comment">// M M M        SSS    I   G  GG N N N A   A L</span>
<a name="l00291"></a>00291 <span class="comment">// M   M           S   I   G   G N  NN AAAAA L</span>
<a name="l00292"></a>00292 <span class="comment">// M   M _____ SSSS  IIIII  GGG  N   N A   A LLLLL</span>
<a name="l00293"></a>00293 <span class="comment">//</span>
<a name="l00294"></a>00294 <span class="comment">//output a template for a signal with n parameters</span>
<a name="l00295"></a><a class="code" href="Signal_8hpp.htm#a551ea506f7229775331532a0663e4af9">00295</a> <span class="preprocessor">#define M_SIGNAL(n, unused) \</span>
<a name="l00296"></a>00296 <span class="preprocessor">M_TEMPLATE(n) class Signal##n{ \</span>
<a name="l00297"></a>00297 <span class="preprocessor">        class SlotLink{ \</span>
<a name="l00298"></a>00298 <span class="preprocessor">        public: \</span>
<a name="l00299"></a>00299 <span class="preprocessor">                virtual ~SlotLink(){} \</span>
<a name="l00300"></a>00300 <span class="preprocessor">                virtual bool Execute(M_FUNC_PARAMS_FULL(n)) = 0; \</span>
<a name="l00301"></a>00301 <span class="preprocessor">        }; \</span>
<a name="l00302"></a>00302 <span class="preprocessor">\</span>
<a name="l00303"></a>00303 <span class="preprocessor">        M_REPEAT2(M_INCREMENT(n), M_METHOD_SLOT, n) \</span>
<a name="l00304"></a>00304 <span class="preprocessor">        M_REPEAT2(M_INCREMENT(n), M_FUNC_SLOT, n) \</span>
<a name="l00305"></a>00305 <span class="preprocessor">        M_REPEAT2(M_INCREMENT(n), M_METHOD_WEAKREF_SLOT, n) \</span>
<a name="l00306"></a>00306 <span class="preprocessor">\</span>
<a name="l00307"></a>00307 <span class="preprocessor">        typedef std::vector&lt;Ptr&lt;SlotLink&gt; &gt; T_SlotLinkList; \</span>
<a name="l00308"></a>00308 <span class="preprocessor">        typedef M_IF_NOT_0(n, typename, ) T_SlotLinkList::iterator T_SlotLinkIter; \</span>
<a name="l00309"></a>00309 <span class="preprocessor">        T_SlotLinkList slotLink; \</span>
<a name="l00310"></a>00310 <span class="preprocessor">\</span>
<a name="l00311"></a>00311 <span class="preprocessor">        M_REPEAT2(M_INCREMENT(n), M_SEARCH_FUNCSLOT, n) \</span>
<a name="l00312"></a>00312 <span class="preprocessor">        M_REPEAT2(M_INCREMENT(n), M_SEARCH_METHSLOT, n) \</span>
<a name="l00313"></a>00313 <span class="preprocessor">        M_REPEAT2(M_INCREMENT(n), M_SEARCH_METHSLOT_WEAKREF, n) \</span>
<a name="l00314"></a>00314 <span class="preprocessor">\</span>
<a name="l00315"></a>00315 <span class="preprocessor">        ting::Mutex mutex; \</span>
<a name="l00316"></a>00316 <span class="preprocessor">\</span>
<a name="l00317"></a>00317 <span class="preprocessor">public: \</span>
<a name="l00318"></a>00318 <span class="preprocessor">        void Emit(M_FUNC_PARAMS_FULL(n)){ \</span>
<a name="l00319"></a>00319 <span class="preprocessor">                ting::Mutex::Guard mutexGuard(this-&gt;mutex); \</span>
<a name="l00320"></a>00320 <span class="preprocessor">                for(T_SlotLinkIter i = this-&gt;slotLink.begin(); i != this-&gt;slotLink.end();){ \</span>
<a name="l00321"></a>00321 <span class="preprocessor">                        if((*i)-&gt;Execute(M_FUNC_PARAM_NAMES(n))){ \</span>
<a name="l00322"></a>00322 <span class="preprocessor">                                i = this-&gt;slotLink.erase(i); \</span>
<a name="l00323"></a>00323 <span class="preprocessor">                        }else{ \</span>
<a name="l00324"></a>00324 <span class="preprocessor">                                ++i; \</span>
<a name="l00325"></a>00325 <span class="preprocessor">                        } \</span>
<a name="l00326"></a>00326 <span class="preprocessor">                } \</span>
<a name="l00327"></a>00327 <span class="preprocessor">        } \</span>
<a name="l00328"></a>00328 <span class="preprocessor">\</span>
<a name="l00329"></a>00329 <span class="preprocessor">        M_REPEAT2(M_INCREMENT(n), M_CONNECT_FUNC, ) \</span>
<a name="l00330"></a>00330 <span class="preprocessor">        M_REPEAT2(M_INCREMENT(n), M_CONNECT_METH, ) \</span>
<a name="l00331"></a>00331 <span class="preprocessor">        M_REPEAT2(M_INCREMENT(n), M_CONNECT_METH_WEAKREF, ) \</span>
<a name="l00332"></a>00332 <span class="preprocessor">\</span>
<a name="l00333"></a>00333 <span class="preprocessor">        M_REPEAT2(M_INCREMENT(n), M_DISCONNECT_FUNC, ) \</span>
<a name="l00334"></a>00334 <span class="preprocessor">        M_REPEAT2(M_INCREMENT(n), M_DISCONNECT_METH, ) \</span>
<a name="l00335"></a>00335 <span class="preprocessor">        M_REPEAT2(M_INCREMENT(n), M_DISCONNECT_METH_WEAKREF, ) \</span>
<a name="l00336"></a>00336 <span class="preprocessor">\</span>
<a name="l00337"></a>00337 <span class="preprocessor">        void DisconnectAll(){ \</span>
<a name="l00338"></a>00338 <span class="preprocessor">                ting::Mutex::Guard mutexGuard(this-&gt;mutex); \</span>
<a name="l00339"></a>00339 <span class="preprocessor">                this-&gt;slotLink.clear(); \</span>
<a name="l00340"></a>00340 <span class="preprocessor">        } \</span>
<a name="l00341"></a>00341 <span class="preprocessor">\</span>
<a name="l00342"></a>00342 <span class="preprocessor">        inline unsigned NumConnections()const{ \</span>
<a name="l00343"></a>00343 <span class="preprocessor">                return this-&gt;slotLink.size(); \</span>
<a name="l00344"></a>00344 <span class="preprocessor">        } \</span>
<a name="l00345"></a>00345 <span class="preprocessor">};</span>
<a name="l00346"></a>00346 <span class="preprocessor"></span>
<a name="l00347"></a>00347 
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 <span class="keyword">namespace </span>ting{
<a name="l00350"></a>00350 
<a name="l00351"></a>00351 <a class="code" href="codegen_8h.htm#a6ddb73610997b58b3f88ae6562bd9359">M_REPEAT3</a>(<a class="code" href="Signal_8hpp.htm#a9787dae13801fca2d795c0f4621bb189">M_MAX_NUM_SIG_PARAMETERS</a>, <a class="code" href="Signal_8hpp.htm#a551ea506f7229775331532a0663e4af9">M_SIGNAL</a>, )
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 }<span class="comment">//~namespace ting</span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
