<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: ting::Thread Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceting.htm">ting</a>::<a class="el" href="classting_1_1Thread.htm">Thread</a>
  </div>
</div>
<div class="contents">
<h1>ting::Thread Class Reference</h1><!-- doxytag: class="ting::Thread" -->
<p>a base class for threads.  
<a href="#_details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Thread_8hpp_source.htm">Thread.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ting::Thread:</div>
<div class="dynsection">
 <div class="center">
  <img src="classting_1_1Thread.gif" usemap="#ting::Thread_map" alt=""/>
  <map id="ting::Thread_map" name="ting::Thread_map">
<area href="classting_1_1MsgThread.htm" alt="ting::MsgThread" shape="rect" coords="0,56,102,80"/>
</map>
 </div>
</div>

<p><a href="classting_1_1Thread-members.htm">List of all members.</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Thread.htm#ac2bb57a426b2935afb8c9ef64b463a9f">Thread</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Thread.htm#af561ed1a1dafa9160d4b62107a34537f">~Thread</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Thread.htm#ad8eb116638d8b7af1a1df99ec15fbe9b">Run</a> ()=0</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This should be overriden, this is what to be run in new thread.  <a href="#ad8eb116638d8b7af1a1df99ec15fbe9b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Thread.htm#ac4450d86b2a69de26ed246eb7cd487c8">Start</a> (unsigned stackSize=0)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Start thread execution.  <a href="#ac4450d86b2a69de26ed246eb7cd487c8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Thread.htm#a9003fe37567b9db72eabce12bd5b4e83">Join</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Wait for thread to finish its execution.  <a href="#a9003fe37567b9db72eabce12bd5b4e83"></a><br/></td></tr>
<tr><td colspan="2"><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Thread.htm#a0dd3df130ca9de000129a552bf2dee46">Sleep</a> (unsigned msec=0)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Suspend the thread for a given number of milliseconds.  <a href="#a0dd3df130ca9de000129a552bf2dee46"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Thread.htm#aaca08c1818bfcd0435f0c61552b6dc60">GetCurrentThreadID</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">get current thread ID.  <a href="#aaca08c1818bfcd0435f0c61552b6dc60"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>a base class for threads. </p>
<p>This class should be used as a base class for thread objects, one should override the <a class="el" href="classting_1_1Thread.htm#ad8eb116638d8b7af1a1df99ec15fbe9b" title="This should be overriden, this is what to be run in new thread.">Thread::Run()</a> method. </p>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ac2bb57a426b2935afb8c9ef64b463a9f"></a><!-- doxytag: member="ting::Thread::Thread" ref="ac2bb57a426b2935afb8c9ef64b463a9f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ting::Thread::Thread </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="af561ed1a1dafa9160d4b62107a34537f"></a><!-- doxytag: member="ting::Thread::~Thread" ref="af561ed1a1dafa9160d4b62107a34537f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual ting::Thread::~Thread </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="aaca08c1818bfcd0435f0c61552b6dc60"></a><!-- doxytag: member="ting::Thread::GetCurrentThreadID" ref="aaca08c1818bfcd0435f0c61552b6dc60" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned ting::Thread::GetCurrentThreadID </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get current thread ID. </p>
<p>Returns unique identifier of the currently executing thread. This ID can further be used to make assertions to make sure that some code is executed in a specific thread. E.g. assert that methods of some object are executed in the same thread where this object was creatged. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>uniqie thread identifier. </dd></dl>

</div>
</div>
<a class="anchor" id="a9003fe37567b9db72eabce12bd5b4e83"></a><!-- doxytag: member="ting::Thread::Join" ref="a9003fe37567b9db72eabce12bd5b4e83" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ting::Thread::Join </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Wait for thread to finish its execution. </p>
<p>This functon waits for the thread finishes its execution, i.e. until the thread returns from its <a class="el" href="classting_1_1Thread.htm#ad8eb116638d8b7af1a1df99ec15fbe9b" title="This should be overriden, this is what to be run in new thread.">Thread::Run()</a> method. Note: it is safe to call <a class="el" href="classting_1_1Thread.htm#a9003fe37567b9db72eabce12bd5b4e83" title="Wait for thread to finish its execution.">Join()</a> on not started threads, in that case it will return immediately. </p>

</div>
</div>
<a class="anchor" id="ad8eb116638d8b7af1a1df99ec15fbe9b"></a><!-- doxytag: member="ting::Thread::Run" ref="ad8eb116638d8b7af1a1df99ec15fbe9b" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void ting::Thread::Run </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This should be overriden, this is what to be run in new thread. </p>
<p>Pure virtual method, it is called in new thread when thread runs. </p>

</div>
</div>
<a class="anchor" id="a0dd3df130ca9de000129a552bf2dee46"></a><!-- doxytag: member="ting::Thread::Sleep" ref="a0dd3df130ca9de000129a552bf2dee46" args="(unsigned msec=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ting::Thread::Sleep </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>msec</em> = <code>0</code></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Suspend the thread for a given number of milliseconds. </p>
<p>Suspends the thread which called this function for a given number of milliseconds. This function guarantees that the calling thread will be suspended for AT LEAST 'msec' milliseconds. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>msec</em>&nbsp;</td><td>- number of milliseconds the thread should be suspended. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac4450d86b2a69de26ed246eb7cd487c8"></a><!-- doxytag: member="ting::Thread::Start" ref="ac4450d86b2a69de26ed246eb7cd487c8" args="(unsigned stackSize=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ting::Thread::Start </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>stackSize</em> = <code>0</code></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Start thread execution. </p>
<p>Starts execution of the thread. Thread's <a class="el" href="classting_1_1Thread.htm#ad8eb116638d8b7af1a1df99ec15fbe9b" title="This should be overriden, this is what to be run in new thread.">Thread::Run()</a> method will be run as separate thread of execution. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>stackSize</em>&nbsp;</td><td>- size of the stack in bytes which should be allocated for this thread. If stackSize is 0 then system default stack size is used. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Thread_8hpp_source.htm">Thread.hpp</a></li>
</ul>
</div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
