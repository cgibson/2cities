<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: WaitSet.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>WaitSet.hpp</h1><a href="WaitSet_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2009-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;cerrno&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm" title="Debug utilities.">debug.hpp</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="Exc_8hpp.htm" title="Basic Exception class.">Exc.hpp</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="Array_8hpp.htm" title="automatic array class. Array class, it is an auto pointer for new[] / delete[].">Array.hpp</a>&quot;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="preprocessor">#if defined(__WIN32__) || defined(WIN32)</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">#ifndef __WIN32__</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#define __WIN32__</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#ifndef WIN32</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">#define WIN32</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &lt;windows.h&gt;</span>
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="preprocessor">#else //assume *nix</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span><span class="preprocessor">#include &lt;sys/epoll.h&gt;</span>
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="preprocessor">#endif</span>
<a name="l00059"></a>00059 <span class="preprocessor"></span>
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 <span class="comment">//if Microsoft MSVC compiler,</span>
<a name="l00062"></a>00062 <span class="comment">//then disable warning about throw specification is ignored.</span>
<a name="l00063"></a>00063 <span class="preprocessor">#ifdef _MSC_VER</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span><span class="preprocessor">#pragma warning(push) //push warnings state</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">#pragma warning( disable : 4290)</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span>
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="keyword">namespace </span>ting{
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 
<a name="l00077"></a><a class="code" href="classting_1_1Waitable.htm">00077</a> <span class="keyword">class </span><a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>{
<a name="l00078"></a><a class="code" href="classting_1_1Waitable.htm#afce7603b771a811ca6d9d25f27149773">00078</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1WaitSet.htm" title="Set of Waitable objects to wait for.">WaitSet</a>;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080         <span class="keywordtype">bool</span> isAdded;
<a name="l00081"></a>00081 
<a name="l00082"></a>00082         <span class="keywordtype">void</span>* userData;
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="keyword">public</span>:
<a name="l00085"></a><a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abe">00085</a>         <span class="keyword">enum</span> <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abe">EReadinessFlags</a>{
<a name="l00086"></a><a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaad54d466c6ce198aad8115773b3abf1b">00086</a>                 <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaad54d466c6ce198aad8115773b3abf1b">NOT_READY</a> = 0,      <span class="comment">// bin: 00000000</span>
<a name="l00087"></a><a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">00087</a>                 <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">READ</a> = 1,           <span class="comment">// bin: 00000001</span>
<a name="l00088"></a><a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">00088</a>                 <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">WRITE</a> = 2,          <span class="comment">// bin: 00000010</span>
<a name="l00089"></a><a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaaceab4f998e5df47f9cf4f20dba89460">00089</a>                 <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaaceab4f998e5df47f9cf4f20dba89460">READ_AND_WRITE</a> = 3  <span class="comment">// bin: 00000011</span>
<a name="l00090"></a>00090         };
<a name="l00091"></a>00091         
<a name="l00092"></a>00092 <span class="keyword">protected</span>:
<a name="l00093"></a><a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">00093</a>         <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> <a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">readinessFlags</a>;
<a name="l00094"></a>00094 
<a name="l00095"></a><a class="code" href="classting_1_1Waitable.htm#a9cb812eaea0bd35bce31c14b755940a6">00095</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Waitable.htm#a9cb812eaea0bd35bce31c14b755940a6">Waitable</a>() :
<a name="l00096"></a>00096                         isAdded(false),
<a name="l00097"></a>00097                         userData(0),
<a name="l00098"></a>00098                         <a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">readinessFlags</a>(<a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaad54d466c6ce198aad8115773b3abf1b">NOT_READY</a>)
<a name="l00099"></a>00099         {}
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 
<a name="l00103"></a>00103         <span class="comment">//TODO: write doxygen comments</span>
<a name="l00104"></a><a class="code" href="classting_1_1Waitable.htm#a24f9d8bba51de7b3ec7b447279361130">00104</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Waitable.htm#a9cb812eaea0bd35bce31c14b755940a6">Waitable</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp; w) :
<a name="l00105"></a>00105                         isAdded(false),
<a name="l00106"></a>00106                         userData(w.userData),
<a name="l00107"></a>00107                         <a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">readinessFlags</a>(<a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaad54d466c6ce198aad8115773b3abf1b">NOT_READY</a>)<span class="comment">//Treat copied Waitable as NOT_READY</span>
<a name="l00108"></a>00108         {
<a name="l00109"></a>00109                 <span class="comment">//cannot copy from waitable which is added to WaitSet</span>
<a name="l00110"></a>00110                 <span class="keywordflow">if</span>(w.isAdded)
<a name="l00111"></a>00111                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Waitable::Waitable(copy): cannot copy Waitable which is added to WaitSet&quot;</span>);
<a name="l00112"></a>00112 
<a name="l00113"></a>00113                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp;<span class="keyword">&gt;</span>(w).<a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">ClearAllReadinessFlags</a>();
<a name="l00114"></a>00114                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp;<span class="keyword">&gt;</span>(w).userData = 0;
<a name="l00115"></a>00115         }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00119"></a>00119         <span class="comment">//TODO: write doxygen comments</span>
<a name="l00120"></a><a class="code" href="classting_1_1Waitable.htm#a9a732341413d7ebd2b9a610adaeb3ea1">00120</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp; <a class="code" href="classting_1_1Waitable.htm#a9a732341413d7ebd2b9a610adaeb3ea1">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp; w){
<a name="l00121"></a>00121                 <span class="comment">//cannot copy because this Waitable is added to WaitSet</span>
<a name="l00122"></a>00122                 <span class="keywordflow">if</span>(this-&gt;isAdded)
<a name="l00123"></a>00123                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Waitable::Waitable(copy): cannot copy while this Waitable is added to WaitSet&quot;</span>);
<a name="l00124"></a>00124 
<a name="l00125"></a>00125                 <span class="comment">//cannot copy from waitable which is adde to WaitSet</span>
<a name="l00126"></a>00126                 <span class="keywordflow">if</span>(w.isAdded)
<a name="l00127"></a>00127                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Waitable::Waitable(copy): cannot copy Waitable which is added to WaitSet&quot;</span>);
<a name="l00128"></a>00128                 
<a name="l00129"></a>00129                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(!this-&gt;isAdded)
<a name="l00130"></a>00130 
<a name="l00131"></a>00131                 <span class="comment">//Clear readiness flags on copying.</span>
<a name="l00132"></a>00132                 <span class="comment">//Will need to wait for readiness again, using the WaitSet.</span>
<a name="l00133"></a>00133                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">ClearAllReadinessFlags</a>();
<a name="l00134"></a>00134                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp;<span class="keyword">&gt;</span>(w).<a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">ClearAllReadinessFlags</a>();
<a name="l00135"></a>00135 
<a name="l00136"></a>00136                 this-&gt;userData = w.userData;
<a name="l00137"></a>00137                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp;<span class="keyword">&gt;</span>(w).userData = 0;
<a name="l00138"></a>00138                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00139"></a>00139         }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 
<a name="l00143"></a><a class="code" href="classting_1_1Waitable.htm#a88ad92a99e4828aa5d5003dcabfb97b8">00143</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#a88ad92a99e4828aa5d5003dcabfb97b8">SetCanReadFlag</a>(){
<a name="l00144"></a>00144                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">readinessFlags</a> |= <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">READ</a>;
<a name="l00145"></a>00145         }
<a name="l00146"></a>00146 
<a name="l00147"></a><a class="code" href="classting_1_1Waitable.htm#ae7a518cea602c4d2c050d0f0faa4902d">00147</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#ae7a518cea602c4d2c050d0f0faa4902d">ClearCanReadFlag</a>(){
<a name="l00148"></a>00148                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">readinessFlags</a> &amp;= (~<a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">READ</a>);
<a name="l00149"></a>00149         }
<a name="l00150"></a>00150 
<a name="l00151"></a><a class="code" href="classting_1_1Waitable.htm#aa65a87874bfe89d950901948176184d5">00151</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#aa65a87874bfe89d950901948176184d5">SetCanWriteFlag</a>(){
<a name="l00152"></a>00152                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">readinessFlags</a> |= <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">WRITE</a>;
<a name="l00153"></a>00153         }
<a name="l00154"></a>00154 
<a name="l00155"></a><a class="code" href="classting_1_1Waitable.htm#af593425a807d59fbef4c0206dcd91935">00155</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#af593425a807d59fbef4c0206dcd91935">ClearCanWriteFlag</a>(){
<a name="l00156"></a>00156                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">readinessFlags</a> &amp;= (~<a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">WRITE</a>);
<a name="l00157"></a>00157         }
<a name="l00158"></a>00158 
<a name="l00159"></a><a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">00159</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">ClearAllReadinessFlags</a>(){
<a name="l00160"></a>00160                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">readinessFlags</a> = <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaad54d466c6ce198aad8115773b3abf1b">NOT_READY</a>;
<a name="l00161"></a>00161         }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 <span class="keyword">public</span>:
<a name="l00164"></a><a class="code" href="classting_1_1Waitable.htm#a5bbd882bcbe8c4a690a706b77b32637e">00164</a>         <span class="keyword">virtual</span> <a class="code" href="classting_1_1Waitable.htm#a5bbd882bcbe8c4a690a706b77b32637e">~Waitable</a>(){
<a name="l00165"></a>00165                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(!this-&gt;isAdded)
<a name="l00166"></a>00166         }
<a name="l00167"></a>00167 
<a name="l00168"></a><a class="code" href="classting_1_1Waitable.htm#a3fba19627cd194aaa1153760ccf85091">00168</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Waitable.htm#a3fba19627cd194aaa1153760ccf85091">CanRead</a>()<span class="keyword">const</span>{
<a name="l00169"></a>00169                 <span class="keywordflow">return</span> (this-&gt;<a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">readinessFlags</a> &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">READ</a>) != 0;
<a name="l00170"></a>00170         }
<a name="l00171"></a>00171 
<a name="l00172"></a><a class="code" href="classting_1_1Waitable.htm#abac837a916df462a0c1888941834d93d">00172</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Waitable.htm#abac837a916df462a0c1888941834d93d">CanWrite</a>()<span class="keyword">const</span>{
<a name="l00173"></a>00173                 <span class="keywordflow">return</span> (this-&gt;<a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">readinessFlags</a> &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">WRITE</a>) != 0;
<a name="l00174"></a>00174         }
<a name="l00175"></a>00175 
<a name="l00176"></a><a class="code" href="classting_1_1Waitable.htm#aa773fa77eaafc97f7da9133444152bee">00176</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span>* <a class="code" href="classting_1_1Waitable.htm#aa773fa77eaafc97f7da9133444152bee">GetUserData</a>(){
<a name="l00177"></a>00177                 <span class="keywordflow">return</span> this-&gt;userData;
<a name="l00178"></a>00178         }
<a name="l00179"></a>00179 
<a name="l00180"></a><a class="code" href="classting_1_1Waitable.htm#a1706e88628091350339ef217eebfdd0f">00180</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#a1706e88628091350339ef217eebfdd0f">SetUserData</a>(<span class="keywordtype">void</span>* data){
<a name="l00181"></a>00181                 this-&gt;userData = data;
<a name="l00182"></a>00182         }
<a name="l00183"></a>00183 
<a name="l00184"></a>00184 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00185"></a>00185 <span class="preprocessor"></span><span class="keyword">protected</span>:
<a name="l00186"></a>00186         <span class="keyword">virtual</span> HANDLE <a class="code" href="classting_1_1Waitable.htm#a68f6754652add3ab0520464aca6cada1">GetHandle</a>() = 0;
<a name="l00187"></a>00187 
<a name="l00188"></a>00188         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWaitingEvents(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> <span class="comment">/*flagsToWaitFor*/</span>){}
<a name="l00189"></a>00189 
<a name="l00190"></a>00190         <span class="comment">//returns true if signalled</span>
<a name="l00191"></a>00191         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> CheckSignalled(){
<a name="l00192"></a>00192                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Waitable.htm#ad62d9d11aba168d9908bcde2634d3f0b">readinessFlags</a> != 0;
<a name="l00193"></a>00193         }
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="preprocessor">#else //assume *nix</span>
<a name="l00198"></a>00198 <span class="preprocessor"></span><span class="keyword">protected</span>:
<a name="l00199"></a>00199         <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classting_1_1Waitable.htm#a68f6754652add3ab0520464aca6cada1">GetHandle</a>() = 0;
<a name="l00200"></a>00200 <span class="preprocessor">#endif</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>};<span class="comment">//~class Waitable</span>
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 
<a name="l00210"></a><a class="code" href="classting_1_1WaitSet.htm">00210</a> <span class="keyword">class </span><a class="code" href="classting_1_1WaitSet.htm" title="Set of Waitable objects to wait for.">WaitSet</a>{
<a name="l00211"></a>00211         <span class="keywordtype">unsigned</span> numWaitables;<span class="comment">//number of Waitables added</span>
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00214"></a>00214 <span class="preprocessor"></span>        <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array&lt;Waitable*&gt;</a> waitables;
<a name="l00215"></a>00215         <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array&lt;HANDLE&gt;</a> handles; <span class="comment">//used to pass array of HANDLEs to WaitForMultipleObjectsEx()</span>
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 <span class="preprocessor">#else //assume *nix</span>
<a name="l00218"></a>00218 <span class="preprocessor"></span>        <span class="keywordtype">int</span> epollSet;
<a name="l00219"></a>00219 
<a name="l00220"></a>00220         <a class="code" href="classting_1_1Array.htm">Array&lt;epoll_event&gt;</a> revents;<span class="comment">//used for getting the result from epoll_wait()</span>
<a name="l00221"></a>00221 <span class="preprocessor">#endif</span>
<a name="l00222"></a>00222 <span class="preprocessor"></span>
<a name="l00223"></a>00223 <span class="keyword">public</span>:
<a name="l00224"></a>00224 
<a name="l00229"></a><a class="code" href="classting_1_1WaitSet.htm#a61ca229ba96a105fd79229bd22e29b90">00229</a>         <a class="code" href="classting_1_1WaitSet.htm#a61ca229ba96a105fd79229bd22e29b90" title="Constructor.">WaitSet</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> maxSize) :
<a name="l00230"></a>00230                         numWaitables(0)
<a name="l00231"></a>00231 #if defined(__WIN32__)
<a name="l00232"></a>00232                         ,waitables(maxSize)
<a name="l00233"></a>00233                         ,handles(maxSize)
<a name="l00234"></a>00234         {
<a name="l00235"></a>00235                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(maxSize &lt;= MAXIMUM_WAIT_OBJECTS, <span class="stringliteral">&quot;maxSize should be less than &quot;</span> &lt;&lt; MAXIMUM_WAIT_OBJECTS)
<a name="l00236"></a>00236                 <span class="keywordflow">if</span>(maxSize &gt; MAXIMUM_WAIT_OBJECTS)
<a name="l00237"></a>00237                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;WaitSet::WaitSet(): requested WaitSet size is too big&quot;</span>);
<a name="l00238"></a>00238         }
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 <span class="preprocessor">#else //assume *nix</span>
<a name="l00241"></a>00241 <span class="preprocessor"></span>                        ,revents(maxSize)
<a name="l00242"></a>00242         {
<a name="l00243"></a>00243                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keywordtype">int</span>(maxSize) &gt; 0)
<a name="l00244"></a>00244                 this-&gt;epollSet = epoll_create(<span class="keywordtype">int</span>(maxSize));
<a name="l00245"></a>00245                 if(this-&gt;epollSet &lt; 0){
<a name="l00246"></a>00246                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;WaitSet::WaitSet(): epoll_create() failed&quot;</span>);
<a name="l00247"></a>00247                 }
<a name="l00248"></a>00248         }
<a name="l00249"></a>00249 <span class="preprocessor">#endif</span>
<a name="l00250"></a>00250 <span class="preprocessor"></span>
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 
<a name="l00260"></a><a class="code" href="classting_1_1WaitSet.htm#a6b52cc7bbac7772b35f10c8f78c7d75d">00260</a>         <a class="code" href="classting_1_1WaitSet.htm#a6b52cc7bbac7772b35f10c8f78c7d75d" title="Destructor.">~WaitSet</a>(){
<a name="l00261"></a>00261                 <span class="comment">//assert the wait set is empty</span>
<a name="l00262"></a>00262                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;numWaitables == 0, <span class="stringliteral">&quot;attempt to destroy WaitSet containig Waitables&quot;</span>)
<a name="l00263"></a>00263 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00264"></a>00264 <span class="preprocessor"></span>                <span class="comment">//do nothing</span>
<a name="l00265"></a>00265 <span class="preprocessor">#else //assume *nix</span>
<a name="l00266"></a>00266 <span class="preprocessor"></span>                close(this-&gt;epollSet);
<a name="l00267"></a>00267 <span class="preprocessor">#endif</span>
<a name="l00268"></a>00268 <span class="preprocessor"></span>        }
<a name="l00269"></a>00269 
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 
<a name="l00278"></a><a class="code" href="classting_1_1WaitSet.htm#a82c740315d7e0ab0414394086334ae97">00278</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1WaitSet.htm#a82c740315d7e0ab0414394086334ae97" title="Add Waitable object to the wait set.">Add</a>(<a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>* w, <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abe">Waitable::EReadinessFlags</a> flagsToWaitFor){
<a name="l00279"></a>00279 <span class="comment">//              TRACE(&lt;&lt; &quot;WaitSet::Add(): enter&quot; &lt;&lt; std::endl)</span>
<a name="l00280"></a>00280                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(w)
<a name="l00281"></a>00281                 
<a name="l00282"></a>00282                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(!w-&gt;isAdded)
<a name="l00283"></a>00283                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(flagsToWaitFor != 0)<span class="comment">//wait for at least something</span>
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00286"></a>00286 <span class="preprocessor"></span>                <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;numWaitables &lt;= this-&gt;handles.Size())
<a name="l00287"></a>00287                 <span class="keywordflow">if</span>(this-&gt;numWaitables == this-&gt;handles.Size())
<a name="l00288"></a>00288                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;WaitSet::Add(): wait set is full&quot;</span>);
<a name="l00289"></a>00289 
<a name="l00290"></a>00290                 <span class="comment">//NOTE: Setting wait flags may throw an exception, so do that before</span>
<a name="l00291"></a>00291                 <span class="comment">//adding object to the array and incrementing number of added objects.</span>
<a name="l00292"></a>00292                 w-&gt;SetWaitingEvents(flagsToWaitFor);
<a name="l00293"></a>00293 
<a name="l00294"></a>00294                 this-&gt;handles[this-&gt;numWaitables] = w-&gt;<a class="code" href="classting_1_1Waitable.htm#a68f6754652add3ab0520464aca6cada1">GetHandle</a>();
<a name="l00295"></a>00295                 this-&gt;waitables[this-&gt;numWaitables] = w;
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 <span class="preprocessor">#else //assume *nix</span>
<a name="l00298"></a>00298 <span class="preprocessor"></span>                epoll_event e;
<a name="l00299"></a>00299                 e.data.fd = w-&gt;<a class="code" href="classting_1_1Waitable.htm#a68f6754652add3ab0520464aca6cada1">GetHandle</a>();
<a name="l00300"></a>00300                 e.data.ptr = w;
<a name="l00301"></a>00301                 e.events = (<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(flagsToWaitFor) &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">Waitable::READ</a> ? (EPOLLIN | EPOLLPRI) : 0) |
<a name="l00302"></a>00302                                 (<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(flagsToWaitFor) &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">Waitable::WRITE</a> ? EPOLLOUT : 0);
<a name="l00303"></a>00303                 <span class="keywordtype">int</span> res = epoll_ctl(
<a name="l00304"></a>00304                                 this-&gt;epollSet,
<a name="l00305"></a>00305                                 EPOLL_CTL_ADD,
<a name="l00306"></a>00306                                 w-&gt;<a class="code" href="classting_1_1Waitable.htm#a68f6754652add3ab0520464aca6cada1">GetHandle</a>(),
<a name="l00307"></a>00307                                 &amp;e
<a name="l00308"></a>00308                         );
<a name="l00309"></a>00309                 <span class="keywordflow">if</span>(res &lt; 0)
<a name="l00310"></a>00310                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;WaitSet::Add(): epoll_ctl() failed&quot;</span>);
<a name="l00311"></a>00311 <span class="preprocessor">#endif</span>
<a name="l00312"></a>00312 <span class="preprocessor"></span>
<a name="l00313"></a>00313                 ++this-&gt;numWaitables;
<a name="l00314"></a>00314 
<a name="l00315"></a>00315                 w-&gt;isAdded = <span class="keyword">true</span>;
<a name="l00316"></a>00316 <span class="comment">//              TRACE(&lt;&lt; &quot;WaitSet::Add(): exit&quot; &lt;&lt; std::endl)</span>
<a name="l00317"></a>00317         }
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 
<a name="l00320"></a>00320 
<a name="l00329"></a><a class="code" href="classting_1_1WaitSet.htm#ad5e4ef0601355c7285e6b7e8136d75ec">00329</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1WaitSet.htm#ad5e4ef0601355c7285e6b7e8136d75ec" title="Change wait flags for a given Waitable.">Change</a>(<a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>* w, <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abe">Waitable::EReadinessFlags</a> flagsToWaitFor){
<a name="l00330"></a>00330                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(w)
<a name="l00331"></a>00331 
<a name="l00332"></a>00332                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(w-&gt;isAdded)
<a name="l00333"></a>00333                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(flagsToWaitFor != 0)<span class="comment">//wait for at least something</span>
<a name="l00334"></a>00334 
<a name="l00335"></a>00335 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00336"></a>00336 <span class="preprocessor"></span>                <span class="comment">//check if the Waitable object is added to this wait set</span>
<a name="l00337"></a>00337                 {
<a name="l00338"></a>00338                         <span class="keywordtype">unsigned</span> i;
<a name="l00339"></a>00339                         <span class="keywordflow">for</span>(i = 0; i &lt; this-&gt;numWaitables; ++i){
<a name="l00340"></a>00340                                 <span class="keywordflow">if</span>(this-&gt;waitables[i] == w)
<a name="l00341"></a>00341                                         <span class="keywordflow">break</span>;
<a name="l00342"></a>00342                         }
<a name="l00343"></a>00343                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(i &lt;= this-&gt;numWaitables)
<a name="l00344"></a>00344                         <span class="keywordflow">if</span>(i == this-&gt;numWaitables)
<a name="l00345"></a>00345                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;WaitSet::Change(): the Waitable is not added to this wait set&quot;</span>);
<a name="l00346"></a>00346                 }
<a name="l00347"></a>00347 
<a name="l00348"></a>00348                 <span class="comment">//set new wait flags</span>
<a name="l00349"></a>00349                 w-&gt;SetWaitingEvents(flagsToWaitFor);
<a name="l00350"></a>00350 
<a name="l00351"></a>00351 <span class="preprocessor">#else //assume *nix</span>
<a name="l00352"></a>00352 <span class="preprocessor"></span>                epoll_event e;
<a name="l00353"></a>00353                 e.data.fd = w-&gt;<a class="code" href="classting_1_1Waitable.htm#a68f6754652add3ab0520464aca6cada1">GetHandle</a>();
<a name="l00354"></a>00354                 e.data.ptr = w;
<a name="l00355"></a>00355                 e.events = (<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(flagsToWaitFor) &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">Waitable::READ</a> ? (EPOLLIN | EPOLLPRI) : 0) |
<a name="l00356"></a>00356                                 (<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(flagsToWaitFor) &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">Waitable::WRITE</a> ? EPOLLOUT : 0);
<a name="l00357"></a>00357                 <span class="keywordtype">int</span> res = epoll_ctl(
<a name="l00358"></a>00358                                 this-&gt;epollSet,
<a name="l00359"></a>00359                                 EPOLL_CTL_MOD,
<a name="l00360"></a>00360                                 w-&gt;<a class="code" href="classting_1_1Waitable.htm#a68f6754652add3ab0520464aca6cada1">GetHandle</a>(),
<a name="l00361"></a>00361                                 &amp;e
<a name="l00362"></a>00362                         );
<a name="l00363"></a>00363                 <span class="keywordflow">if</span>(res &lt; 0)
<a name="l00364"></a>00364                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;WaitSet::Change(): epoll_ctl() failed&quot;</span>);
<a name="l00365"></a>00365 <span class="preprocessor">#endif</span>
<a name="l00366"></a>00366 <span class="preprocessor"></span>        }
<a name="l00367"></a>00367 
<a name="l00368"></a>00368 
<a name="l00369"></a>00369 
<a name="l00376"></a><a class="code" href="classting_1_1WaitSet.htm#a83feb2b9422c4d039e01b6a908e3e8c0">00376</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1WaitSet.htm#a83feb2b9422c4d039e01b6a908e3e8c0" title="Remove Waitable from wait set.">Remove</a>(<a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>* w){
<a name="l00377"></a>00377                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(w)
<a name="l00378"></a>00378 
<a name="l00379"></a>00379                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(w-&gt;isAdded)
<a name="l00380"></a>00380 
<a name="l00381"></a>00381 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00382"></a>00382 <span class="preprocessor"></span>                <span class="comment">//remove object from array</span>
<a name="l00383"></a>00383                 {
<a name="l00384"></a>00384                         <span class="keywordtype">unsigned</span> i;
<a name="l00385"></a>00385                         <span class="keywordflow">for</span>(i = 0; i &lt; this-&gt;numWaitables; ++i){
<a name="l00386"></a>00386                                 <span class="keywordflow">if</span>(this-&gt;waitables[i] == w)
<a name="l00387"></a>00387                                         <span class="keywordflow">break</span>;
<a name="l00388"></a>00388                         }
<a name="l00389"></a>00389                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(i &lt;= this-&gt;numWaitables)
<a name="l00390"></a>00390                         <span class="keywordflow">if</span>(i == this-&gt;numWaitables)
<a name="l00391"></a>00391                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;WaitSet::Change(): the Waitable is not added to this wait set&quot;</span>);
<a name="l00392"></a>00392 
<a name="l00393"></a>00393                         <span class="keywordtype">unsigned</span> numObjects = this-&gt;numWaitables - 1;<span class="comment">//decrease number of objects before shifting the object handles in the array</span>
<a name="l00394"></a>00394                         <span class="comment">//shift object handles in the array</span>
<a name="l00395"></a>00395                         <span class="keywordflow">for</span>(; i &lt; numObjects; ++i){
<a name="l00396"></a>00396                                 this-&gt;handles[i] = this-&gt;handles[i + 1];
<a name="l00397"></a>00397                                 this-&gt;waitables[i] = this-&gt;waitables[i + 1];
<a name="l00398"></a>00398                         }
<a name="l00399"></a>00399                 }
<a name="l00400"></a>00400 
<a name="l00401"></a>00401                 <span class="comment">//clear wait flags (disassociate socket and Windows event)</span>
<a name="l00402"></a>00402                 w-&gt;SetWaitingEvents(0);
<a name="l00403"></a>00403 
<a name="l00404"></a>00404 <span class="preprocessor">#else //assume *nix</span>
<a name="l00405"></a>00405 <span class="preprocessor"></span>                <span class="keywordtype">int</span> res = epoll_ctl(
<a name="l00406"></a>00406                                 this-&gt;epollSet,
<a name="l00407"></a>00407                                 EPOLL_CTL_DEL,
<a name="l00408"></a>00408                                 w-&gt;<a class="code" href="classting_1_1Waitable.htm#a68f6754652add3ab0520464aca6cada1">GetHandle</a>(),
<a name="l00409"></a>00409                                 0
<a name="l00410"></a>00410                         );
<a name="l00411"></a>00411                 <span class="keywordflow">if</span>(res &lt; 0)
<a name="l00412"></a>00412                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;WaitSet::Remove(): epoll_ctl() failed&quot;</span>);
<a name="l00413"></a>00413 <span class="preprocessor">#endif</span>
<a name="l00414"></a>00414 <span class="preprocessor"></span>
<a name="l00415"></a>00415                 --this-&gt;numWaitables;
<a name="l00416"></a>00416 
<a name="l00417"></a>00417                 w-&gt;isAdded = <span class="keyword">false</span>;
<a name="l00418"></a>00418 <span class="comment">//              TRACE(&lt;&lt; &quot;WaitSet::Remove(): completed successfuly&quot; &lt;&lt; std::endl)</span>
<a name="l00419"></a>00419         }
<a name="l00420"></a>00420 
<a name="l00421"></a>00421 
<a name="l00422"></a>00422 
<a name="l00437"></a><a class="code" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39">00437</a>         <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39" title="wait for event.">Wait</a>(<a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">Buffer&lt;Waitable*&gt;</a>* out_events = 0){
<a name="l00438"></a>00438                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39" title="wait for event.">Wait</a>(<span class="keyword">true</span>, 0, out_events);
<a name="l00439"></a>00439         }
<a name="l00440"></a>00440 
<a name="l00441"></a>00441 
<a name="l00455"></a><a class="code" href="classting_1_1WaitSet.htm#a112d3ab74291753be3dabc0cef86ccbf">00455</a>         <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1WaitSet.htm#a112d3ab74291753be3dabc0cef86ccbf" title="wait for event with timeout.">WaitWithTimeout</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> timeout, <a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">Buffer&lt;Waitable*&gt;</a>* out_events = 0){
<a name="l00456"></a>00456                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39" title="wait for event.">Wait</a>(<span class="keyword">false</span>, timeout, out_events);
<a name="l00457"></a>00457         }
<a name="l00458"></a>00458 
<a name="l00459"></a>00459 
<a name="l00460"></a>00460 
<a name="l00461"></a>00461 <span class="keyword">private</span>:
<a name="l00462"></a>00462         <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39" title="wait for event.">Wait</a>(<span class="keywordtype">bool</span> waitInfinitly, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> timeout, <a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">Buffer&lt;Waitable*&gt;</a>* out_events){
<a name="l00463"></a>00463                 <span class="keywordflow">if</span>(out_events){
<a name="l00464"></a>00464                         <span class="keywordflow">if</span>(out_events-&gt;<a class="code" href="classting_1_1Buffer.htm#a72614973b8c68b8f4f261ffb21aedf29" title="get buffer size.">Size</a>() &lt; this-&gt;numWaitables){
<a name="l00465"></a>00465                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;WaitSet::Wait(): passed out_events buffer is not large enough to hold all possible triggered objects&quot;</span>);
<a name="l00466"></a>00466                         }
<a name="l00467"></a>00467                 }
<a name="l00468"></a>00468 
<a name="l00469"></a>00469 <span class="preprocessor">#if defined(__WIN32__)</span>
<a name="l00470"></a>00470 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(timeout == INFINITE)
<a name="l00471"></a>00471                         timeout -= 1;
<a name="l00472"></a>00472 
<a name="l00473"></a>00473                 DWORD waitTimeout = waitInfinitly ? (INFINITE) : DWORD(timeout);
<a name="l00474"></a>00474                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(waitTimeout &gt;= 0)
<a name="l00475"></a>00475                 DWORD res = WaitForMultipleObjectsEx(
<a name="l00476"></a>00476                                 this-&gt;numWaitables,
<a name="l00477"></a>00477                                 this-&gt;handles.Begin(),
<a name="l00478"></a>00478                                 FALSE, <span class="comment">//do not wait for all objects, wait for at least one</span>
<a name="l00479"></a>00479                                 waitTimeout,
<a name="l00480"></a>00480                                 FALSE
<a name="l00481"></a>00481                         );
<a name="l00482"></a>00482 
<a name="l00483"></a>00483                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(res != WAIT_IO_COMPLETION)<span class="comment">//it is impossible because we supplied FALSE as last parameter to WaitForMultipleObjectsEx()</span>
<a name="l00484"></a>00484 
<a name="l00485"></a>00485                 if(res == WAIT_FAILED)
<a name="l00486"></a>00486                         throw ting::Exc(&quot;<a class="code" href="classting_1_1WaitSet.htm#a61ca229ba96a105fd79229bd22e29b90" title="Constructor.">WaitSet</a>::<a class="code" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39" title="wait for event.">Wait</a>(): WaitForMultipleObjectsEx() failed&quot;);
<a name="l00487"></a>00487 
<a name="l00488"></a>00488                 if(res == WAIT_TIMEOUT)
<a name="l00489"></a>00489                         return 0;
<a name="l00490"></a>00490 
<a name="l00491"></a>00491                 <span class="comment">//check for activities</span>
<a name="l00492"></a>00492                 <span class="keywordtype">unsigned</span> numEvents = 0;
<a name="l00493"></a>00493                 for(<span class="keywordtype">unsigned</span> i = 0; i &lt; this-&gt;numWaitables; ++i){
<a name="l00494"></a>00494                         <span class="keywordflow">if</span>(this-&gt;waitables[i]-&gt;CheckSignalled()){
<a name="l00495"></a>00495                                 <span class="keywordflow">if</span>(out_events){
<a name="l00496"></a>00496                                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(numEvents &lt; out_events-&gt;Size())
<a name="l00497"></a>00497                                         out_events-&gt;operator[](numEvents) = this-&gt;waitables[i];
<a name="l00498"></a>00498                                 }
<a name="l00499"></a>00499                                 ++numEvents;
<a name="l00500"></a>00500                         }
<a name="l00501"></a>00501                 }
<a name="l00502"></a>00502                 
<a name="l00503"></a>00503                 return numEvents;
<a name="l00504"></a>00504 
<a name="l00505"></a>00505 <span class="preprocessor">#else //assume *nix</span>
<a name="l00506"></a>00506 <span class="preprocessor"></span>                <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keywordtype">int</span>(timeout) &gt;= 0)
<a name="l00507"></a>00507                 int epollTimeout = waitInfinitly ? (-1) : <span class="keywordtype">int</span>(timeout);
<a name="l00508"></a>00508 
<a name="l00509"></a>00509 <span class="comment">//              TRACE(&lt;&lt; &quot;going to epoll_wait() with timeout = &quot; &lt;&lt; epollTimeout &lt;&lt; std::endl)</span>
<a name="l00510"></a>00510 
<a name="l00511"></a>00511                 <span class="keywordtype">int</span> res;
<a name="l00512"></a>00512 
<a name="l00513"></a>00513                 while(true){
<a name="l00514"></a>00514                         res = epoll_wait(
<a name="l00515"></a>00515                                         this-&gt;epollSet,
<a name="l00516"></a>00516                                         this-&gt;revents.Begin(),
<a name="l00517"></a>00517                                         this-&gt;revents.Size(),
<a name="l00518"></a>00518                                         epollTimeout
<a name="l00519"></a>00519                                 );
<a name="l00520"></a>00520 
<a name="l00521"></a>00521         <span class="comment">//              TRACE(&lt;&lt; &quot;epoll_wait() returned &quot; &lt;&lt; res &lt;&lt; std::endl)</span>
<a name="l00522"></a>00522 
<a name="l00523"></a>00523                         <span class="keywordflow">if</span>(res &lt; 0){
<a name="l00524"></a>00524                                 <span class="comment">//if interrupted by signal, try waiting again.</span>
<a name="l00525"></a>00525                                 <span class="keywordflow">if</span>(errno == EINTR){
<a name="l00526"></a>00526                                         <span class="keywordflow">continue</span>;
<a name="l00527"></a>00527                                 }
<a name="l00528"></a>00528 
<a name="l00529"></a>00529                                 std::stringstream ss;
<a name="l00530"></a>00530                                 ss &lt;&lt; <span class="stringliteral">&quot;WaitSet::Wait(): epoll_wait() failed, error code = &quot;</span> &lt;&lt; errno &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; strerror(errno);
<a name="l00531"></a>00531                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(ss.str().c_str());
<a name="l00532"></a>00532                         }
<a name="l00533"></a>00533                         <span class="keywordflow">break</span>;
<a name="l00534"></a>00534                 };
<a name="l00535"></a>00535 
<a name="l00536"></a>00536                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keywordtype">unsigned</span>(res) &lt;= this-&gt;revents.Size())
<a name="l00537"></a>00537 
<a name="l00538"></a>00538                 <span class="keywordtype">unsigned</span> numEvents = 0;
<a name="l00539"></a>00539                 <span class="keywordflow">for</span>(
<a name="l00540"></a>00540                                 epoll_event *e = this-&gt;revents.Begin();
<a name="l00541"></a>00541                                 e &lt; this-&gt;revents.Begin() + res;
<a name="l00542"></a>00542                                 ++e
<a name="l00543"></a>00543                         )
<a name="l00544"></a>00544                 {
<a name="l00545"></a>00545                         Waitable* w = <span class="keyword">static_cast&lt;</span>Waitable*<span class="keyword">&gt;</span>(e-&gt;data.ptr);
<a name="l00546"></a>00546                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(w)
<a name="l00547"></a>00547                         if((e-&gt;events &amp; (EPOLLIN | EPOLLPRI)) != 0){
<a name="l00548"></a>00548                                 w-&gt;SetCanReadFlag();
<a name="l00549"></a>00549                         }
<a name="l00550"></a>00550                         <span class="keywordflow">if</span>((e-&gt;events &amp; EPOLLOUT) != 0){
<a name="l00551"></a>00551                                 w-&gt;SetCanWriteFlag();
<a name="l00552"></a>00552                         }
<a name="l00553"></a>00553                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(w-&gt;CanRead() || w-&gt;CanWrite())
<a name="l00554"></a>00554                         <span class="keywordflow">if</span>(out_events){
<a name="l00555"></a>00555                                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(numEvents &lt; out_events-&gt;Size())
<a name="l00556"></a>00556                                 out_events-&gt;operator[](numEvents) = w;
<a name="l00557"></a>00557                                 ++numEvents;
<a name="l00558"></a>00558                         }
<a name="l00559"></a>00559                 }
<a name="l00560"></a>00560 
<a name="l00561"></a>00561                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(res &gt;= 0)<span class="comment">//NOTE: &apos;res&apos; can be zero, if no events happened in the specified timeout</span>
<a name="l00562"></a>00562                 return <span class="keywordtype">unsigned</span>(res);
<a name="l00563"></a>00563 <span class="preprocessor">#endif</span>
<a name="l00564"></a>00564 <span class="preprocessor"></span>        }
<a name="l00565"></a>00565 };<span class="comment">//~class WaitSet</span>
<a name="l00566"></a>00566 
<a name="l00567"></a>00567 
<a name="l00568"></a>00568 
<a name="l00569"></a>00569 }<span class="comment">//~namespace ting</span>
<a name="l00570"></a>00570 
<a name="l00571"></a>00571 
<a name="l00572"></a>00572 <span class="comment">//if Microsoft MSVC compiler, restore warnings state</span>
<a name="l00573"></a>00573 <span class="preprocessor">#ifdef _MSC_VER</span>
<a name="l00574"></a>00574 <span class="preprocessor"></span><span class="preprocessor">#pragma warning(pop) //pop warnings state</span>
<a name="l00575"></a>00575 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00576"></a>00576 <span class="preprocessor"></span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
