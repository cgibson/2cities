#!./lua

--[[

No need to edit this file unless you are changing something drastic
in the build process. You can just run it like so:

    ./build                 - build the client and server in debug mode
    ./build release         - build the client and server in release mode
    ./build debug client    - build the client only in debug mode
    ./build release server  - build the server only in release mode

If you have any questions, just ask me:
    rsomers@calpoly.edu

]]--

--------------------------------------------------------------------------
--                          MAKEFILE SETTINGS                           --
--------------------------------------------------------------------------

-- compiler
cxx = "g++"

-- binary names
bin = {}
bin.client = "2cities-client"
bin.server = "2cities-server"

-- paths to search for including header files
includes = {}
includes.client = {
    "include/bullet",
    "include/freetype",
    "include/lua",
    "include/SDL_mixer",
    "/usr/include/SDL"
}
includes.server = {
    "include/bullet",
}

-- preprocessor defines
defines = {}
defines.client = {
    "CLIENT",
    "GL_GLEXT_PROTOTYPES",
    "OGLFT_NO_SOLID",
    "OGLFT_NO_QT"
}
defines.server = {
    "SERVER"
}
defines.debug = {
    "DEBUG"
}
defines.release = {
    "RELEASE"
}

-- compiler options
cxxflags = {}
cxxflags.debug = {
    "g",
    "pg",
    "Wall"
}
cxxflags.release = {
    "O3"
}

-- object file directory
objdir = {}
objdir.client = "objs/client"
objdir.server = "objs/server"

-- static library directory
libdir = "lib/linux"

-- static libraries to link
libs = {}
libs.client = {
    "libBulletDynamics.a",
    "libBulletCollision.a",
    "libLinearMath.a",
    "libfreetype.a",
    "libz.a",
    "liblua.a",
    "libSDL_mixer.a"
}
libs.server = {
    "libBulletDynamics.a",
    "libBulletCollision.a",
    "libLinearMath.a"
}

-- linker flags
ldflags = {}
ldflags.client = {
    "GL",
    "GLU",
    "glut",
    "SDL",
    "m"
}
ldflags.server = {
    "m",
    "GL", -- TODO: remove me
    "GLU", -- TODO: remove me
    "glut", -- TODO: remove me
    "SDL"
}

--------------------------------------------------------------------------
--                   DO NOT EDIT BELOW THIS LINE!                       --
--------------------------------------------------------------------------

-- check command line arguments
mode = "debug"
build = "both"
if #arg > 2 then
    print "Usage: build [debug|release] [client|server]"
    return
elseif #arg == 1 and (arg[1] == "-help" or arg[1] == "--help") then
    print "Usage: build [debug|release] [client|server]"
    return
elseif #arg == 1 and arg[1] == "clean" then
    mode = "clean"
else
    if #arg >= 1 then
        if arg[1] == "debug" or arg[1] == "release" then
            mode = arg[1]
        else
            print "Usage: build [debug|release] [client|server]"
            return
        end
    end
    if #arg == 2 then
        if arg[2] == "client" or arg[2] == "server" then
            build = arg[2]
        else
            print "Usage: build [debug|release] [client|server]"
            return
        end
    end
end

-- bring in source files and process them
dofile "sources.lua"
for i, filename in ipairs(client_srcs) do
    local path, file = string.match(filename, "([^/]+)/(.+).cpp")
    client_srcs[i] = {path = "src/" .. path, file = file}
end
for i, filename in ipairs(server_srcs) do
    local path, file = string.match(filename, "([^/]+)/(.+).cpp")
    server_srcs[i] = {path = "src/" .. path, file = file}
end

-- CLEAN
if mode == "clean" then
    print("========== CLEANING EVERYTHING ==========")

    -- remove object files
    os.execute("rm " .. objdir.client .. "/*")
    os.execute("rm " .. objdir.server .. "/*")

    -- remove svnrev.h file
    os.execute("rm svnrev.h")

    -- remove binaries
    os.execute("rm " .. bin.client .. " " .. bin.server)

    -- remove any generated makefiles
    os.execute("rm Makefile.debug-client Makefile.debug-server Makefile.release-client Makefile.release-server")

    print("========== CLEAN COMPLETE ==========")
end

-- SVNREV.H
if mode ~= "clean" then
    io.write("Generating svnrev.h... ")
    io.flush()

    os.execute("echo \"#ifndef _SVNREV_H_\" > svnrev.h")
    os.execute("echo \"#define _SVNREV_H_\" >> svnrev.h")
    os.execute("echo \"#define SVN_REV \\\"`svnversion`\\\"\" >> svnrev.h")
    os.execute("echo \"#endif\" >> svnrev.h")

    print("done.")
end

-- DEBUG CLIENT
if mode == "debug" and (build == "client" or build == "both") then
    print("========== CLIENT BUILD STARTING [debug] ==========")
    io.write("Generating Makefile.... ")
    io.flush()

    -- open output file
    local f = io.open("Makefile.debug-client", "w")

    -- compiler and binary name
    f:write("CXX = ", cxx, "\n")
    f:write("BIN = ", bin.client, "\n")

    -- include directories
    includes.gen = ""
    if #includes.client > 0 then
        includes.gen = includes.gen .. " -I" .. table.concat(includes.client, " -I")
    end
    f:write("INCDIR = ", includes.gen, "\n")

    -- preprocessor defines
    defines.gen = ""
    if #defines.client > 0 then
        defines.gen = defines.gen .. " -D" .. table.concat(defines.client, " -D")
    end
    if #defines.debug > 0 then
        if #defines.gen > 0 then
            defines.gen = defines.gen .. " "
        end
        defines.gen = defines.gen .. " -D" .. table.concat(defines.debug, " -D")
    end
    f:write("DEFS = ", defines.gen, "\n")

    -- library directory
    f:write("LIBDIR = ", libdir, "\n")

    -- static libraries
    libs.gen = ""
    if #libs.client > 0 then
        libs.gen = libs.gen .. " $(LIBDIR)/" .. table.concat(libs.client, " $(LIBDIR)/")
    end
    f:write("LIBS = ", libs.gen, "\n")

    -- compiler flags
    cxxflags.gen = "$(INCDIR) $(DEFS)"
    if #cxxflags.debug > 0 then
        cxxflags.gen = cxxflags.gen .. " -" .. table.concat(cxxflags.debug, " -")
    end
    f:write("CXXFLAGS = ", cxxflags.gen, "\n")

    -- linker flags
    ldflags.gen = ""
    if #ldflags.client > 0 then
        ldflags.gen = ldflags.gen .. " -l" .. table.concat(ldflags.client, " -l")
    end
    f:write("LDFLAGS = ", ldflags.gen, "\n")

    -- object files list
    local objs = ""
    for i, file in ipairs(client_srcs) do
        objs = table.concat({objs, " ", objdir.client, "/", file.file, ".o"})
    end
    f:write("OBJS = ", objs, "\n")

    -- linker stage
    f:write("\nall: $(OBJS)\n")
    f:write("\t$(CXX) $(LDFLAGS) $(OBJS) $(LIBS) -o $(BIN)\n")

    -- compiler stage
    for i, file in ipairs(client_srcs) do
        local obj = table.concat({objdir.client, "/", file.file, ".o"})
        local src = table.concat({file.path, "/", file.file, ".cpp"})
        f:write("\n", obj, ": ", src, "\n");
        f:write("\t$(CXX) -c $(CXXFLAGS) -o $@ ", src, "\n")
    end

    -- done
    f:close()
    print("done.")

    -- check validity of object files
    io.write("Checking validity of object files... ")
    io.flush()
    local test = io.open(objdir.client .. "/RELEASE", "r") -- test for OPPOSITE tag
    if test ~= nil then
        -- object files are out of date (stale build)
        test:close()
        io.write("BAD\nObject files are invalid, removing... ")
        io.flush()
        os.execute("rm " .. objdir.client .. "/*")
        print("done.")
    else
        print("OK.")
    end

    -- run makefile
    print("Running make...")
    os.execute("make -f Makefile.debug-client")

    -- tag the object files
    io.write("Tagging object files... ")
    io.flush()
    local tag = io.open(objdir.client .. "/DEBUG", "w")
    if tag then
        tag:close()
    end
    print("done.")

    print("========== CLIENT BUILD COMPLETE [debug] ==========")
end

-- DEBUG SERVER
if mode == "debug" and (build == "server" or build == "both") then
    print("========== SERVER BUILD STARTING [debug] ==========")
    io.write("Generating Makefile.... ")
    io.flush()

    -- open output file
    local f = io.open("Makefile.debug-server", "w")

    -- compiler and binary name
    f:write("CXX = ", cxx, "\n")
    f:write("BIN = ", bin.server, "\n")

    -- include directories
    includes.gen = ""
    if #includes.server > 0 then
        includes.gen = includes.gen .. " -I" .. table.concat(includes.server, " -I")
    end
    f:write("INCDIR = ", includes.gen, "\n")

    -- preprocessor defines
    defines.gen = ""
    if #defines.server > 0 then
        defines.gen = defines.gen .. " -D" .. table.concat(defines.server, " -D")
    end
    if #defines.debug > 0 then
        if #defines.gen > 0 then
            defines.gen = defines.gen .. " "
        end
        defines.gen = defines.gen .. " -D" .. table.concat(defines.debug, " -D")
    end
    f:write("DEFS = ", defines.gen, "\n")

    -- library directory
    f:write("LIBDIR = ", libdir, "\n")

    -- static libraries
    libs.gen = ""
    if #libs.server > 0 then
        libs.gen = libs.gen .. " $(LIBDIR)/" .. table.concat(libs.server, " $(LIBDIR)/")
    end
    f:write("LIBS = ", libs.gen, "\n")

    -- compiler flags
    cxxflags.gen = "$(INCDIR) $(DEFS)"
    if #cxxflags.debug > 0 then
        cxxflags.gen = cxxflags.gen .. " -" .. table.concat(cxxflags.debug, " -")
    end
    f:write("CXXFLAGS = ", cxxflags.gen, "\n")

    -- linker flags
    ldflags.gen = ""
    if #ldflags.server > 0 then
        ldflags.gen = ldflags.gen .. " -l" .. table.concat(ldflags.server, " -l")
    end
    f:write("LDFLAGS = ", ldflags.gen, "\n")

    -- object files list
    local objs = ""
    for i, file in ipairs(server_srcs) do
        objs = table.concat({objs, " ", objdir.server, "/", file.file, ".o"})
    end
    f:write("OBJS = ", objs, "\n")

    -- linker stage
    f:write("\nall: $(OBJS)\n")
    f:write("\t$(CXX) $(LDFLAGS) $(OBJS) $(LIBS) -o $(BIN)\n")

    -- compiler stage
    for i, file in ipairs(server_srcs) do
        local obj = table.concat({objdir.server, "/", file.file, ".o"})
        local src = table.concat({file.path, "/", file.file, ".cpp"})
        f:write("\n", obj, ": ", src, "\n");
        f:write("\t$(CXX) -c $(CXXFLAGS) -o $@ ", src, "\n")
    end

    -- done
    f:close()
    print("done.")

    -- check validity of object files
    io.write("Checking validity of object files... ")
    io.flush()
    local test = io.open(objdir.server .. "/RELEASE", "r") -- test for OPPOSITE tag
    if test ~= nil then
        -- object files are out of date (stale build)
        test:close()
        io.write("BAD\nObject files are invalid, removing... ")
        io.flush()
        os.execute("rm " .. objdir.server .. "/*")
        print("done.")
    else
        print("OK.")
    end

    -- run makefile
    print("Running make...")
    os.execute("make -f Makefile.debug-server")

    -- tag the object files
    io.write("Tagging object files... ")
    io.flush()
    local tag = io.open(objdir.server .. "/DEBUG", "w")
    if tag then
        tag:close()
    end
    print("done.")

    print("========== SERVER BUILD COMPLETE [debug] ==========")
end

-- RELEASE CLIENT
if mode == "release" and (build == "client" or build == "both") then
    print("========== CLIENT BUILD STARTING [release] ==========")
    io.write("Generating Makefile.... ")
    io.flush()

    -- open output file
    local f = io.open("Makefile.release-client", "w")

    -- compiler and binary name
    f:write("CXX = ", cxx, "\n")
    f:write("BIN = ", bin.client, "\n")

    -- include directories
    includes.gen = ""
    if #includes.client > 0 then
        includes.gen = includes.gen .. " -I" .. table.concat(includes.client, " -I")
    end
    f:write("INCDIR = ", includes.gen, "\n")

    -- preprocessor defines
    defines.gen = ""
    if #defines.client > 0 then
        defines.gen = defines.gen .. " -D" .. table.concat(defines.client, " -D")
    end
    if #defines.release > 0 then
        if #defines.gen > 0 then
            defines.gen = defines.gen .. " "
        end
        defines.gen = defines.gen .. " -D" .. table.concat(defines.release, " -D")
    end
    f:write("DEFS = ", defines.gen, "\n")

    -- library directory
    f:write("LIBDIR = ", libdir, "\n")

    -- static libraries
    libs.gen = ""
    if #libs.client > 0 then
        libs.gen = libs.gen .. " $(LIBDIR)/" .. table.concat(libs.client, " $(LIBDIR)/")
    end
    f:write("LIBS = ", libs.gen, "\n")

    -- compiler flags
    cxxflags.gen = "$(INCDIR) $(DEFS)"
    if #cxxflags.release > 0 then
        cxxflags.gen = cxxflags.gen .. " -" .. table.concat(cxxflags.release, " -")
    end
    f:write("CXXFLAGS = ", cxxflags.gen, "\n")

    -- linker flags
    ldflags.gen = ""
    if #ldflags.client > 0 then
        ldflags.gen = ldflags.gen .. " -l" .. table.concat(ldflags.client, " -l")
    end
    f:write("LDFLAGS = ", ldflags.gen, "\n")

    -- object files list
    local objs = ""
    for i, file in ipairs(client_srcs) do
        objs = table.concat({objs, " ", objdir.client, "/", file.file, ".o"})
    end
    f:write("OBJS = ", objs, "\n")

    -- linker stage
    f:write("\nall: $(OBJS)\n")
    f:write("\t$(CXX) $(LDFLAGS) $(OBJS) $(LIBS) -o $(BIN)\n")

    -- compiler stage
    for i, file in ipairs(client_srcs) do
        local obj = table.concat({objdir.client, "/", file.file, ".o"})
        local src = table.concat({file.path, "/", file.file, ".cpp"})
        f:write("\n", obj, ": ", src, "\n");
        f:write("\t$(CXX) -c $(CXXFLAGS) -o $@ ", src, "\n")
    end

    -- done
    f:close()
    print("done.")

    -- check validity of object files
    io.write("Checking validity of object files... ")
    io.flush()
    local test = io.open(objdir.client .. "/DEBUG", "r") -- test for OPPOSITE tag
    if test ~= nil then
        -- object files are out of date (stale build)
        test:close()
        io.write("BAD\nObject files are invalid, removing... ")
        io.flush()
        os.execute("rm " .. objdir.client .. "/*")
        print("done.")
    else
        print("OK.")
    end

    -- run makefile
    print("Running make...")
    os.execute("make -f Makefile.release-client")

    -- tag the object files
    io.write("Tagging object files... ")
    io.flush()
    local tag = io.open(objdir.client .. "/RELEASE", "w")
    if tag then
        tag:close()
    end
    print("done.")

    print("========== CLIENT BUILD COMPLETE [release] ==========")
end

-- RELEASE SERVER
if mode == "release" and (build == "server" or build == "both") then
    print("========== SERVER BUILD STARTING [release] ==========")
    io.write("Generating Makefile.... ")
    io.flush()

    -- open output file
    local f = io.open("Makefile.release-server", "w")

    -- compiler and binary name
    f:write("CXX = ", cxx, "\n")
    f:write("BIN = ", bin.server, "\n")

    -- include directories
    includes.gen = ""
    if #includes.server > 0 then
        includes.gen = includes.gen .. " -I" .. table.concat(includes.server, " -I")
    end
    f:write("INCDIR = ", includes.gen, "\n")

    -- preprocessor defines
    defines.gen = ""
    if #defines.server > 0 then
        defines.gen = defines.gen .. " -D" .. table.concat(defines.server, " -D")
    end
    if #defines.release > 0 then
        if #defines.gen > 0 then
            defines.gen = defines.gen .. " "
        end
        defines.gen = defines.gen .. " -D" .. table.concat(defines.release, " -D")
    end
    f:write("DEFS = ", defines.gen, "\n")

    -- library directory
    f:write("LIBDIR = ", libdir, "\n")

    -- static libraries
    libs.gen = ""
    if #libs.server > 0 then
        libs.gen = libs.gen .. " $(LIBDIR)/" .. table.concat(libs.server, " $(LIBDIR)/")
    end
    f:write("LIBS = ", libs.gen, "\n")

    -- compiler flags
    cxxflags.gen = "$(INCDIR) $(DEFS)"
    if #cxxflags.release > 0 then
        cxxflags.gen = cxxflags.gen .. " -" .. table.concat(cxxflags.release, " -")
    end
    f:write("CXXFLAGS = ", cxxflags.gen, "\n")

    -- linker flags
    ldflags.gen = ""
    if #ldflags.server > 0 then
        ldflags.gen = ldflags.gen .. " -l" .. table.concat(ldflags.server, " -l")
    end
    f:write("LDFLAGS = ", ldflags.gen, "\n")

    -- object files list
    local objs = ""
    for i, file in ipairs(server_srcs) do
        objs = table.concat({objs, " ", objdir.server, "/", file.file, ".o"})
    end
    f:write("OBJS = ", objs, "\n")

    -- linker stage
    f:write("\nall: $(OBJS)\n")
    f:write("\t$(CXX) $(LDFLAGS) $(OBJS) $(LIBS) -o $(BIN)\n")

    -- compiler stage
    for i, file in ipairs(server_srcs) do
        local obj = table.concat({objdir.server, "/", file.file, ".o"})
        local src = table.concat({file.path, "/", file.file, ".cpp"})
        f:write("\n", obj, ": ", src, "\n");
        f:write("\t$(CXX) -c $(CXXFLAGS) -o $@ ", src, "\n")
    end

    -- done
    f:close()
    print("done.")

    -- check validity of object files
    io.write("Checking validity of object files... ")
    io.flush()
    local test = io.open(objdir.server .. "/DEBUG", "r") -- test for OPPOSITE tag
    if test ~= nil then
        -- object files are out of date (stale build)
        test:close()
        io.write("BAD\nObject files are invalid, removing... ")
        io.flush()
        os.execute("rm " .. objdir.server .. "/*")
        print("done.")
    else
        print("OK.")
    end

    -- run makefile
    print("Running make...")
    os.execute("make -f Makefile.release-server")

    -- tag the object files
    io.write("Tagging object files... ")
    io.flush()
    local tag = io.open(objdir.server .. "/RELEASE", "w")
    if tag then
        tag:close()
    end
    print("done.")

    print("========== SERVER BUILD COMPLETE [release] ==========")
end

print("Finished.")
