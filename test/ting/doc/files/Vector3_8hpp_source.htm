<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: Vector3.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>Vector3.hpp</h1><a href="Vector3_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;cmath&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;cstdlib&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="math_8hpp.htm" title="Math utilities.">math.hpp</a>&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="Exc_8hpp.htm" title="Basic Exception class.">Exc.hpp</a>&quot;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="keyword">namespace </span>ting{
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">//  -== forward declarations ==-</span>
<a name="l00044"></a>00044 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class </span>Vector2;
<a name="l00045"></a>00045 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class </span>Vector3;
<a name="l00046"></a>00046 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class </span>Matrix4;
<a name="l00047"></a>00047 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class </span>Quaternion;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="namespaceting.htm#a2a1e3e56cfa8cfa761da1f6383b95662">ParseNum</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* str, T&amp; out_Res);
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="namespaceting.htm#ab03f54d48e64f9069f07193acee0ed33">ParseNum&lt;int&gt;</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* str, <span class="keywordtype">int</span>&amp; out_Res){
<a name="l00054"></a>00054         <span class="keywordtype">char</span> buf[32];
<a name="l00055"></a>00055         <span class="keyword">const</span> <span class="keywordtype">char</span> *p = str;
<a name="l00056"></a>00056         <span class="keywordtype">unsigned</span> i = 0;
<a name="l00057"></a>00057         
<a name="l00058"></a>00058         <span class="comment">//TODO: allow &apos;-&apos; character in front of number</span>
<a name="l00059"></a>00059         <span class="keywordflow">while</span>(*p &gt;= 0x30 &amp;&amp; *p &lt;= 0x39 &amp;&amp; i &lt; <span class="keyword">sizeof</span>(buf)){
<a name="l00060"></a>00060                 buf[i] = *p;
<a name="l00061"></a>00061                 ++i;
<a name="l00062"></a>00062                 ++p;
<a name="l00063"></a>00063                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(i &lt; <span class="keyword">sizeof</span>(buf))
<a name="l00064"></a>00064         }
<a name="l00065"></a>00065         buf[i] = 0;<span class="comment">//null terminate</span>
<a name="l00066"></a>00066         
<a name="l00067"></a>00067         <span class="keywordflow">if</span>(i == 0)
<a name="l00068"></a>00068                 <span class="keywordflow">return</span> 0;
<a name="l00069"></a>00069         
<a name="l00070"></a>00070         out_Res = atoi(buf);
<a name="l00071"></a>00071         <span class="keywordflow">return</span> p;
<a name="l00072"></a>00072 }
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="namespaceting.htm#a545d974e4636e23f91b7a146b6798421">ParseNum&lt;float&gt;</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* str, <span class="keywordtype">float</span>&amp; out_Res){
<a name="l00077"></a>00077         <span class="keywordtype">char</span> buf[32];
<a name="l00078"></a>00078         <span class="keyword">const</span> <span class="keywordtype">char</span> *p = str;
<a name="l00079"></a>00079         <span class="keywordtype">unsigned</span> i = 0;
<a name="l00080"></a>00080         
<a name="l00081"></a>00081         <span class="comment">//TODO: allow one &apos;.&apos; character in the number</span>
<a name="l00082"></a>00082         <span class="keywordflow">while</span>(*p &gt;= 0x30 &amp;&amp; *p &lt;= 0x39 &amp;&amp; i &lt; <span class="keyword">sizeof</span>(buf)){
<a name="l00083"></a>00083                 buf[i] = *p;
<a name="l00084"></a>00084                 ++i;
<a name="l00085"></a>00085                 ++p;
<a name="l00086"></a>00086                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(i &lt; <span class="keyword">sizeof</span>(buf))
<a name="l00087"></a>00087         }
<a name="l00088"></a>00088         buf[i] = 0;<span class="comment">//null terminate</span>
<a name="l00089"></a>00089         
<a name="l00090"></a>00090         <span class="keywordflow">if</span>(i == 0)
<a name="l00091"></a>00091                 <span class="keywordflow">return</span> 0;
<a name="l00092"></a>00092         
<a name="l00093"></a>00093         out_Res = atof(buf);
<a name="l00094"></a>00094         <span class="keywordflow">return</span> p;
<a name="l00095"></a>00095 }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 
<a name="l00102"></a><a class="code" href="classting_1_1Vector2.htm">00102</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2</a>{
<a name="l00103"></a><a class="code" href="classting_1_1Vector2.htm#a2ecd734023416e1de51b0df7577475bd">00103</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1Vector3.htm">Vector3</a>&lt;T&gt;;
<a name="l00104"></a>00104 
<a name="l00105"></a>00105         <a class="code" href="namespaceting.htm#a4e15e8cdd044afbab6acf181c54edcb5">STATIC_ASSERT</a>(<span class="keyword">sizeof</span>(<a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2</a>) == <span class="keyword">sizeof</span>(T) * 2)
<a name="l00106"></a>00106 public:
<a name="l00110"></a>00110         T x;
<a name="l00111"></a>00111 
<a name="l00115"></a>00115         T y;
<a name="l00116"></a>00116 
<a name="l00122"></a>00122         inline <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2</a>(){}
<a name="l00123"></a>00123 
<a name="l00129"></a>00129         <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2</a>(T vecX, T vecY) :
<a name="l00130"></a>00130                         x(vecX),
<a name="l00131"></a>00131                         y(vecY)
<a name="l00132"></a>00132         {}
<a name="l00133"></a>00133 
<a name="l00134"></a>00134         <span class="comment">//NOTE: copy constructor will be generated by compiler</span>
<a name="l00135"></a>00135 
<a name="l00142"></a>00142         Vector2(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector2.htm#a2ecd734023416e1de51b0df7577475bd">Vector3&lt;T&gt;</a>&amp; vec);
<a name="l00143"></a>00143 
<a name="l00148"></a>00148         <span class="keyword">inline</span> T&amp; operator[](<span class="keywordtype">unsigned</span> i){
<a name="l00149"></a>00149                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(i &lt; 2)
<a name="l00150"></a>00150                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>( &amp;((&amp;this-&gt;x)[0]) == &amp;this-&gt;x)
<a name="l00151"></a>00151                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>( &amp;((&amp;this-&gt;x)[1]) == &amp;this-&gt;y)
<a name="l00152"></a>00152                 return (&amp;this-&gt;x)[i];
<a name="l00153"></a>00153         }
<a name="l00154"></a>00154 
<a name="l00159"></a>00159         inline const T&amp; operator[](<span class="keywordtype">unsigned</span> i)<span class="keyword">const</span>{
<a name="l00160"></a>00160                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(i &lt; 2)
<a name="l00161"></a>00161                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>( &amp;((&amp;this-&gt;x)[0]) == &amp;this-&gt;x)
<a name="l00162"></a>00162                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>( &amp;((&amp;this-&gt;x)[1]) == &amp;this-&gt;y)
<a name="l00163"></a>00163                 return (&amp;this-&gt;x)[i];
<a name="l00164"></a>00164         }
<a name="l00165"></a>00165 
<a name="l00171"></a>00171         inline Vector2&amp; operator=(const Vector2&amp; vec){
<a name="l00172"></a>00172                 this-&gt;x = vec.x;
<a name="l00173"></a>00173                 this-&gt;y = vec.y;
<a name="l00174"></a>00174                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00175"></a>00175         }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 
<a name="l00184"></a>00184         <span class="keyword">inline</span> Vector2&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector2.htm#a2ecd734023416e1de51b0df7577475bd">Vector3&lt;T&gt;</a>&amp; vec);
<a name="l00185"></a>00185 
<a name="l00192"></a>00192         <span class="keyword">inline</span> Vector2 operator+(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector2.htm#a2ecd734023416e1de51b0df7577475bd">Vector3&lt;T&gt;</a>&amp; vec)<span class="keyword">const</span>;
<a name="l00193"></a>00193 
<a name="l00200"></a>00200         <span class="keyword">inline</span> Vector2&amp; operator+=(<span class="keyword">const</span> Vector2&amp; vec){
<a name="l00201"></a>00201                 this-&gt;x += vec.x;
<a name="l00202"></a>00202                 this-&gt;y += vec.y;
<a name="l00203"></a>00203                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00204"></a>00204         }
<a name="l00205"></a>00205 
<a name="l00211"></a>00211         <span class="keyword">inline</span> Vector2 operator+(<span class="keyword">const</span> Vector2&amp; vec)<span class="keyword">const</span>{
<a name="l00212"></a>00212                 <span class="keywordflow">return</span> (Vector2(*<span class="keyword">this</span>) += vec);
<a name="l00213"></a>00213         }
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 
<a name="l00216"></a>00216         <span class="keyword">inline</span> Vector2&amp; operator-=(<span class="keyword">const</span> Vector2&amp; vec){
<a name="l00217"></a>00217                 this-&gt;x -= vec.x;
<a name="l00218"></a>00218                 this-&gt;y -= vec.y;
<a name="l00219"></a>00219                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00220"></a>00220         }
<a name="l00221"></a>00221 
<a name="l00222"></a>00222         <span class="keyword">inline</span> Vector2 operator-(<span class="keyword">const</span> Vector2&amp; vec)<span class="keyword">const</span>{
<a name="l00223"></a>00223                 <span class="keywordflow">return</span> (Vector2(*<span class="keyword">this</span>) -= vec);
<a name="l00224"></a>00224         }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226         <span class="keyword">inline</span> Vector2 operator-(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector2.htm#a2ecd734023416e1de51b0df7577475bd">Vector3&lt;T&gt;</a>&amp; vec)<span class="keyword">const</span>;
<a name="l00227"></a>00227         
<a name="l00228"></a>00228         <span class="comment">//unary minus</span>
<a name="l00229"></a>00229         <span class="keyword">inline</span> Vector2 operator-()<span class="keyword">const</span>{
<a name="l00230"></a>00230                 <span class="keywordflow">return</span> Vector2(-this-&gt;x, -this-&gt;y);
<a name="l00231"></a>00231         }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233         <span class="keyword">inline</span> Vector2&amp; operator*=(T num){
<a name="l00234"></a>00234                 this-&gt;x *= num;
<a name="l00235"></a>00235                 this-&gt;y *= num;
<a name="l00236"></a>00236                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00237"></a>00237         }
<a name="l00238"></a>00238 
<a name="l00239"></a>00239         <span class="keyword">inline</span> Vector2 operator*(T num)<span class="keyword">const</span>{
<a name="l00240"></a>00240                 <span class="keywordflow">return</span> (Vector2(*<span class="keyword">this</span>) *= num);
<a name="l00241"></a>00241         }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243         <span class="comment">//operator num * vec</span>
<a name="l00244"></a><a class="code" href="classting_1_1Vector2.htm#ab8ad20beb2b3109dc4e0a7bd36314178">00244</a>         <span class="keyword">inline</span> <span class="keyword">friend</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2</a> <a class="code" href="classting_1_1Vector2.htm#ab8ad20beb2b3109dc4e0a7bd36314178">operator*</a>(T num, <span class="keyword">const</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2</a>&amp; vec){
<a name="l00245"></a>00245                 <span class="keywordflow">return</span> vec * num;
<a name="l00246"></a>00246         }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248         <span class="keyword">inline</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2</a>&amp; operator/=(T num){
<a name="l00249"></a>00249                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(num != 0)
<a name="l00250"></a>00250                 this-&gt;x /= num;
<a name="l00251"></a>00251                 this-&gt;y /= num;
<a name="l00252"></a>00252                 return (*this);
<a name="l00253"></a>00253         }
<a name="l00254"></a>00254 
<a name="l00255"></a>00255         inline <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2</a> operator/(T num)<span class="keyword">const</span>{
<a name="l00256"></a>00256                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(num != 0)
<a name="l00257"></a>00257                 return (<a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2</a>(*this) /= num);
<a name="l00258"></a>00258         }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260         <span class="comment">//dot product</span>
<a name="l00261"></a>00261         inline T operator*(const <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2</a>&amp; vec)<span class="keyword">const</span>{
<a name="l00262"></a>00262                 <span class="keywordflow">return</span> (this-&gt;x * vec.x + this-&gt;y * vec.y);
<a name="l00263"></a>00263         }
<a name="l00264"></a>00264 
<a name="l00265"></a>00265         <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> Vector2&amp; vec)<span class="keyword">const</span>{
<a name="l00266"></a>00266                 <span class="keywordflow">return</span> this-&gt;x == vec.x &amp;&amp; this-&gt;y == vec.y;
<a name="l00267"></a>00267         }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269         <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> Vector2&amp; vec)<span class="keyword">const</span>{
<a name="l00270"></a>00270                 <span class="keywordflow">return</span> !this-&gt;operator==(vec);
<a name="l00271"></a>00271         }
<a name="l00272"></a>00272 
<a name="l00273"></a>00273         <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsZero()<span class="keyword">const</span>{
<a name="l00274"></a>00274                 <span class="keywordflow">return</span> (this-&gt;x == 0 &amp;&amp; this-&gt;y == 0);
<a name="l00275"></a>00275         }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277         <span class="keyword">inline</span> Vector2&amp; Negate(){
<a name="l00278"></a>00278                 <span class="comment">//NOTE: this is faster than // (*this) = -(*this);</span>
<a name="l00279"></a>00279                 this-&gt;x = -this-&gt;x;
<a name="l00280"></a>00280                 this-&gt;y = -this-&gt;y;
<a name="l00281"></a>00281                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00282"></a>00282         }
<a name="l00283"></a>00283 
<a name="l00284"></a>00284         <span class="keyword">inline</span> T MagPow2(){
<a name="l00285"></a>00285                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(this-&gt;x) + <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(this-&gt;y);
<a name="l00286"></a>00286         }
<a name="l00287"></a>00287 
<a name="l00288"></a>00288         <span class="keyword">inline</span> T Magnitude(){
<a name="l00289"></a>00289                 <span class="keywordflow">return</span> T( sqrt(this-&gt;MagPow2()) );
<a name="l00290"></a>00290         }
<a name="l00291"></a>00291 
<a name="l00292"></a>00292         <span class="keyword">inline</span> Vector2&amp; Normalize(){
<a name="l00293"></a>00293                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;Magnitude() != 0)
<a name="l00294"></a>00294                 return (*this) /= this-&gt;Magnitude();
<a name="l00295"></a>00295         }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297         inline Vector2&amp; Scale(T value){
<a name="l00298"></a>00298                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>) *= value;
<a name="l00299"></a>00299         }
<a name="l00300"></a>00300 
<a name="l00301"></a>00301         <span class="keyword">inline</span> Vector2&amp; SetToZero(){
<a name="l00302"></a>00302                 this-&gt;x = 0;
<a name="l00303"></a>00303                 this-&gt;y = 0;
<a name="l00304"></a>00304                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00305"></a>00305         }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307         <span class="comment">//Angle is passed in radians</span>
<a name="l00308"></a>00308         Vector2&amp; Rotate(T angle){
<a name="l00309"></a>00309                 T cosa = T(::cos(angle));
<a name="l00310"></a>00310                 T sina = T(::sin(angle));
<a name="l00311"></a>00311                 T tmp = this-&gt;x * cosa - this-&gt;y * sina;
<a name="l00312"></a>00312                 this-&gt;y = this-&gt;y * cosa + this-&gt;x * sina;
<a name="l00313"></a>00313                 this-&gt;x = tmp;
<a name="l00314"></a>00314                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00315"></a>00315         }
<a name="l00316"></a>00316 
<a name="l00317"></a>00317         Vector2 Rotation(T angle)<span class="keyword">const</span>{
<a name="l00318"></a>00318                 <span class="keywordflow">return</span> Vector2(*this).Rotate(angle);
<a name="l00319"></a>00319         }
<a name="l00320"></a>00320 
<a name="l00321"></a>00321 
<a name="l00330"></a>00330         <span class="keyword">static</span> Vector2 ParseXY(<span class="keyword">const</span> <span class="keywordtype">char</span>* str){
<a name="l00331"></a>00331                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(str)
<a name="l00332"></a>00332 
<a name="l00333"></a>00333                 Vector2 vec;
<a name="l00334"></a>00334 
<a name="l00335"></a>00335                 const <span class="keywordtype">char</span> *p = str;
<a name="l00336"></a>00336 
<a name="l00337"></a>00337                 <span class="comment">//search the first number</span>
<a name="l00338"></a>00338                 <span class="comment">//TODO: allow first &apos;-&apos; character</span>
<a name="l00339"></a>00339                 while(*p &lt; 0x30 || *p &gt; 0x39){
<a name="l00340"></a>00340                         <span class="keywordflow">if</span>(*p == 0)
<a name="l00341"></a>00341                                 <span class="keywordflow">throw</span> Exc(<span class="stringliteral">&quot;Vector2::ParseXY(): no number found&quot;</span>);
<a name="l00342"></a>00342                         ++p;
<a name="l00343"></a>00343                 }
<a name="l00344"></a>00344                 
<a name="l00345"></a>00345                 p = ParseNum&lt;T&gt;(p, vec.x);
<a name="l00346"></a>00346                 <span class="keywordflow">if</span>(!p)
<a name="l00347"></a>00347                         <span class="keywordflow">throw</span> Exc(<span class="stringliteral">&quot;Vector2::ParseXY(): input string should start with dight&quot;</span>);
<a name="l00348"></a>00348 
<a name="l00349"></a>00349                 <span class="comment">//search next number</span>
<a name="l00350"></a>00350                 <span class="comment">//TODO: allow first &apos;-&apos; character</span>
<a name="l00351"></a>00351                 <span class="keywordflow">while</span>(*p &lt; 0x30 || *p &gt; 0x39){
<a name="l00352"></a>00352                         <span class="keywordflow">if</span>(*p == 0)
<a name="l00353"></a>00353                                 <span class="keywordflow">throw</span> Exc(<span class="stringliteral">&quot;Vector2::ParseXY(): second number not found&quot;</span>);
<a name="l00354"></a>00354                         ++p;
<a name="l00355"></a>00355                 }
<a name="l00356"></a>00356 
<a name="l00357"></a>00357                 p = ParseNum&lt;T&gt;(p, vec.y);
<a name="l00358"></a>00358                 <span class="keywordflow">if</span>(!p)
<a name="l00359"></a>00359                         <span class="keywordflow">throw</span> Exc(<span class="stringliteral">&quot;Vector2::ParseXY(): second number parsing failed&quot;</span>);
<a name="l00360"></a>00360 
<a name="l00361"></a>00361                 <span class="keywordflow">return</span> vec;
<a name="l00362"></a>00362         }
<a name="l00363"></a>00363         
<a name="l00364"></a>00364 <span class="preprocessor">#ifdef DEBUG  </span>
<a name="l00365"></a>00365 <span class="preprocessor"></span>        <span class="keyword">friend</span> std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const Vector2&lt;T&gt;&amp; vec){
<a name="l00366"></a>00366                 s&lt;&lt;<span class="stringliteral">&quot;(&quot;</span>&lt;&lt;vec.x&lt;&lt;<span class="stringliteral">&quot;, &quot;</span>&lt;&lt;vec.y&lt;&lt;<span class="stringliteral">&quot;)&quot;</span>;
<a name="l00367"></a>00367                 <span class="keywordflow">return</span> s;
<a name="l00368"></a>00368         }
<a name="l00369"></a>00369 <span class="preprocessor">#endif</span>
<a name="l00370"></a>00370 <span class="preprocessor"></span>};<span class="comment">//~class Vector2</span>
<a name="l00371"></a>00371 
<a name="l00372"></a>00372 
<a name="l00373"></a>00373 
<a name="l00374"></a>00374 <span class="comment">//===============================</span>
<a name="l00375"></a>00375 <span class="comment">//</span>
<a name="l00376"></a>00376 <span class="comment">//</span>
<a name="l00377"></a>00377 <span class="comment">//      Vector3 class</span>
<a name="l00378"></a>00378 <span class="comment">//</span>
<a name="l00379"></a>00379 <span class="comment">//</span>
<a name="l00380"></a>00380 <span class="comment">//===============================</span>
<a name="l00381"></a><a class="code" href="classting_1_1Vector3.htm">00381</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Vector3.htm">Vector3</a>{
<a name="l00382"></a><a class="code" href="classting_1_1Vector3.htm#a0c3f7391ff69bf03ff1b42c691c68ccc">00382</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2</a>&lt;T&gt;;
<a name="l00383"></a><a class="code" href="classting_1_1Vector3.htm#a5bf1644fae9bb3a0911ee36a525e120c">00383</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&lt;T&gt;;
<a name="l00384"></a>00384 
<a name="l00385"></a>00385         <a class="code" href="namespaceting.htm#a4e15e8cdd044afbab6acf181c54edcb5">STATIC_ASSERT</a>(<span class="keyword">sizeof</span>(<a class="code" href="classting_1_1Vector3.htm">Vector3</a>) == <span class="keyword">sizeof</span>(T) * 3)
<a name="l00386"></a>00386 public:
<a name="l00387"></a>00387         T x, y, z;
<a name="l00388"></a>00388         
<a name="l00389"></a>00389         inline <a class="code" href="classting_1_1Vector3.htm">Vector3</a>(){}<span class="comment">//default constructor</span>
<a name="l00390"></a>00390         
<a name="l00391"></a>00391         <a class="code" href="classting_1_1Vector3.htm">Vector3</a>(T vecX, T vecY, T vecZ){
<a name="l00392"></a>00392                 this-&gt;x = vecX;
<a name="l00393"></a>00393                 this-&gt;y = vecY;
<a name="l00394"></a>00394                 this-&gt;z = vecZ;
<a name="l00395"></a>00395         }
<a name="l00396"></a>00396 
<a name="l00397"></a>00397         <span class="comment">//copy constructor will be generated by compiler</span>
<a name="l00398"></a>00398 
<a name="l00399"></a>00399         Vector3(T num){
<a name="l00400"></a>00400                 this-&gt;operator=(num);
<a name="l00401"></a>00401         }
<a name="l00402"></a>00402 
<a name="l00403"></a>00403         Vector3(<span class="keyword">const</span> Vector2&lt;T&gt;&amp; vec){
<a name="l00404"></a>00404                 this-&gt;x = vec.x;
<a name="l00405"></a>00405                 this-&gt;y = vec.y;
<a name="l00406"></a>00406                 this-&gt;z = 0;
<a name="l00407"></a>00407         }
<a name="l00408"></a>00408 
<a name="l00409"></a>00409         <span class="keyword">inline</span> T&amp; operator[](<span class="keywordtype">unsigned</span> i){
<a name="l00410"></a>00410                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(i &lt; 3)
<a name="l00411"></a>00411                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>( &amp;((&amp;this-&gt;x)[0]) == &amp;this-&gt;x)
<a name="l00412"></a>00412                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>( &amp;((&amp;this-&gt;x)[1]) == &amp;this-&gt;y)
<a name="l00413"></a>00413                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>( &amp;((&amp;this-&gt;x)[2]) == &amp;this-&gt;z)
<a name="l00414"></a>00414                 return (&amp;this-&gt;x)[i];
<a name="l00415"></a>00415         }
<a name="l00416"></a>00416 
<a name="l00417"></a>00417         inline const T&amp; operator[](<span class="keywordtype">unsigned</span> i)<span class="keyword">const</span>{
<a name="l00418"></a>00418                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(i &lt; 3)
<a name="l00419"></a>00419                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>( &amp;((&amp;this-&gt;x)[0]) == &amp;this-&gt;x)
<a name="l00420"></a>00420                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>( &amp;((&amp;this-&gt;x)[1]) == &amp;this-&gt;y)
<a name="l00421"></a>00421                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>( &amp;((&amp;this-&gt;x)[2]) == &amp;this-&gt;z)
<a name="l00422"></a>00422                 return (&amp;this-&gt;x)[i];
<a name="l00423"></a>00423         }
<a name="l00424"></a>00424 
<a name="l00425"></a>00425         inline Vector3&amp; operator=(const Vector3&amp; vec){
<a name="l00426"></a>00426                 this-&gt;x = vec.x;
<a name="l00427"></a>00427                 this-&gt;y = vec.y;
<a name="l00428"></a>00428                 this-&gt;z = vec.z;
<a name="l00429"></a>00429                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00430"></a>00430         }
<a name="l00431"></a>00431 
<a name="l00432"></a>00432         <span class="keyword">inline</span> Vector3&amp; operator=(<span class="keyword">const</span> Vector2&lt;T&gt;&amp; vec);
<a name="l00433"></a>00433 
<a name="l00434"></a>00434         <span class="keyword">inline</span> Vector3&amp; operator=(T num){
<a name="l00435"></a>00435                 this-&gt;x = num;
<a name="l00436"></a>00436                 this-&gt;y = num;
<a name="l00437"></a>00437                 this-&gt;z = num;
<a name="l00438"></a>00438                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00439"></a>00439         }
<a name="l00440"></a>00440 
<a name="l00441"></a>00441         <span class="keyword">inline</span> Vector3&amp; operator+=(<span class="keyword">const</span> Vector2&lt;T&gt;&amp; vec);
<a name="l00442"></a>00442 
<a name="l00443"></a>00443         <span class="keyword">inline</span> Vector3&amp; operator+=(<span class="keyword">const</span> Vector3&amp; vec){
<a name="l00444"></a>00444                 this-&gt;x += vec.x;
<a name="l00445"></a>00445                 this-&gt;y += vec.y;
<a name="l00446"></a>00446                 this-&gt;z += vec.z;
<a name="l00447"></a>00447                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00448"></a>00448         }
<a name="l00449"></a>00449 
<a name="l00450"></a>00450         <span class="keyword">inline</span> Vector3 operator+(<span class="keyword">const</span> Vector3&amp; vec)<span class="keyword">const</span>{
<a name="l00451"></a>00451                 <span class="keywordflow">return</span> (Vector3(*<span class="keyword">this</span>) += vec);
<a name="l00452"></a>00452         }
<a name="l00453"></a>00453 
<a name="l00454"></a>00454         <span class="keyword">inline</span> Vector3&amp; operator-=(<span class="keyword">const</span> Vector3&amp; vec){
<a name="l00455"></a>00455                 this-&gt;x -= vec.x;
<a name="l00456"></a>00456                 this-&gt;y -= vec.y;
<a name="l00457"></a>00457                 this-&gt;z -= vec.z;
<a name="l00458"></a>00458                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00459"></a>00459         }
<a name="l00460"></a>00460 
<a name="l00461"></a>00461         <span class="keyword">inline</span> Vector3 operator-(<span class="keyword">const</span> Vector3&amp; vec)<span class="keyword">const</span>{
<a name="l00462"></a>00462                 <span class="keywordflow">return</span> (Vector3(*<span class="keyword">this</span>) -= vec);
<a name="l00463"></a>00463         }
<a name="l00464"></a>00464 
<a name="l00465"></a>00465         <span class="comment">//unary minus</span>
<a name="l00466"></a>00466         <span class="keyword">inline</span> Vector3 operator-()<span class="keyword">const</span>{
<a name="l00467"></a>00467                 <span class="keywordflow">return</span> Vector3(*this).Negate();
<a name="l00468"></a>00468         }
<a name="l00469"></a>00469 
<a name="l00470"></a>00470         <span class="keyword">inline</span> Vector3&amp; operator*=(T num){
<a name="l00471"></a>00471                 this-&gt;x *= num;
<a name="l00472"></a>00472                 this-&gt;y *= num;
<a name="l00473"></a>00473                 this-&gt;z *= num;
<a name="l00474"></a>00474                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00475"></a>00475         }
<a name="l00476"></a>00476 
<a name="l00477"></a>00477         <span class="keyword">inline</span> Vector3 operator*(T num)<span class="keyword">const</span>{
<a name="l00478"></a>00478                 <span class="keywordflow">return</span> (Vector3(*<span class="keyword">this</span>) *= num);
<a name="l00479"></a>00479         }
<a name="l00480"></a>00480 
<a name="l00481"></a><a class="code" href="classting_1_1Vector3.htm#a3c50bb14b46899d7f444d67b99eae756">00481</a>         <span class="keyword">inline</span> <span class="keyword">friend</span> <a class="code" href="classting_1_1Vector3.htm">Vector3</a> <a class="code" href="classting_1_1Vector3.htm#a3c50bb14b46899d7f444d67b99eae756">operator*</a>(T num, <span class="keyword">const</span> <a class="code" href="classting_1_1Vector3.htm">Vector3</a>&amp; vec){
<a name="l00482"></a>00482                 <span class="keywordflow">return</span> vec * num;
<a name="l00483"></a>00483         }
<a name="l00484"></a>00484 
<a name="l00485"></a>00485         <span class="keyword">inline</span> <a class="code" href="classting_1_1Vector3.htm">Vector3</a>&amp; operator/=(T num){
<a name="l00486"></a>00486                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(num != 0)
<a name="l00487"></a>00487                 this-&gt;x /= num;
<a name="l00488"></a>00488                 this-&gt;y /= num;
<a name="l00489"></a>00489                 this-&gt;z /= num;
<a name="l00490"></a>00490                 return (*this);
<a name="l00491"></a>00491         }
<a name="l00492"></a>00492 
<a name="l00493"></a>00493         inline <a class="code" href="classting_1_1Vector3.htm">Vector3</a> operator/(T num){
<a name="l00494"></a>00494                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(num != 0, <span class="stringliteral">&quot;Vector3::operator/(): division by 0&quot;</span>)
<a name="l00495"></a>00495                 return (<a class="code" href="classting_1_1Vector3.htm">Vector3</a>(*this) /= num);
<a name="l00496"></a>00496         }
<a name="l00497"></a>00497 
<a name="l00498"></a>00498         <span class="comment">//Dot product</span>
<a name="l00499"></a>00499         inline T operator*(const <a class="code" href="classting_1_1Vector3.htm">Vector3</a>&amp; vec)<span class="keyword">const</span>{
<a name="l00500"></a>00500                 <span class="keywordflow">return</span> this-&gt;x * vec.x +
<a name="l00501"></a>00501                                         this-&gt;y * vec.y +
<a name="l00502"></a>00502                                         this-&gt;z * vec.z;
<a name="l00503"></a>00503         }
<a name="l00504"></a>00504 
<a name="l00505"></a>00505         <span class="comment">//Cross product</span>
<a name="l00506"></a>00506         <span class="keyword">inline</span> Vector3 operator%(<span class="keyword">const</span> Vector3&amp; vec)<span class="keyword">const</span>{
<a name="l00507"></a>00507                 <span class="keywordflow">return</span> Vector3(this-&gt;y * vec.z - this-&gt;z * vec.y,
<a name="l00508"></a>00508                                         this-&gt;z * vec.x - this-&gt;x * vec.z,
<a name="l00509"></a>00509                                         this-&gt;x * vec.y - this-&gt;y * vec.x
<a name="l00510"></a>00510                                 );
<a name="l00511"></a>00511         }
<a name="l00512"></a>00512 
<a name="l00513"></a>00513         <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsZero()<span class="keyword">const</span>{
<a name="l00514"></a>00514                 <span class="keywordflow">return</span> (this-&gt;x == 0 &amp;&amp; this-&gt;y == 0 &amp;&amp; this-&gt;z == 0);
<a name="l00515"></a>00515         }
<a name="l00516"></a>00516 
<a name="l00517"></a>00517         <span class="keyword">inline</span> Vector3&amp; Negate(){
<a name="l00518"></a>00518                 this-&gt;x = -this-&gt;x;
<a name="l00519"></a>00519                 this-&gt;y = -this-&gt;y;
<a name="l00520"></a>00520                 this-&gt;z = -this-&gt;z;
<a name="l00521"></a>00521                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00522"></a>00522         }
<a name="l00523"></a>00523 
<a name="l00524"></a>00524         <span class="comment">//power 2 of the magnitude</span>
<a name="l00525"></a>00525         <span class="keyword">inline</span> T MagPow2()<span class="keyword">const</span>{
<a name="l00526"></a>00526                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(this-&gt;x) + <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(this-&gt;y) + <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(this-&gt;z);
<a name="l00527"></a>00527         }
<a name="l00528"></a>00528 
<a name="l00529"></a>00529         <span class="keyword">inline</span> T Magnitude()<span class="keyword">const</span>{
<a name="l00530"></a>00530                 <span class="keywordflow">return</span> (T)sqrt(this-&gt;MagPow2());
<a name="l00531"></a>00531         }
<a name="l00532"></a>00532 
<a name="l00533"></a>00533         <span class="keyword">inline</span> Vector3&amp; Normalize(){
<a name="l00534"></a>00534                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;Magnitude() != 0)
<a name="l00535"></a>00535                 (*this) /= this-&gt;Magnitude();
<a name="l00536"></a>00536                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00537"></a>00537         }
<a name="l00538"></a>00538         
<a name="l00539"></a>00539         <span class="keyword">inline</span> Vector3&amp; SetToZero(){
<a name="l00540"></a>00540                 this-&gt;x = 0;
<a name="l00541"></a>00541                 this-&gt;y = 0;
<a name="l00542"></a>00542                 this-&gt;z = 0;
<a name="l00543"></a>00543                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00544"></a>00544         }
<a name="l00545"></a>00545 
<a name="l00546"></a>00546         <span class="keyword">inline</span> Vector3&amp; ProjectOnto(<span class="keyword">const</span> Vector3&amp; vec){
<a name="l00547"></a>00547                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;MagPow2() != 0)
<a name="l00548"></a>00548                 (*this) = vec * (vec * (*this)) / vec.MagPow2();
<a name="l00549"></a>00549                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00550"></a>00550         }
<a name="l00551"></a>00551 
<a name="l00552"></a>00552         <span class="comment">//rotate this vector with unit quaternion which represents a rotation</span>
<a name="l00553"></a>00553         <span class="keyword">inline</span> <a class="code" href="classting_1_1Vector2.htm#a2ecd734023416e1de51b0df7577475bd">Vector3&lt;T&gt;</a>&amp; Rotate(<span class="keyword">const</span> Quaternion&lt;T&gt;&amp; q);<span class="comment">//see implemenation below</span>
<a name="l00554"></a>00554 
<a name="l00555"></a>00555 <span class="preprocessor">#ifdef DEBUG  </span>
<a name="l00556"></a>00556 <span class="preprocessor"></span>        <span class="keyword">friend</span> std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const Vector3&lt;T&gt;&amp; vec){
<a name="l00557"></a>00557                 s&lt;&lt;<span class="stringliteral">&quot;(&quot;</span>&lt;&lt;vec.x&lt;&lt;<span class="stringliteral">&quot;, &quot;</span>&lt;&lt;vec.y&lt;&lt;<span class="stringliteral">&quot;, &quot;</span>&lt;&lt;vec.z&lt;&lt;<span class="stringliteral">&quot;)&quot;</span>;
<a name="l00558"></a>00558                 <span class="keywordflow">return</span> s;
<a name="l00559"></a>00559         }
<a name="l00560"></a>00560 <span class="preprocessor">#endif</span>
<a name="l00561"></a>00561 <span class="preprocessor"></span>};<span class="comment">//~class Vector3</span>
<a name="l00562"></a>00562 
<a name="l00563"></a>00563 
<a name="l00564"></a>00564 
<a name="l00565"></a>00565 <span class="comment">//===============================</span>
<a name="l00566"></a>00566 <span class="comment">//</span>
<a name="l00567"></a>00567 <span class="comment">//</span>
<a name="l00568"></a>00568 <span class="comment">//      Matrix4 class</span>
<a name="l00569"></a>00569 <span class="comment">//</span>
<a name="l00570"></a>00570 <span class="comment">//</span>
<a name="l00571"></a>00571 <span class="comment">//===============================</span>
<a name="l00578"></a><a class="code" href="classting_1_1Matrix4.htm">00578</a> <span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>{
<a name="l00579"></a>00579         <span class="comment">//OpenGL compatible matrix elements array, if T is float or double</span>
<a name="l00580"></a>00580         T m[4 * 4]; <span class="comment">//matrix components 0-3 1st column, 4-7 2nd column, 8-11 3rd column, 12-15 4th column</span>
<a name="l00581"></a>00581 <span class="keyword">public</span>:
<a name="l00582"></a>00582 
<a name="l00583"></a>00583 
<a name="l00584"></a>00584         
<a name="l00590"></a><a class="code" href="classting_1_1Matrix4.htm#aef22b8fade225f445d17a8834162fc7a">00590</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Matrix4.htm#aef22b8fade225f445d17a8834162fc7a" title="Default constructor.">Matrix4</a>(){}<span class="comment">//Default constructor.</span>
<a name="l00591"></a>00591 
<a name="l00592"></a>00592 
<a name="l00593"></a>00593 
<a name="l00594"></a>00594         <span class="comment">//copy constructor must be trivial.</span>
<a name="l00595"></a>00595         <span class="comment">//Let&apos;s allow compiler to make it for us.</span>
<a name="l00596"></a>00596         <span class="comment">//Matrix4(const Matrix4&amp; matr){}</span>
<a name="l00597"></a>00597 
<a name="l00598"></a>00598         
<a name="l00599"></a>00599 
<a name="l00613"></a><a class="code" href="classting_1_1Matrix4.htm#ac3e2f13c9c6287c763d57eebd8a7dc5b">00613</a>         <span class="keyword">inline</span> T* <a class="code" href="classting_1_1Matrix4.htm#ac3e2f13c9c6287c763d57eebd8a7dc5b" title="returns pointer to specified column.">operator[]</a>(<span class="keywordtype">unsigned</span> col){
<a name="l00614"></a>00614                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(col &lt; 4)
<a name="l00615"></a>00615                 <span class="keywordflow">return</span> &amp;this-&gt;m[col * 4];
<a name="l00616"></a>00616         }
<a name="l00617"></a>00617 
<a name="l00624"></a><a class="code" href="classting_1_1Matrix4.htm#a7a00abbabd23a5f56ba3ac19b1f5924b">00624</a>         <span class="keyword">inline</span> <span class="keyword">const</span> T* <a class="code" href="classting_1_1Matrix4.htm#a7a00abbabd23a5f56ba3ac19b1f5924b" title="returns pointer to specified column.">operator[]</a>(<span class="keywordtype">unsigned</span> col)<span class="keyword">const</span>{
<a name="l00625"></a>00625                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(col &lt; 4)
<a name="l00626"></a>00626                 <span class="keywordflow">return</span> &amp;this-&gt;m[col * 4];
<a name="l00627"></a>00627         }
<a name="l00628"></a>00628 
<a name="l00635"></a><a class="code" href="classting_1_1Matrix4.htm#a98a611d0c408ef0a9b421b6b77fb2bc9">00635</a>         <span class="keyword">inline</span> T&amp; <a class="code" href="classting_1_1Matrix4.htm#a98a611d0c408ef0a9b421b6b77fb2bc9" title="get element at given row and column.">E</a>(<span class="keywordtype">unsigned</span> row, <span class="keywordtype">unsigned</span> col){
<a name="l00636"></a>00636                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(row &lt; 4)
<a name="l00637"></a>00637                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(col &lt; 4)
<a name="l00638"></a>00638                 <span class="keywordflow">return</span> this-&gt;m[col * 4 + row];
<a name="l00639"></a>00639         }
<a name="l00640"></a>00640 
<a name="l00641"></a>00641         <span class="comment">//Multiply by Vector3 (M * V). i.e. transform vector with transformation matrix</span>
<a name="l00642"></a><a class="code" href="classting_1_1Matrix4.htm#ad07749e6549cd996f7c75f3a73a9e0dc">00642</a>         <a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;</a> <a class="code" href="classting_1_1Matrix4.htm#ad07749e6549cd996f7c75f3a73a9e0dc">operator*</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;</a>&amp; vec){
<a name="l00643"></a>00643                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;</a>(
<a name="l00644"></a>00644                                         this-&gt;m[0] * vec[0] + this-&gt;m[4] * vec[1] + this-&gt;m[8] * vec[2] + this-&gt;m[12],
<a name="l00645"></a>00645                                         this-&gt;m[1] * vec[0] + this-&gt;m[5] * vec[1] + this-&gt;m[9] * vec[2] + this-&gt;m[13],
<a name="l00646"></a>00646                                         this-&gt;m[2] * vec[0] + this-&gt;m[6] * vec[1] + this-&gt;m[10] * vec[2] + this-&gt;m[14]
<a name="l00647"></a>00647                                 );
<a name="l00648"></a>00648         }
<a name="l00649"></a>00649 
<a name="l00650"></a><a class="code" href="classting_1_1Matrix4.htm#a700447137c0528d9374acfe1ef0f4458">00650</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#a700447137c0528d9374acfe1ef0f4458">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; matr){
<a name="l00651"></a>00651                 memcpy(this-&gt;m, matr.m, <span class="keyword">sizeof</span>(this-&gt;m));
<a name="l00652"></a>00652                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00653"></a>00653         }
<a name="l00654"></a>00654 
<a name="l00655"></a>00655 
<a name="l00656"></a>00656 
<a name="l00660"></a><a class="code" href="classting_1_1Matrix4.htm#a6a609c1a4c7668fc4d166d8436889012">00660</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#a6a609c1a4c7668fc4d166d8436889012" title="Transpose matrix.">Transpose</a>(){
<a name="l00661"></a>00661                 <a class="code" href="namespaceting.htm#ab7e1d03ecc64fcfc9cbbc48816cbdece" title="Exchange two values.">Exchange</a>(this-&gt;m[1], this-&gt;m[4]);
<a name="l00662"></a>00662                 <a class="code" href="namespaceting.htm#ab7e1d03ecc64fcfc9cbbc48816cbdece" title="Exchange two values.">Exchange</a>(this-&gt;m[2], this-&gt;m[8]);
<a name="l00663"></a>00663                 <a class="code" href="namespaceting.htm#ab7e1d03ecc64fcfc9cbbc48816cbdece" title="Exchange two values.">Exchange</a>(this-&gt;m[6], this-&gt;m[9]);
<a name="l00664"></a>00664                 <a class="code" href="namespaceting.htm#ab7e1d03ecc64fcfc9cbbc48816cbdece" title="Exchange two values.">Exchange</a>(this-&gt;m[3], this-&gt;m[12]);
<a name="l00665"></a>00665                 <a class="code" href="namespaceting.htm#ab7e1d03ecc64fcfc9cbbc48816cbdece" title="Exchange two values.">Exchange</a>(this-&gt;m[7], this-&gt;m[13]);
<a name="l00666"></a>00666                 <a class="code" href="namespaceting.htm#ab7e1d03ecc64fcfc9cbbc48816cbdece" title="Exchange two values.">Exchange</a>(this-&gt;m[11], this-&gt;m[14]);
<a name="l00667"></a>00667                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00668"></a>00668         }
<a name="l00669"></a>00669 
<a name="l00670"></a>00670 
<a name="l00671"></a>00671 
<a name="l00678"></a><a class="code" href="classting_1_1Matrix4.htm#a6ab5b5895525b64140f78f00c170228e">00678</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#a6ab5b5895525b64140f78f00c170228e" title="Multipply by matrix from the right.">RightMultMatrix</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a> &amp;M){
<a name="l00679"></a>00679                 <span class="comment">//TODO: rewrite to use Matrix4 instead of T tmpM[16]</span>
<a name="l00680"></a>00680                 T tmpM[16];
<a name="l00681"></a>00681                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> i = 0; i &lt; 4; ++i){
<a name="l00682"></a>00682                         tmpM[4*i]  =m[0]*M.m[4*i]+m[4]*M.m[4*i+1]+m[8]*M.m[4*i+2]+ m[12]*M.m[4*i+3];
<a name="l00683"></a>00683                         tmpM[4*i+1]=m[1]*M.m[4*i]+m[5]*M.m[4*i+1]+m[9]*M.m[4*i+2]+ m[13]*M.m[4*i+3];
<a name="l00684"></a>00684                         tmpM[4*i+2]=m[2]*M.m[4*i]+m[6]*M.m[4*i+1]+m[10]*M.m[4*i+2]+m[14]*M.m[4*i+3];
<a name="l00685"></a>00685                         tmpM[4*i+3]=m[3]*M.m[4*i]+m[7]*M.m[4*i+1]+m[11]*M.m[4*i+2]+m[15]*M.m[4*i+3];
<a name="l00686"></a>00686                 }
<a name="l00687"></a>00687                 memcpy(this-&gt;m, tmpM, <span class="keyword">sizeof</span>(this-&gt;m));
<a name="l00688"></a>00688                 <span class="comment">//*this=tmp;</span>
<a name="l00689"></a>00689                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00690"></a>00690         }
<a name="l00691"></a>00691 
<a name="l00692"></a>00692 
<a name="l00693"></a>00693 
<a name="l00700"></a><a class="code" href="classting_1_1Matrix4.htm#ac9d055817c88e65c7e30e39cada1406a">00700</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#ac9d055817c88e65c7e30e39cada1406a" title="Multipply by matrix from the left.">LeftMultMatrix</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; M){
<a name="l00701"></a>00701                 <span class="comment">//TODO: rewrite to use Matrix4 instead of T tmpM[16]</span>
<a name="l00702"></a>00702                 T tmpM[16];
<a name="l00703"></a>00703                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> i = 0; i &lt; 4; ++i){
<a name="l00704"></a>00704                         tmpM[4*i]  =m[4*i]*M.m[0]+m[4*i+1]*M.m[4]+m[4*i+2]*M.m[8]+ m[4*i+3]*M.m[12];
<a name="l00705"></a>00705                         tmpM[4*i+1]=m[4*i]*M.m[1]+m[4*i+1]*M.m[5]+m[4*i+2]*M.m[9]+ m[4*i+3]*M.m[13];
<a name="l00706"></a>00706                         tmpM[4*i+2]=m[4*i]*M.m[2]+m[4*i+1]*M.m[6]+m[4*i+2]*M.m[10]+m[4*i+3]*M.m[14];
<a name="l00707"></a>00707                         tmpM[4*i+3]=m[4*i]*M.m[3]+m[4*i+1]*M.m[7]+m[4*i+2]*M.m[11]+m[4*i+3]*M.m[15];
<a name="l00708"></a>00708                 }
<a name="l00709"></a>00709                 memcpy(this-&gt;m, tmpM, <span class="keyword">sizeof</span>(this-&gt;m));
<a name="l00710"></a>00710                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00711"></a>00711         }
<a name="l00712"></a>00712 
<a name="l00713"></a>00713 
<a name="l00714"></a>00714 
<a name="l00718"></a><a class="code" href="classting_1_1Matrix4.htm#a6f00fe491d97877cba77aa88aa577891">00718</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#a6f00fe491d97877cba77aa88aa577891" title="Initialize this matrix with identity matrix.">Identity</a>(){
<a name="l00719"></a>00719                 this-&gt;m[0] = 1;    this-&gt;m[4] = 0;    this-&gt;m[8] = 0;    this-&gt;m[12] = 0;
<a name="l00720"></a>00720                 this-&gt;m[1] = 0;    this-&gt;m[5] = 1;    this-&gt;m[9] = 0;    this-&gt;m[13] = 0;
<a name="l00721"></a>00721                 this-&gt;m[2] = 0;    this-&gt;m[6] = 0;    this-&gt;m[10] = 1;   this-&gt;m[14] = 0;
<a name="l00722"></a>00722                 this-&gt;m[3] = 0;    this-&gt;m[7] = 0;    this-&gt;m[11] = 0;   this-&gt;m[15] = 1;
<a name="l00723"></a>00723                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00724"></a>00724         }
<a name="l00725"></a>00725 
<a name="l00726"></a>00726 
<a name="l00727"></a>00727 
<a name="l00734"></a><a class="code" href="classting_1_1Matrix4.htm#a7ef0e8c30d0514578261728cea33b7ab">00734</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#a7ef0e8c30d0514578261728cea33b7ab" title="Multiply current matrix by scale matrix.">Scale</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;</a>&amp; scale){
<a name="l00735"></a>00735                 <span class="comment">//calculate first column</span>
<a name="l00736"></a>00736                 this-&gt;m[0] *= scale[0];
<a name="l00737"></a>00737                 this-&gt;m[1] *= scale[0];
<a name="l00738"></a>00738                 this-&gt;m[2] *= scale[0];
<a name="l00739"></a>00739                 this-&gt;m[3] *= scale[0];
<a name="l00740"></a>00740 
<a name="l00741"></a>00741                 <span class="comment">//calculate second column</span>
<a name="l00742"></a>00742                 this-&gt;m[4] *= scale[1];
<a name="l00743"></a>00743                 this-&gt;m[5] *= scale[1];
<a name="l00744"></a>00744                 this-&gt;m[6] *= scale[1];
<a name="l00745"></a>00745                 this-&gt;m[7] *= scale[1];
<a name="l00746"></a>00746 
<a name="l00747"></a>00747                 <span class="comment">//calculate third column</span>
<a name="l00748"></a>00748                 this-&gt;m[8] *= scale[2];
<a name="l00749"></a>00749                 this-&gt;m[9] *= scale[2];
<a name="l00750"></a>00750                 this-&gt;m[10] *= scale[2];
<a name="l00751"></a>00751                 this-&gt;m[11] *= scale[2];
<a name="l00752"></a>00752 
<a name="l00753"></a>00753                 <span class="comment">//NOTE: 4th column remains unchanged</span>
<a name="l00754"></a>00754                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00755"></a>00755         }
<a name="l00756"></a>00756 
<a name="l00757"></a>00757 
<a name="l00758"></a>00758 
<a name="l00765"></a><a class="code" href="classting_1_1Matrix4.htm#aa14dce19f3840518ec1f6841c7fcda3e">00765</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#aa14dce19f3840518ec1f6841c7fcda3e" title="Multiply current matrix by scale matrix.">Scale</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a>&amp; scale){
<a name="l00766"></a>00766                 <span class="comment">//calculate first column</span>
<a name="l00767"></a>00767                 this-&gt;m[0] *= scale[0];
<a name="l00768"></a>00768                 this-&gt;m[1] *= scale[0];
<a name="l00769"></a>00769                 this-&gt;m[2] *= scale[0];
<a name="l00770"></a>00770                 this-&gt;m[3] *= scale[0];
<a name="l00771"></a>00771 
<a name="l00772"></a>00772                 <span class="comment">//calculate second column</span>
<a name="l00773"></a>00773                 this-&gt;m[4] *= scale[1];
<a name="l00774"></a>00774                 this-&gt;m[5] *= scale[1];
<a name="l00775"></a>00775                 this-&gt;m[6] *= scale[1];
<a name="l00776"></a>00776                 this-&gt;m[7] *= scale[1];
<a name="l00777"></a>00777 
<a name="l00778"></a>00778                 <span class="comment">//NOTE: 3rd and 4th columns remain unchanged</span>
<a name="l00779"></a>00779                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00780"></a>00780         }
<a name="l00781"></a>00781 
<a name="l00782"></a>00782 
<a name="l00783"></a>00783 
<a name="l00792"></a><a class="code" href="classting_1_1Matrix4.htm#a893b9e8b8612a6a0e69659c3d7549201">00792</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#a893b9e8b8612a6a0e69659c3d7549201" title="Multiply current matrix by scale matrix.">Scale</a>(T x, T y, T z){
<a name="l00793"></a>00793                 <span class="keywordflow">return</span> this-&gt;Scale(<a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;</a>(x, y, z));
<a name="l00794"></a>00794         }
<a name="l00795"></a>00795 
<a name="l00796"></a>00796 
<a name="l00797"></a>00797 
<a name="l00806"></a><a class="code" href="classting_1_1Matrix4.htm#abd47f5dc40941fd5b16fb4945470fd41">00806</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#abd47f5dc40941fd5b16fb4945470fd41" title="Multiply current matrix by scale matrix.">Scale</a>(T x, T y){
<a name="l00807"></a>00807                 <span class="keywordflow">return</span> this-&gt;Scale(<a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a>(x, y));
<a name="l00808"></a>00808         }
<a name="l00809"></a>00809 
<a name="l00810"></a>00810 
<a name="l00811"></a>00811 
<a name="l00818"></a><a class="code" href="classting_1_1Matrix4.htm#a3c9d46fd628c978b040da8d69f23d291">00818</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#a3c9d46fd628c978b040da8d69f23d291" title="Multiply current matrix by scale matrix.">Scale</a>(T scale){
<a name="l00819"></a>00819                 <span class="keywordflow">return</span> this-&gt;Scale(<a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;</a>(scale, scale, scale));
<a name="l00820"></a>00820         }
<a name="l00821"></a>00821 
<a name="l00822"></a>00822 
<a name="l00823"></a>00823 
<a name="l00830"></a><a class="code" href="classting_1_1Matrix4.htm#a5184fd8e0256b130e92771fbbcbf1b35">00830</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#a5184fd8e0256b130e92771fbbcbf1b35" title="Multiply this matrix by translation matrix.">Translate</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;</a>&amp; t){
<a name="l00831"></a>00831                 <span class="comment">//NOTE: 1st, 2nd and 3rd columns remain unchanged</span>
<a name="l00832"></a>00832 
<a name="l00833"></a>00833                 <span class="comment">//calculate fourth column</span>
<a name="l00834"></a>00834                 this-&gt;m[12] = this-&gt;m[0] * t[0] + this-&gt;m[4] * t[1] + this-&gt;m[8] * t[2] + this-&gt;m[12];
<a name="l00835"></a>00835                 this-&gt;m[13] = this-&gt;m[1] * t[0] + this-&gt;m[5] * t[1] + this-&gt;m[9] * t[2] + this-&gt;m[13];
<a name="l00836"></a>00836                 this-&gt;m[14] = this-&gt;m[2] * t[0] + this-&gt;m[6] * t[1] + this-&gt;m[10] * t[2] + this-&gt;m[14];
<a name="l00837"></a>00837                 this-&gt;m[15] = this-&gt;m[3] * t[0] + this-&gt;m[7] * t[1] + this-&gt;m[11] * t[2] + this-&gt;m[15];
<a name="l00838"></a>00838 
<a name="l00839"></a>00839                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00840"></a>00840         }
<a name="l00841"></a>00841 
<a name="l00842"></a>00842 
<a name="l00843"></a>00843 
<a name="l00852"></a><a class="code" href="classting_1_1Matrix4.htm#a370d11912b57f5bea8a80835458abe0e">00852</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#a370d11912b57f5bea8a80835458abe0e" title="Multiply this matrix by translation matrix.">Translate</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a>&amp; t){
<a name="l00853"></a>00853                 <span class="comment">//NOTE: 1st, 2nd and 3rd columns remain unchanged</span>
<a name="l00854"></a>00854 
<a name="l00855"></a>00855                 <span class="comment">//calculate fourth column</span>
<a name="l00856"></a>00856                 this-&gt;m[12] = this-&gt;m[0] * t[0] + this-&gt;m[4] * t[1] + this-&gt;m[12];
<a name="l00857"></a>00857                 this-&gt;m[13] = this-&gt;m[1] * t[0] + this-&gt;m[5] * t[1] + this-&gt;m[13];
<a name="l00858"></a>00858                 this-&gt;m[14] = this-&gt;m[2] * t[0] + this-&gt;m[6] * t[1] + this-&gt;m[14];
<a name="l00859"></a>00859                 this-&gt;m[15] = this-&gt;m[3] * t[0] + this-&gt;m[7] * t[1] + this-&gt;m[15];
<a name="l00860"></a>00860 
<a name="l00861"></a>00861                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00862"></a>00862         }
<a name="l00863"></a>00863 
<a name="l00864"></a>00864 
<a name="l00865"></a>00865 
<a name="l00875"></a><a class="code" href="classting_1_1Matrix4.htm#aca18e469bfaa4e73177212ae7e56711c">00875</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#aca18e469bfaa4e73177212ae7e56711c" title="Multiply this matrix by translation matrix.">Translate</a>(T x, T y){
<a name="l00876"></a>00876                 <span class="keywordflow">return</span> this-&gt;Translate(<a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a>(x, y));
<a name="l00877"></a>00877         }
<a name="l00878"></a>00878 
<a name="l00879"></a>00879 
<a name="l00880"></a>00880 
<a name="l00887"></a>00887         <span class="keyword">inline</span> <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; Rotate(<span class="keyword">const</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion&lt;T&gt;</a>&amp; q);<span class="comment">//implementation see below</span>
<a name="l00888"></a>00888 
<a name="l00889"></a>00889 
<a name="l00890"></a>00890 
<a name="l00899"></a><a class="code" href="classting_1_1Matrix4.htm#ad8ffe73cd6394634186dfd061c61d8f3">00899</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#ad8ffe73cd6394634186dfd061c61d8f3" title="Multiply this matrix by rotation matrix.">Rotate</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;</a>&amp; rot){
<a name="l00900"></a>00900                 <span class="keywordflow">return</span> this-&gt;Rotate(<a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion&lt;T&gt;</a>(rot));
<a name="l00901"></a>00901         }
<a name="l00902"></a>00902 
<a name="l00903"></a>00903 
<a name="l00904"></a>00904         
<a name="l00905"></a>00905 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l00906"></a>00906 <span class="preprocessor"></span>        <span class="keyword">friend</span> std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const Matrix4&lt;T&gt;&amp; mat){
<a name="l00907"></a>00907                 s &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00908"></a>00908                 s &lt;&lt; <span class="stringliteral">&quot;/&quot;</span> &lt;&lt; mat[0][0] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; mat[1][0] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; mat[2][0] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; mat[3][0] &lt;&lt; <span class="stringliteral">&quot;\\&quot;</span> &lt;&lt; std::endl;
<a name="l00909"></a>00909                 s &lt;&lt; <span class="stringliteral">&quot;|&quot;</span> &lt;&lt; mat[0][1] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; mat[1][1] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; mat[2][1] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; mat[3][1] &lt;&lt; <span class="stringliteral">&quot;|&quot;</span> &lt;&lt; std::endl;
<a name="l00910"></a>00910                 s &lt;&lt; <span class="stringliteral">&quot;|&quot;</span> &lt;&lt; mat[0][2] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; mat[1][2] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; mat[2][2] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; mat[3][2] &lt;&lt; <span class="stringliteral">&quot;|&quot;</span> &lt;&lt; std::endl;
<a name="l00911"></a>00911                 s &lt;&lt; <span class="stringliteral">&quot;\\&quot;</span> &lt;&lt; mat[0][3] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; mat[1][3] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; mat[2][3] &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; mat[3][3] &lt;&lt; <span class="stringliteral">&quot;/&quot;</span>;
<a name="l00912"></a>00912                 <span class="keywordflow">return</span> s;
<a name="l00913"></a>00913         };
<a name="l00914"></a>00914 <span class="preprocessor">#endif</span>
<a name="l00915"></a>00915 <span class="preprocessor"></span>};<span class="comment">//~class Matrix4</span>
<a name="l00916"></a>00916 
<a name="l00917"></a>00917 
<a name="l00918"></a>00918 
<a name="l00919"></a>00919 <span class="comment">//===============================</span>
<a name="l00920"></a>00920 <span class="comment">//</span>
<a name="l00921"></a>00921 <span class="comment">//</span>
<a name="l00922"></a>00922 <span class="comment">//      Quaternion class</span>
<a name="l00923"></a>00923 <span class="comment">//</span>
<a name="l00924"></a>00924 <span class="comment">//</span>
<a name="l00925"></a>00925 <span class="comment">//===============================</span>
<a name="l00929"></a><a class="code" href="classting_1_1Quaternion.htm">00929</a> <span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>{
<a name="l00930"></a>00930 <span class="keyword">public</span>:
<a name="l00934"></a><a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3">00934</a>         T x;
<a name="l00935"></a>00935 
<a name="l00939"></a><a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90">00939</a>         T y;
<a name="l00940"></a>00940         
<a name="l00944"></a><a class="code" href="classting_1_1Quaternion.htm#a8b1ace9fd2d18c4fb09fbc726b2bcd40">00944</a>         T z;
<a name="l00945"></a>00945 
<a name="l00949"></a><a class="code" href="classting_1_1Quaternion.htm#a863829c048032b9bb73117d432d58101">00949</a>         T w;
<a name="l00950"></a>00950 
<a name="l00951"></a>00951 
<a name="l00952"></a>00952 
<a name="l00960"></a><a class="code" href="classting_1_1Quaternion.htm#a6508b08cdc5d4e8128cf62965ec6c784">00960</a>         <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>(T qx, T qy, T qz, T qw) :
<a name="l00961"></a>00961                         x(qx),
<a name="l00962"></a>00962                         y(qy),
<a name="l00963"></a>00963                         z(qz),
<a name="l00964"></a>00964                         w(qw)
<a name="l00965"></a>00965         {}
<a name="l00966"></a>00966 
<a name="l00967"></a>00967 
<a name="l00968"></a>00968 
<a name="l00977"></a>00977         <span class="comment">//this constructor creates unit quaternion of a rotation around the axis by |axis| radians</span>
<a name="l00978"></a><a class="code" href="classting_1_1Quaternion.htm#a0f23e5f2df97212f4fa059136219b0e6">00978</a>         <a class="code" href="classting_1_1Quaternion.htm#a0f23e5f2df97212f4fa059136219b0e6" title="Construct rotation quaternion.">Quaternion</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;</a>&amp; axis){
<a name="l00979"></a>00979                 T mag = axis.Magnitude();<span class="comment">//magnitude is a rotation angle</span>
<a name="l00980"></a>00980                 <span class="keywordflow">if</span>(mag != 0){
<a name="l00981"></a>00981                         <a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;</a> a = axis;
<a name="l00982"></a>00982                         a /= mag;<span class="comment">//normalize axis</span>
<a name="l00983"></a>00983                         this-&gt;InitRot(a.x, a.y, a.z, mag);
<a name="l00984"></a>00984                 }<span class="keywordflow">else</span>
<a name="l00985"></a>00985                         this-&gt;Identity();
<a name="l00986"></a>00986         }
<a name="l00987"></a>00987 
<a name="l00988"></a>00988 
<a name="l00989"></a>00989 
<a name="l00995"></a>00995         <span class="comment">// A default constructor</span>
<a name="l00996"></a><a class="code" href="classting_1_1Quaternion.htm#a1b68ef3b16c6d84f6df255ed42f512a0">00996</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm#a1b68ef3b16c6d84f6df255ed42f512a0" title="Default constructor.">Quaternion</a>(){}
<a name="l00997"></a>00997 
<a name="l00998"></a>00998 
<a name="l00999"></a>00999 
<a name="l01005"></a>01005         <span class="comment">//&quot;complex conjugate of&quot; operator</span>
<a name="l01006"></a><a class="code" href="classting_1_1Quaternion.htm#a03639f7bc45a3864088ff8d0e82d6489">01006</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a> <a class="code" href="classting_1_1Quaternion.htm#a03639f7bc45a3864088ff8d0e82d6489" title="Complex conjugate of this quaternion.">operator!</a>()<span class="keyword">const</span>{
<a name="l01007"></a>01007                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>(-this-&gt;x, -this-&gt;y, -this-&gt;z, this-&gt;w);
<a name="l01008"></a>01008         }
<a name="l01009"></a>01009 
<a name="l01010"></a>01010 
<a name="l01011"></a>01011 
<a name="l01012"></a><a class="code" href="classting_1_1Quaternion.htm#aed19cd51affc94bbb78e7a90e8f4fabf">01012</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; <a class="code" href="classting_1_1Quaternion.htm#aed19cd51affc94bbb78e7a90e8f4fabf">operator+=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; q){
<a name="l01013"></a>01013                 this-&gt;x += q.<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a>;
<a name="l01014"></a>01014                 this-&gt;y += q.<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a>;
<a name="l01015"></a>01015                 this-&gt;z += q.<a class="code" href="classting_1_1Quaternion.htm#a8b1ace9fd2d18c4fb09fbc726b2bcd40" title="z component.">z</a>;
<a name="l01016"></a>01016                 this-&gt;w += q.<a class="code" href="classting_1_1Quaternion.htm#a863829c048032b9bb73117d432d58101" title="w component.">w</a>;
<a name="l01017"></a>01017                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l01018"></a>01018         }
<a name="l01019"></a>01019 
<a name="l01020"></a>01020 
<a name="l01021"></a>01021 
<a name="l01022"></a><a class="code" href="classting_1_1Quaternion.htm#ace8a67ec40597173101ad95e69a2c648">01022</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a> <a class="code" href="classting_1_1Quaternion.htm#ace8a67ec40597173101ad95e69a2c648">operator+</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; q)<span class="keyword">const</span>{
<a name="l01023"></a>01023                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>(this-&gt;x + q.<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a>, this-&gt;y + q.<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a>, this-&gt;z + q.<a class="code" href="classting_1_1Quaternion.htm#a8b1ace9fd2d18c4fb09fbc726b2bcd40" title="z component.">z</a>, this-&gt;w + q.<a class="code" href="classting_1_1Quaternion.htm#a863829c048032b9bb73117d432d58101" title="w component.">w</a>);
<a name="l01024"></a>01024         }
<a name="l01025"></a>01025 
<a name="l01026"></a>01026 
<a name="l01027"></a>01027 
<a name="l01028"></a><a class="code" href="classting_1_1Quaternion.htm#a0c839f4ae364907fec23909bc1d0f1f6">01028</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; <a class="code" href="classting_1_1Quaternion.htm#a0c839f4ae364907fec23909bc1d0f1f6">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; q){
<a name="l01029"></a>01029                 this-&gt;x = q.<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a>;
<a name="l01030"></a>01030                 this-&gt;y = q.<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a>;
<a name="l01031"></a>01031                 this-&gt;z = q.<a class="code" href="classting_1_1Quaternion.htm#a8b1ace9fd2d18c4fb09fbc726b2bcd40" title="z component.">z</a>;
<a name="l01032"></a>01032                 this-&gt;w = q.<a class="code" href="classting_1_1Quaternion.htm#a863829c048032b9bb73117d432d58101" title="w component.">w</a>;
<a name="l01033"></a>01033                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l01034"></a>01034         }
<a name="l01035"></a>01035 
<a name="l01036"></a>01036 
<a name="l01037"></a>01037 
<a name="l01044"></a><a class="code" href="classting_1_1Quaternion.htm#a98337e9a37f64ecad15df619c7a630e5">01044</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; <a class="code" href="classting_1_1Quaternion.htm#a98337e9a37f64ecad15df619c7a630e5" title="Multiply by scalar and assign.">operator*=</a>(T s){
<a name="l01045"></a>01045                 this-&gt;x *= s;
<a name="l01046"></a>01046                 this-&gt;y *= s;
<a name="l01047"></a>01047                 this-&gt;z *= s;
<a name="l01048"></a>01048                 this-&gt;w *= s;
<a name="l01049"></a>01049                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l01050"></a>01050         }
<a name="l01051"></a>01051 
<a name="l01052"></a>01052 
<a name="l01053"></a>01053 
<a name="l01059"></a><a class="code" href="classting_1_1Quaternion.htm#a9ecf290c225269b489a896b8ed25adbe">01059</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a> <a class="code" href="classting_1_1Quaternion.htm#a9ecf290c225269b489a896b8ed25adbe" title="Multiply by scalar.">operator*</a>(T s)<span class="keyword">const</span>{
<a name="l01060"></a>01060                 <span class="keywordflow">return</span> (<a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>(*<span class="keyword">this</span>) *= s);
<a name="l01061"></a>01061         }
<a name="l01062"></a>01062 
<a name="l01063"></a>01063 
<a name="l01064"></a>01064 
<a name="l01071"></a><a class="code" href="classting_1_1Quaternion.htm#a0f537bd0ef34e68598f7a632ad16513f">01071</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; <a class="code" href="classting_1_1Quaternion.htm#a0f537bd0ef34e68598f7a632ad16513f" title="Divide by scalar and assign.">operator/=</a>(T s){
<a name="l01072"></a>01072                 this-&gt;x /= s;
<a name="l01073"></a>01073                 this-&gt;y /= s;
<a name="l01074"></a>01074                 this-&gt;z /= s;
<a name="l01075"></a>01075                 this-&gt;w /= s;
<a name="l01076"></a>01076                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l01077"></a>01077         }
<a name="l01078"></a>01078 
<a name="l01079"></a>01079 
<a name="l01080"></a>01080 
<a name="l01086"></a><a class="code" href="classting_1_1Quaternion.htm#a5a21663d4e682f883aebeca1b0480ebf">01086</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a> <a class="code" href="classting_1_1Quaternion.htm#a5a21663d4e682f883aebeca1b0480ebf" title="Divide by scalar.">operator/</a>(T s)<span class="keyword">const</span>{
<a name="l01087"></a>01087                 <span class="keywordflow">return</span> (<a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>(*<span class="keyword">this</span>) /= s);
<a name="l01088"></a>01088         }
<a name="l01089"></a>01089 
<a name="l01090"></a>01090 
<a name="l01091"></a>01091 
<a name="l01099"></a>01099         <span class="comment">//dot product of quaternions</span>
<a name="l01100"></a><a class="code" href="classting_1_1Quaternion.htm#a03d6fb5db01553a66f37f18651079933">01100</a>         <span class="keyword">inline</span> T <a class="code" href="classting_1_1Quaternion.htm#a03d6fb5db01553a66f37f18651079933" title="Dot product of quaternions.">operator*</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; q)<span class="keyword">const</span>{
<a name="l01101"></a>01101                 <span class="keywordflow">return</span> this-&gt;x * q.<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a> + this-&gt;y * q.<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a> + this-&gt;z * q.<a class="code" href="classting_1_1Quaternion.htm#a8b1ace9fd2d18c4fb09fbc726b2bcd40" title="z component.">z</a> + this-&gt;w * q.<a class="code" href="classting_1_1Quaternion.htm#a863829c048032b9bb73117d432d58101" title="w component.">w</a>;
<a name="l01102"></a>01102         }
<a name="l01103"></a>01103 
<a name="l01104"></a>01104 
<a name="l01105"></a>01105 
<a name="l01114"></a>01114         <span class="comment">//multiplication of quaternions</span>
<a name="l01115"></a><a class="code" href="classting_1_1Quaternion.htm#a5a315a29d5f8ffff7e66e78ef1da2279">01115</a>         <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; <a class="code" href="classting_1_1Quaternion.htm#a5a315a29d5f8ffff7e66e78ef1da2279" title="Multiply by quaternion and assign.">operator%=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; q){
<a name="l01116"></a>01116                 T a = (this-&gt;w + this-&gt;x) * (q.<a class="code" href="classting_1_1Quaternion.htm#a863829c048032b9bb73117d432d58101" title="w component.">w</a> + q.<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a>);
<a name="l01117"></a>01117                 T b = (this-&gt;z - this-&gt;y) * (q.<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a> - q.<a class="code" href="classting_1_1Quaternion.htm#a8b1ace9fd2d18c4fb09fbc726b2bcd40" title="z component.">z</a>);
<a name="l01118"></a>01118                 T c = (this-&gt;x - this-&gt;w) * (q.<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a> + q.<a class="code" href="classting_1_1Quaternion.htm#a8b1ace9fd2d18c4fb09fbc726b2bcd40" title="z component.">z</a>);
<a name="l01119"></a>01119                 T d = (this-&gt;y + this-&gt;z) * (q.<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a> - q.<a class="code" href="classting_1_1Quaternion.htm#a863829c048032b9bb73117d432d58101" title="w component.">w</a>);
<a name="l01120"></a>01120                 T e = (this-&gt;x + this-&gt;z) * (q.<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a> + q.<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a>);
<a name="l01121"></a>01121                 T f = (this-&gt;x - this-&gt;z) * (q.<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a> - q.<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a>);
<a name="l01122"></a>01122                 T g = (this-&gt;w + this-&gt;y) * (q.<a class="code" href="classting_1_1Quaternion.htm#a863829c048032b9bb73117d432d58101" title="w component.">w</a> - q.<a class="code" href="classting_1_1Quaternion.htm#a8b1ace9fd2d18c4fb09fbc726b2bcd40" title="z component.">z</a>);
<a name="l01123"></a>01123                 T h = (this-&gt;w - this-&gt;y) * (q.<a class="code" href="classting_1_1Quaternion.htm#a863829c048032b9bb73117d432d58101" title="w component.">w</a> + q.<a class="code" href="classting_1_1Quaternion.htm#a8b1ace9fd2d18c4fb09fbc726b2bcd40" title="z component.">z</a>);
<a name="l01124"></a>01124 
<a name="l01125"></a>01125                 this-&gt;x = a - (e + f + g + h) * 0.5f;
<a name="l01126"></a>01126                 this-&gt;y = -c + (e - f + g - h) * 0.5f;
<a name="l01127"></a>01127                 this-&gt;z = -d + (e - f - g + h) * 0.5f;
<a name="l01128"></a>01128                 this-&gt;w = b + (-e - f + g + h) * 0.5f;
<a name="l01129"></a>01129                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l01130"></a>01130         }
<a name="l01131"></a>01131 
<a name="l01132"></a>01132 
<a name="l01133"></a>01133 
<a name="l01141"></a>01141         <span class="comment">//multiplication of quaternions</span>
<a name="l01142"></a><a class="code" href="classting_1_1Quaternion.htm#ab01044a526872c3eb06a8d7163e78e9d">01142</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a> <a class="code" href="classting_1_1Quaternion.htm#ab01044a526872c3eb06a8d7163e78e9d" title="Multiply by quaternion.">operator%</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; q)<span class="keyword">const</span>{
<a name="l01143"></a>01143                 <span class="keywordflow">return</span> (<a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>(*<span class="keyword">this</span>) %= q);
<a name="l01144"></a>01144         }
<a name="l01145"></a>01145 
<a name="l01146"></a>01146 
<a name="l01147"></a>01147 
<a name="l01153"></a><a class="code" href="classting_1_1Quaternion.htm#a1739b67979aad41f4da99304b7787c55">01153</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; <a class="code" href="classting_1_1Quaternion.htm#a1739b67979aad41f4da99304b7787c55" title="Initialize with identity quaternion.">Identity</a>(){
<a name="l01154"></a>01154                 this-&gt;x = T(0);
<a name="l01155"></a>01155                 this-&gt;y = T(0);
<a name="l01156"></a>01156                 this-&gt;z = T(0);
<a name="l01157"></a>01157                 this-&gt;w = T(1);
<a name="l01158"></a>01158                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l01159"></a>01159         }
<a name="l01160"></a>01160 
<a name="l01161"></a>01161 
<a name="l01162"></a>01162 
<a name="l01168"></a>01168         <span class="comment">//Complex conjugate</span>
<a name="l01169"></a><a class="code" href="classting_1_1Quaternion.htm#a4abb5592e6002de5a78ce34985e84ae1">01169</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; <a class="code" href="classting_1_1Quaternion.htm#a4abb5592e6002de5a78ce34985e84ae1" title="Complex conjugate this quaternion.">Conjugate</a>(){
<a name="l01170"></a>01170                 *<span class="keyword">this</span> = !(*this);
<a name="l01171"></a>01171                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l01172"></a>01172         }
<a name="l01173"></a>01173 
<a name="l01174"></a>01174 
<a name="l01175"></a>01175 
<a name="l01181"></a><a class="code" href="classting_1_1Quaternion.htm#a5377f4f9f8a691bab3cd3b027698a768">01181</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; <a class="code" href="classting_1_1Quaternion.htm#a5377f4f9f8a691bab3cd3b027698a768" title="Negate this quaternion.">Negate</a>(){
<a name="l01182"></a>01182                 this-&gt;x = -this-&gt;x;
<a name="l01183"></a>01183                 this-&gt;y = -this-&gt;y;
<a name="l01184"></a>01184                 this-&gt;z = -this-&gt;z;
<a name="l01185"></a>01185                 this-&gt;w = -this-&gt;w;
<a name="l01186"></a>01186                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l01187"></a>01187         }
<a name="l01188"></a>01188 
<a name="l01189"></a>01189 
<a name="l01190"></a>01190 
<a name="l01195"></a>01195         <span class="comment">//returns the magnitude^2 of this quaternion</span>
<a name="l01196"></a><a class="code" href="classting_1_1Quaternion.htm#a720cad67f4ee1d517f7ddaa7dcfa8ff8">01196</a>         <span class="keyword">inline</span> T <a class="code" href="classting_1_1Quaternion.htm#a720cad67f4ee1d517f7ddaa7dcfa8ff8" title="Calculate power 2 from quaternion magnitude.">MagPow2</a>()<span class="keyword">const</span>{
<a name="l01197"></a>01197                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>) * (*this);
<a name="l01198"></a>01198         }
<a name="l01199"></a>01199 
<a name="l01200"></a>01200 
<a name="l01201"></a>01201 
<a name="l01206"></a><a class="code" href="classting_1_1Quaternion.htm#a81ee0afb941d2dd8ededdaa79ec8455c">01206</a>         <span class="keyword">inline</span> T <a class="code" href="classting_1_1Quaternion.htm#a81ee0afb941d2dd8ededdaa79ec8455c" title="Calculate quaternion magnitude.">Magnitude</a>()<span class="keyword">const</span>{
<a name="l01207"></a>01207                 <span class="keywordflow">return</span> T(sqrt(this-&gt;MagPow2()));
<a name="l01208"></a>01208         }
<a name="l01209"></a>01209 
<a name="l01210"></a>01210 
<a name="l01211"></a>01211 
<a name="l01217"></a><a class="code" href="classting_1_1Quaternion.htm#a74a93917b390554ce660563fa51e2abf">01217</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; <a class="code" href="classting_1_1Quaternion.htm#a74a93917b390554ce660563fa51e2abf" title="Normalize quaternion.">Normalize</a>(){
<a name="l01218"></a>01218                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>) /= Magnitude();
<a name="l01219"></a>01219         }
<a name="l01220"></a>01220 
<a name="l01221"></a>01221 
<a name="l01222"></a>01222 
<a name="l01223"></a>01223         <span class="comment">//TODO: consider removing this function moving its functional to corresponding constructor.</span>
<a name="l01224"></a>01224         <span class="comment">//Initialize this with rotation unit quaternion from axis (normalized) and an angle</span>
<a name="l01225"></a><a class="code" href="classting_1_1Quaternion.htm#ae6686903d4c6acb62215c8dd806e0da9">01225</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Quaternion.htm#ae6686903d4c6acb62215c8dd806e0da9">InitRot</a>(T xx, T yy, T zz, T angle){
<a name="l01226"></a>01226                 T sina2 = T(sin(angle / 2));
<a name="l01227"></a>01227                 this-&gt;w = T(cos(angle / 2));
<a name="l01228"></a>01228                 this-&gt;x = xx * sina2;
<a name="l01229"></a>01229                 this-&gt;y = yy * sina2;
<a name="l01230"></a>01230                 this-&gt;z = zz * sina2;
<a name="l01231"></a>01231         }
<a name="l01232"></a>01232 
<a name="l01233"></a>01233 
<a name="l01234"></a>01234 
<a name="l01235"></a>01235         <span class="comment">//TODO:consider removing this function</span>
<a name="l01236"></a>01236         <span class="comment">//multiply this quaternion by unit rotation quaternion</span>
<a name="l01237"></a>01237         <span class="comment">//from the left</span>
<a name="l01238"></a>01238         <span class="comment">//TODO: check how this function relates with rotation matrixes multiplication (left-right)</span>
<a name="l01239"></a>01239         <span class="comment">//      need only &quot;mult from the right&quot; function</span>
<a name="l01240"></a><a class="code" href="classting_1_1Quaternion.htm#ad9b5ef678d5972508c07e995901ff531">01240</a>         <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; <a class="code" href="classting_1_1Quaternion.htm#ad9b5ef678d5972508c07e995901ff531">RotateLeft</a>(<a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;</a> axis, T angle){
<a name="l01241"></a>01241                 <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a> r;
<a name="l01242"></a>01242                 r.<a class="code" href="classting_1_1Quaternion.htm#ae6686903d4c6acb62215c8dd806e0da9">InitRot</a>(axis.x, axis.y, axis.z, angle);
<a name="l01243"></a>01243                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>) = r % (*this);
<a name="l01244"></a>01244         }
<a name="l01245"></a>01245 
<a name="l01246"></a>01246 
<a name="l01247"></a>01247 
<a name="l01248"></a>01248         <span class="comment">//Create 4x4 OpenGL like rotation matrix from this quaternion</span>
<a name="l01249"></a>01249         <span class="comment">//ARGS: m - matrix to fill</span>
<a name="l01250"></a>01250         <span class="comment">//RETURNS: return a reference to m</span>
<a name="l01251"></a>01251         <span class="comment">//TODO: move this functionality to  Matrix4::Matrix4(const Quaternion&amp; q), i.e. create a contructor</span>
<a name="l01252"></a><a class="code" href="classting_1_1Quaternion.htm#aedb5f812f23781bcdc637f52f92faabd">01252</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4&lt;T&gt;</a>&amp; <a class="code" href="classting_1_1Quaternion.htm#aedb5f812f23781bcdc637f52f92faabd">CreateMatrix4</a>(<a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4&lt;T&gt;</a>&amp; m)<span class="keyword">const</span>{
<a name="l01253"></a>01253                 <span class="comment">// After about 300 trees murdered and 20 packs of chalk depleted, the</span>
<a name="l01254"></a>01254                 <span class="comment">// mathematicians came up with these equations for a quaternion to matrix converion:</span>
<a name="l01255"></a>01255                 <span class="comment">//   /  1-(2y^2+2z^2)   2xy+2zw         2xz-2yw         0   \T</span>
<a name="l01256"></a>01256                 <span class="comment">// M=|  2xy-2zw         1-(2x^2+2z^2)   2zy+2xw         0   |</span>
<a name="l01257"></a>01257                 <span class="comment">//   |  2xz+2yw         2yz-2xw         1-(2x^2+2y^2)   0   |</span>
<a name="l01258"></a>01258                 <span class="comment">//   \  0               0               0               1   /</span>
<a name="l01259"></a>01259 
<a name="l01260"></a>01260                 <span class="comment">//First column</span>
<a name="l01261"></a>01261                 m[0][0] = T(1) - T(2) * ( <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(this-&gt;y) + <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(this-&gt;z) );
<a name="l01262"></a>01262                 m[0][1] = T(2) * (this-&gt;x * this-&gt;y + this-&gt;z * this-&gt;w);
<a name="l01263"></a>01263                 m[0][2] = T(2) * (this-&gt;x * this-&gt;z - this-&gt;y * this-&gt;w);
<a name="l01264"></a>01264                 m[0][3] = T(0);
<a name="l01265"></a>01265 
<a name="l01266"></a>01266                 <span class="comment">//Second column</span>
<a name="l01267"></a>01267                 m[1][0] = T(2) * (this-&gt;x * this-&gt;y - this-&gt;z * this-&gt;w);
<a name="l01268"></a>01268                 m[1][1] = T(1) - T(2) * ( <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(this-&gt;x) + <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(this-&gt;z) );
<a name="l01269"></a>01269                 m[1][2] = T(2) * (this-&gt;z * this-&gt;y + this-&gt;x * this-&gt;w);
<a name="l01270"></a>01270                 m[1][3] = T(0);
<a name="l01271"></a>01271 
<a name="l01272"></a>01272                 <span class="comment">//Third column</span>
<a name="l01273"></a>01273                 m[2][0] = T(2) * (this-&gt;x * this-&gt;z + this-&gt;y * this-&gt;w);
<a name="l01274"></a>01274                 m[2][1] = T(2) * (this-&gt;y * this-&gt;z - this-&gt;x * this-&gt;w);
<a name="l01275"></a>01275                 m[2][2] = T(1) - T(2) * ( <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(this-&gt;x) + <a class="code" href="namespaceting.htm#aa3ac271b2062b40953c0e043db677d3a" title="Calculate x^2.">Pow2</a>(this-&gt;y) );
<a name="l01276"></a>01276                 m[2][3] = T(0);
<a name="l01277"></a>01277 
<a name="l01278"></a>01278                 <span class="comment">//Fourth column</span>
<a name="l01279"></a>01279                 m[3][0] = T(0);
<a name="l01280"></a>01280                 m[3][1] = T(0);
<a name="l01281"></a>01281                 m[3][2] = T(0);
<a name="l01282"></a>01282                 m[3][3] = T(1);
<a name="l01283"></a>01283                 <span class="keywordflow">return</span> m;
<a name="l01284"></a>01284         }
<a name="l01285"></a>01285 
<a name="l01286"></a>01286 
<a name="l01287"></a>01287 
<a name="l01288"></a>01288         <span class="comment">//--||--||--</span>
<a name="l01289"></a><a class="code" href="classting_1_1Quaternion.htm#af8563d9bbc42d90f0b80da7534ad4941">01289</a>         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4&lt;T&gt;</a> <a class="code" href="classting_1_1Quaternion.htm#af8563d9bbc42d90f0b80da7534ad4941">ToMatrix4</a>()<span class="keyword">const</span>{
<a name="l01290"></a>01290                 <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4&lt;T&gt;</a> m;
<a name="l01291"></a>01291                 this-&gt;CreateMatrix4(m);
<a name="l01292"></a>01292                 <span class="keywordflow">return</span> m;
<a name="l01293"></a>01293         }
<a name="l01294"></a>01294 
<a name="l01295"></a>01295 
<a name="l01296"></a>01296         
<a name="l01297"></a>01297         <span class="comment">//Spherical linear interpolation.</span>
<a name="l01298"></a>01298         <span class="comment">//This quaternion = SLERP(q1,q2,t), t from [0;1].</span>
<a name="l01299"></a>01299         <span class="comment">//SLERP(q1,q2,t) = q1*sin((1-t)*alpha)/sin(alpha)+q2*sin(t*alpha)/sin(alpha),</span>
<a name="l01300"></a>01300         <span class="comment">//where cos(alpha) = (q1,q2) (dot product of normalized quaternions q1 and q2).</span>
<a name="l01301"></a>01301         <span class="comment">//It is assumed that quaternions are normalized!</span>
<a name="l01302"></a><a class="code" href="classting_1_1Quaternion.htm#aab1d01d75760b5f63084b909c451aa8e">01302</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1Quaternion.htm#aab1d01d75760b5f63084b909c451aa8e">Slerp</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; q1, <span class="keyword">const</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&amp; q2, T t){
<a name="l01303"></a>01303                 <span class="comment">//Since quaternions are normalized the cosine of the angle alpha</span>
<a name="l01304"></a>01304                 <span class="comment">//between quaternions are equal to their dot product.</span>
<a name="l01305"></a>01305                 T cosalpha = q1 * q2;
<a name="l01306"></a>01306 
<a name="l01307"></a>01307                 <span class="comment">//If the dot product is less than 0, the angle alpha between quaternions</span>
<a name="l01308"></a>01308                 <span class="comment">//is greater than 90 degrees. Then we negate second quaternion to make alpha</span>
<a name="l01309"></a>01309                 <span class="comment">//be less than 90 degrees. It is possible since normalized quaternions</span>
<a name="l01310"></a>01310                 <span class="comment">//q and -q represent the same rotation!</span>
<a name="l01311"></a>01311                 <span class="keywordflow">if</span>(cosalpha &lt; T(0)){
<a name="l01312"></a>01312                         <span class="comment">//Negate the second quaternion and the result of the dot product (i.e. cos(alpha))</span>
<a name="l01313"></a>01313                         q2.<a class="code" href="classting_1_1Quaternion.htm#a5377f4f9f8a691bab3cd3b027698a768" title="Negate this quaternion.">Negate</a>();
<a name="l01314"></a>01314                         cosalpha = -cosalpha;
<a name="l01315"></a>01315                 }
<a name="l01316"></a>01316 
<a name="l01317"></a>01317                 <span class="comment">//interpolation done by the following general formula:</span>
<a name="l01318"></a>01318                 <span class="comment">//RESULT=q1*sc1(t)+q2*sc2(t).</span>
<a name="l01319"></a>01319                 <span class="comment">//Where sc1,sc2 called interpolation scales.</span>
<a name="l01320"></a>01320                 T sc1, sc2;<span class="comment">//Define variables for scales for interpolation</span>
<a name="l01321"></a>01321 
<a name="l01322"></a>01322                 <span class="comment">//Check if the angle alpha between the 2 quaternions is big enough</span>
<a name="l01323"></a>01323                 <span class="comment">//to make SLERP. If alpha is small then we do a simple linear</span>
<a name="l01324"></a>01324                 <span class="comment">//interpolation between quaternions instead of SLERP!</span>
<a name="l01325"></a>01325                 <span class="comment">//It is also used to avoid divide by zero since sin(0)=0 !</span>
<a name="l01326"></a>01326                 <span class="comment">//We made threshold for cos(alpha)&gt;0.9f (if cos(alpha)==1 then alpha=0).</span>
<a name="l01327"></a>01327                 <span class="keywordflow">if</span>(cosalpha &gt; T(0.9f)){
<a name="l01328"></a>01328                         <span class="comment">//Get the angle alpha between the 2 quaternions, and then store the sin(alpha)</span>
<a name="l01329"></a>01329                         T alpha = T(acos(cosalpha));
<a name="l01330"></a>01330                         T sinalpha = T(sin(alpha));
<a name="l01331"></a>01331 
<a name="l01332"></a>01332                         <span class="comment">//Calculate the scales for q1 and q2, according to the angle and it&apos;s sine value</span>
<a name="l01333"></a>01333                         sc1 = T( sin((1 - t) * alpha) / sinalpha );
<a name="l01334"></a>01334                         sc2 = T( sin(t * alpha) / sinalpha );
<a name="l01335"></a>01335                 }<span class="keywordflow">else</span>{
<a name="l01336"></a>01336                         sc1 = (1 - t);
<a name="l01337"></a>01337                         sc2 = t;
<a name="l01338"></a>01338                 }
<a name="l01339"></a>01339 
<a name="l01340"></a>01340                 <span class="comment">// Calculate the x, y, z and w values for the interpolated quaternion.</span>
<a name="l01341"></a>01341                 (*this) = q1 * sc1 + q2 * sc2;
<a name="l01342"></a>01342         }
<a name="l01343"></a>01343 
<a name="l01344"></a>01344 <span class="preprocessor">#ifdef DEBUG  </span>
<a name="l01345"></a>01345 <span class="preprocessor"></span>        <span class="keyword">friend</span> std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const Quaternion&lt;T&gt;&amp; quat){
<a name="l01346"></a>01346                 s &lt;&lt; <span class="stringliteral">&quot;(&quot;</span> &lt;&lt; quat.<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a> &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; quat.y &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; quat.z &lt;&lt; <span class="stringliteral">&quot;, &quot;</span> &lt;&lt; quat.w &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;
<a name="l01347"></a>01347                 <span class="keywordflow">return</span> s;
<a name="l01348"></a>01348         }
<a name="l01349"></a>01349 <span class="preprocessor">#endif  </span>
<a name="l01350"></a>01350 <span class="preprocessor"></span>};<span class="comment">//~class Quaterion</span>
<a name="l01351"></a>01351 
<a name="l01352"></a>01352 
<a name="l01353"></a>01353 
<a name="l01354"></a>01354 <span class="comment">//template &lt;&gt; class Vector2&lt;unsigned&gt;{</span>
<a name="l01355"></a>01355 <span class="comment">//      unsigned v[2]; //Vector components</span>
<a name="l01356"></a>01356 <span class="comment">//  public:</span>
<a name="l01357"></a>01357 <span class="comment">//      inline Vector2(){};//default constructor</span>
<a name="l01358"></a>01358 <span class="comment">//</span>
<a name="l01359"></a>01359 <span class="comment">//      Vector2(unsigned x, unsigned y){</span>
<a name="l01360"></a>01360 <span class="comment">//              this-&gt;v[0] = x;</span>
<a name="l01361"></a>01361 <span class="comment">//              this-&gt;v[1] = y;</span>
<a name="l01362"></a>01362 <span class="comment">//      };</span>
<a name="l01363"></a>01363 <span class="comment">//</span>
<a name="l01364"></a>01364 <span class="comment">//      inline unsigned&amp; X(){</span>
<a name="l01365"></a>01365 <span class="comment">//              return this-&gt;v[0];</span>
<a name="l01366"></a>01366 <span class="comment">//      };</span>
<a name="l01367"></a>01367 <span class="comment">//</span>
<a name="l01368"></a>01368 <span class="comment">//      inline const unsigned&amp; X()const{</span>
<a name="l01369"></a>01369 <span class="comment">//              return this-&gt;v[0];</span>
<a name="l01370"></a>01370 <span class="comment">//      };</span>
<a name="l01371"></a>01371 <span class="comment">//</span>
<a name="l01372"></a>01372 <span class="comment">//      inline unsigned&amp; Y(){</span>
<a name="l01373"></a>01373 <span class="comment">//              return this-&gt;v[1];</span>
<a name="l01374"></a>01374 <span class="comment">//      };</span>
<a name="l01375"></a>01375 <span class="comment">//</span>
<a name="l01376"></a>01376 <span class="comment">//      inline const unsigned&amp; Y()const{</span>
<a name="l01377"></a>01377 <span class="comment">//              return this-&gt;v[1];</span>
<a name="l01378"></a>01378 <span class="comment">//      };</span>
<a name="l01379"></a>01379 <span class="comment">//</span>
<a name="l01380"></a>01380 <span class="comment">//      inline unsigned&amp; operator[](unsigned i){</span>
<a name="l01381"></a>01381 <span class="comment">//              ASSERT(i &lt; 2)</span>
<a name="l01382"></a>01382 <span class="comment">//              return this-&gt;v[i];</span>
<a name="l01383"></a>01383 <span class="comment">//      };</span>
<a name="l01384"></a>01384 <span class="comment">//</span>
<a name="l01385"></a>01385 <span class="comment">//      inline const unsigned&amp; operator[](unsigned i)const{</span>
<a name="l01386"></a>01386 <span class="comment">//              ASSERT(i &lt; 2)</span>
<a name="l01387"></a>01387 <span class="comment">//              return this-&gt;v[i];</span>
<a name="l01388"></a>01388 <span class="comment">//      };</span>
<a name="l01389"></a>01389 <span class="comment">//</span>
<a name="l01390"></a>01390 <span class="comment">//      inline bool operator==(const Vector2&amp; vec)const{</span>
<a name="l01391"></a>01391 <span class="comment">//              return this-&gt;v[0] == vec.v[0] &amp;&amp; this-&gt;v[1] == vec.v[1];</span>
<a name="l01392"></a>01392 <span class="comment">//      };</span>
<a name="l01393"></a>01393 <span class="comment">//</span>
<a name="l01394"></a>01394 <span class="comment">//      inline Vector2&amp; operator=(const Vector2&lt;unsigned&gt;&amp; vec){</span>
<a name="l01395"></a>01395 <span class="comment">//              this-&gt;v[0] = vec.v[0];</span>
<a name="l01396"></a>01396 <span class="comment">//              this-&gt;v[1] = vec.v[1];</span>
<a name="l01397"></a>01397 <span class="comment">//              return (*this);</span>
<a name="l01398"></a>01398 <span class="comment">//      };</span>
<a name="l01399"></a>01399 <span class="comment">//</span>
<a name="l01421"></a>01421 <span class="comment"></span><span class="comment">//    inline bool IsZero()const{</span>
<a name="l01422"></a>01422 <span class="comment">//              return (this-&gt;v[0] == 0 &amp;&amp; this-&gt;v[1] == 0);</span>
<a name="l01423"></a>01423 <span class="comment">//      };</span>
<a name="l01428"></a>01428 <span class="comment"></span><span class="comment">//</span>
<a name="l01429"></a>01429 <span class="comment">//    inline Vector2&amp; SetToZero(){</span>
<a name="l01430"></a>01430 <span class="comment">//              this-&gt;v[0] = 0;</span>
<a name="l01431"></a>01431 <span class="comment">//              this-&gt;v[1] = 0;</span>
<a name="l01432"></a>01432 <span class="comment">//              return (*this);</span>
<a name="l01433"></a>01433 <span class="comment">//      };</span>
<a name="l01434"></a>01434 <span class="comment">//</span>
<a name="l01435"></a>01435 <span class="comment">//#ifdef DEBUG</span>
<a name="l01436"></a>01436 <span class="comment">//      friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; s, const Vector2&lt;unsigned&gt;&amp; vec){</span>
<a name="l01437"></a>01437 <span class="comment">//              s&lt;&lt;&quot;(&quot;&lt;&lt;vec.X()&lt;&lt;&quot;, &quot;&lt;&lt;vec.Y()&lt;&lt;&quot;)&quot;;</span>
<a name="l01438"></a>01438 <span class="comment">//              return s;</span>
<a name="l01439"></a>01439 <span class="comment">//      };</span>
<a name="l01440"></a>01440 <span class="comment">//#endif</span>
<a name="l01441"></a>01441 <span class="comment">//};//~class</span>
<a name="l01442"></a>01442 
<a name="l01443"></a>01443 
<a name="l01444"></a>01444 
<a name="l01445"></a>01445 <span class="comment">//===============================================</span>
<a name="l01446"></a>01446 <span class="comment">//</span>
<a name="l01447"></a>01447 <span class="comment">//       inline functions implementation</span>
<a name="l01448"></a>01448 <span class="comment">//</span>
<a name="l01449"></a>01449 <span class="comment">//===============================================</span>
<a name="l01450"></a>01450 
<a name="l01451"></a>01451 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> Vector2&lt;T&gt;::Vector2(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector2.htm#a2ecd734023416e1de51b0df7577475bd">Vector3&lt;T&gt;</a>&amp; vec){
<a name="l01452"></a>01452         this-&gt;<a class="code" href="classting_1_1Quaternion.htm#a0c839f4ae364907fec23909bc1d0f1f6">operator=</a>(vec);
<a name="l01453"></a>01453 }
<a name="l01454"></a>01454 
<a name="l01455"></a>01455 
<a name="l01456"></a>01456 
<a name="l01457"></a>01457 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> Vector2&lt;T&gt;&amp; Vector2&lt;T&gt;::operator=(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; vec){
<a name="l01458"></a>01458         this-&gt;<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a> = vec.x;
<a name="l01459"></a>01459         this-&gt;<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a> = vec.y;
<a name="l01460"></a>01460         <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l01461"></a>01461 }
<a name="l01462"></a>01462 
<a name="l01463"></a>01463 
<a name="l01464"></a>01464 
<a name="l01465"></a>01465 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> Vector3&lt;T&gt;&amp; Vector3&lt;T&gt;::operator=(<span class="keyword">const</span> Vector2&lt;T&gt;&amp; vec){
<a name="l01466"></a>01466         this-&gt;<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a> = vec.x;
<a name="l01467"></a>01467         this-&gt;<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a> = vec.y;
<a name="l01468"></a>01468         <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l01469"></a>01469 }
<a name="l01470"></a>01470 
<a name="l01471"></a>01471 
<a name="l01472"></a>01472 
<a name="l01473"></a>01473 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> Vector3&lt;T&gt;&amp; Vector3&lt;T&gt;::operator+=(<span class="keyword">const</span> Vector2&lt;T&gt;&amp; vec){
<a name="l01474"></a>01474         this-&gt;<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a> += vec.x;
<a name="l01475"></a>01475         this-&gt;<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a> += vec.y;
<a name="l01476"></a>01476         <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l01477"></a>01477 }
<a name="l01478"></a>01478 
<a name="l01479"></a>01479 
<a name="l01480"></a>01480 
<a name="l01481"></a>01481 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> Vector2&lt;T&gt; Vector2&lt;T&gt;::operator+(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; vec)<span class="keyword">const</span>{
<a name="l01482"></a>01482         <span class="keywordflow">return</span> Vector2&lt;T&gt;(
<a name="l01483"></a>01483                                 this-&gt;<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a> + vec.x,
<a name="l01484"></a>01484                                 this-&gt;<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a> + vec.y
<a name="l01485"></a>01485                         );
<a name="l01486"></a>01486 }
<a name="l01487"></a>01487 
<a name="l01488"></a>01488 
<a name="l01489"></a>01489 
<a name="l01490"></a>01490 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> Vector2&lt;T&gt; Vector2&lt;T&gt;::operator-(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; vec)<span class="keyword">const</span>{
<a name="l01491"></a>01491         <span class="keywordflow">return</span> Vector2&lt;T&gt;(
<a name="l01492"></a>01492                                 this-&gt;<a class="code" href="classting_1_1Quaternion.htm#a94abd54e0edcc0d235dfd27be370ace3" title="x component.">x</a> - vec.x,
<a name="l01493"></a>01493                                 this-&gt;<a class="code" href="classting_1_1Quaternion.htm#a52ef723ffa1b8ddc1fc863571289bc90" title="y component.">y</a> - vec.y
<a name="l01494"></a>01494                         );
<a name="l01495"></a>01495 }
<a name="l01496"></a>01496 
<a name="l01497"></a>01497 
<a name="l01498"></a>01498 
<a name="l01499"></a><a class="code" href="classting_1_1Matrix4.htm#a564f968e7bf3e60a6d37d97ab6a7eda7">01499</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4&lt;T&gt;</a>&amp; <a class="code" href="classting_1_1Matrix4.htm#a564f968e7bf3e60a6d37d97ab6a7eda7" title="Multiply this matrix by rotation matrix.">Matrix4&lt;T&gt;::Rotate</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion&lt;T&gt;</a>&amp; q){
<a name="l01500"></a>01500         <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4&lt;T&gt;</a> rm;
<a name="l01501"></a>01501         q.<a class="code" href="classting_1_1Quaternion.htm#aedb5f812f23781bcdc637f52f92faabd">CreateMatrix4</a>(rm);
<a name="l01502"></a>01502         this-&gt;<a class="code" href="classting_1_1Matrix4.htm#a6ab5b5895525b64140f78f00c170228e" title="Multipply by matrix from the right.">RightMultMatrix</a>(rm);
<a name="l01503"></a>01503         <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l01504"></a>01504 }
<a name="l01505"></a>01505 
<a name="l01506"></a>01506 
<a name="l01507"></a>01507 
<a name="l01508"></a>01508 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;</a>&amp; <a class="code" href="classting_1_1Vector3.htm">Vector3&lt;T&gt;::Rotate</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion&lt;T&gt;</a>&amp; q){
<a name="l01509"></a>01509         *<span class="keyword">this</span> = q.<a class="code" href="classting_1_1Quaternion.htm#af8563d9bbc42d90f0b80da7534ad4941">ToMatrix4</a>() * (*this);
<a name="l01510"></a>01510         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l01511"></a>01511 }
<a name="l01512"></a>01512 
<a name="l01513"></a>01513 
<a name="l01514"></a>01514 
<a name="l01515"></a><a class="code" href="classting_1_1Rectangle2.htm">01515</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Rectangle2.htm">Rectangle2</a>{
<a name="l01516"></a>01516         <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a> lb; <span class="comment">//Left-Bottom</span>
<a name="l01517"></a>01517         <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a> rt; <span class="comment">//Right-Top</span>
<a name="l01518"></a>01518 <span class="keyword">public</span>:
<a name="l01519"></a>01519         
<a name="l01520"></a><a class="code" href="classting_1_1Rectangle2.htm#ad708b21ad5ce5e673926a2b3448b8847">01520</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Rectangle2.htm#ad708b21ad5ce5e673926a2b3448b8847">Rectangle2</a>(){}
<a name="l01521"></a>01521         
<a name="l01522"></a><a class="code" href="classting_1_1Rectangle2.htm#aa31eada4655fc648dbb1ec1f1f3a74b6">01522</a>         <a class="code" href="classting_1_1Rectangle2.htm#ad708b21ad5ce5e673926a2b3448b8847">Rectangle2</a>(T left, T top, T right, T bottom) :
<a name="l01523"></a>01523                         lb(left, bottom),
<a name="l01524"></a>01524                         rt(right, top)
<a name="l01525"></a>01525         {}
<a name="l01526"></a>01526 
<a name="l01527"></a><a class="code" href="classting_1_1Rectangle2.htm#a61bc8961eef343af501e64defc2d523b">01527</a>         <a class="code" href="classting_1_1Rectangle2.htm#ad708b21ad5ce5e673926a2b3448b8847">Rectangle2</a>(<a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a> leftBottom, <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a> rightTop) :
<a name="l01528"></a>01528                         lb(leftBottom),
<a name="l01529"></a>01529                         rt(rightTop)
<a name="l01530"></a>01530         {}
<a name="l01531"></a>01531         
<a name="l01532"></a><a class="code" href="classting_1_1Rectangle2.htm#ace4445c43b49a2c69bfd1bbdc944ae97">01532</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Rectangle2.htm#ace4445c43b49a2c69bfd1bbdc944ae97">Set</a>(T left, T top, T right, T bottom){
<a name="l01533"></a>01533                 this-&gt;lb = <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a>(left, bottom);
<a name="l01534"></a>01534                 this-&gt;rt = <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a>(right, top);
<a name="l01535"></a>01535         }
<a name="l01536"></a>01536         
<a name="l01537"></a><a class="code" href="classting_1_1Rectangle2.htm#afe64f9b5d58a0e481467f07e57d2e282">01537</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a> <a class="code" href="classting_1_1Rectangle2.htm#afe64f9b5d58a0e481467f07e57d2e282">Center</a>()<span class="keyword">const</span>{
<a name="l01538"></a>01538                 <span class="keywordflow">return</span> (this-&gt;lb + this-&gt;rt) / 2;
<a name="l01539"></a>01539         }
<a name="l01540"></a>01540 
<a name="l01541"></a><a class="code" href="classting_1_1Rectangle2.htm#afe364fa0dd4e9c5de35368668cc0a406">01541</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Rectangle2.htm#afe364fa0dd4e9c5de35368668cc0a406">SetCenter</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a>&amp; vec){
<a name="l01542"></a>01542                 <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a> offset = vec - <a class="code" href="classting_1_1Rectangle2.htm#afe64f9b5d58a0e481467f07e57d2e282">Center</a>();
<a name="l01543"></a>01543                 this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a33981d785417c5c34a2b7f97f5bd6e1d">operator +=</a>(offset);
<a name="l01544"></a>01544         }
<a name="l01545"></a>01545 
<a name="l01546"></a><a class="code" href="classting_1_1Rectangle2.htm#a3e867ed90e328db8ecd468a0f3fef3ae">01546</a>         <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Rectangle2.htm#a3e867ed90e328db8ecd468a0f3fef3ae">IsIn</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a>&amp; vec)<span class="keyword">const</span>{
<a name="l01547"></a>01547                 <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a81c5aa7efb0dff7e2930d895471e5969">Left</a>() &lt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a34015fbf8da290727fdbc6d39e258d01">Right</a>()){
<a name="l01548"></a>01548                         <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a0451523a3ee0437067010a8f7a1dd776">Bottom</a>() &lt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#afe5d6a9b9b2bd705978170c45dc0f82f">Top</a>()){
<a name="l01549"></a>01549                                 <span class="keywordflow">return</span> vec.x &lt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a34015fbf8da290727fdbc6d39e258d01">Right</a>() &amp;&amp;
<a name="l01550"></a>01550                                                         vec.x &gt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a81c5aa7efb0dff7e2930d895471e5969">Left</a>() &amp;&amp;
<a name="l01551"></a>01551                                                         vec.y &gt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a0451523a3ee0437067010a8f7a1dd776">Bottom</a>() &amp;&amp;
<a name="l01552"></a>01552                                                         vec.y &lt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#afe5d6a9b9b2bd705978170c45dc0f82f">Top</a>();
<a name="l01553"></a>01553                         }<span class="keywordflow">else</span>{
<a name="l01554"></a>01554                                 <span class="keywordflow">return</span> vec.x &lt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a34015fbf8da290727fdbc6d39e258d01">Right</a>() &amp;&amp;
<a name="l01555"></a>01555                                                         vec.x &gt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a81c5aa7efb0dff7e2930d895471e5969">Left</a>() &amp;&amp;
<a name="l01556"></a>01556                                                         vec.y &lt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a0451523a3ee0437067010a8f7a1dd776">Bottom</a>() &amp;&amp;
<a name="l01557"></a>01557                                                         vec.y &gt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#afe5d6a9b9b2bd705978170c45dc0f82f">Top</a>();
<a name="l01558"></a>01558                         }
<a name="l01559"></a>01559                 }<span class="keywordflow">else</span>{
<a name="l01560"></a>01560                         <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a0451523a3ee0437067010a8f7a1dd776">Bottom</a>() &lt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#afe5d6a9b9b2bd705978170c45dc0f82f">Top</a>()){
<a name="l01561"></a>01561                                 <span class="keywordflow">return</span> vec.x &gt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a34015fbf8da290727fdbc6d39e258d01">Right</a>() &amp;&amp;
<a name="l01562"></a>01562                                                         vec.x &lt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a81c5aa7efb0dff7e2930d895471e5969">Left</a>() &amp;&amp;
<a name="l01563"></a>01563                                                         vec.y &gt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a0451523a3ee0437067010a8f7a1dd776">Bottom</a>() &amp;&amp;
<a name="l01564"></a>01564                                                         vec.y &lt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#afe5d6a9b9b2bd705978170c45dc0f82f">Top</a>();
<a name="l01565"></a>01565                         }<span class="keywordflow">else</span>{
<a name="l01566"></a>01566                                 <span class="keywordflow">return</span> vec.x &gt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a34015fbf8da290727fdbc6d39e258d01">Right</a>() &amp;&amp;
<a name="l01567"></a>01567                                                         vec.x &lt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a81c5aa7efb0dff7e2930d895471e5969">Left</a>() &amp;&amp;
<a name="l01568"></a>01568                                                         vec.y &lt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a0451523a3ee0437067010a8f7a1dd776">Bottom</a>() &amp;&amp;
<a name="l01569"></a>01569                                                         vec.y &gt;= this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#afe5d6a9b9b2bd705978170c45dc0f82f">Top</a>();
<a name="l01570"></a>01570                         }
<a name="l01571"></a>01571                 }
<a name="l01572"></a>01572         }
<a name="l01573"></a>01573         
<a name="l01574"></a><a class="code" href="classting_1_1Rectangle2.htm#adeadcce5777593c433b091e13f6c213c">01574</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a> <a class="code" href="classting_1_1Rectangle2.htm#adeadcce5777593c433b091e13f6c213c">Extent</a>()<span class="keyword">const</span>{
<a name="l01575"></a>01575                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a4a8cb6c11973467c0b772310623b83a2">Size</a>()/2;
<a name="l01576"></a>01576         }
<a name="l01577"></a>01577 
<a name="l01578"></a><a class="code" href="classting_1_1Rectangle2.htm#a4a8cb6c11973467c0b772310623b83a2">01578</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a> <a class="code" href="classting_1_1Rectangle2.htm#a4a8cb6c11973467c0b772310623b83a2">Size</a>()<span class="keyword">const</span>{
<a name="l01579"></a>01579                 <span class="keywordflow">return</span> this-&gt;rt - this-&gt;lb;
<a name="l01580"></a>01580         }
<a name="l01581"></a>01581         
<a name="l01582"></a><a class="code" href="classting_1_1Rectangle2.htm#ac0d5cf73856d025ed5bb0351caa46c17">01582</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Rectangle2.htm">Rectangle2</a>&amp; <a class="code" href="classting_1_1Rectangle2.htm#ac0d5cf73856d025ed5bb0351caa46c17">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Rectangle2.htm">Rectangle2&lt;T&gt;</a>&amp;  rect){
<a name="l01583"></a>01583                 this-&gt;rt = rect.rt;
<a name="l01584"></a>01584                 this-&gt;lb = rect.lb;
<a name="l01585"></a>01585                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l01586"></a>01586         }
<a name="l01587"></a>01587 
<a name="l01588"></a><a class="code" href="classting_1_1Rectangle2.htm#a33981d785417c5c34a2b7f97f5bd6e1d">01588</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Rectangle2.htm">Rectangle2</a>&amp; <a class="code" href="classting_1_1Rectangle2.htm#a33981d785417c5c34a2b7f97f5bd6e1d">operator+=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;T&gt;</a>&amp; vec){
<a name="l01589"></a>01589                 this-&gt;rt += vec;
<a name="l01590"></a>01590                 this-&gt;lb += vec;
<a name="l01591"></a>01591                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l01592"></a>01592         }
<a name="l01593"></a>01593 
<a name="l01594"></a><a class="code" href="classting_1_1Rectangle2.htm#a1cd6d6150829c609c13be47f54794e69">01594</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Rectangle2.htm">Rectangle2</a> <a class="code" href="classting_1_1Rectangle2.htm#a1cd6d6150829c609c13be47f54794e69">operator*</a>(T num){
<a name="l01595"></a>01595                 <span class="keywordflow">return</span> Rectangle(this-&gt;lb * num, this-&gt;rt * num);
<a name="l01596"></a>01596         }
<a name="l01597"></a>01597 
<a name="l01598"></a><a class="code" href="classting_1_1Rectangle2.htm#aecec27c6523e69483e64217413ca1da1">01598</a>         <span class="keyword">inline</span> T&amp; <a class="code" href="classting_1_1Rectangle2.htm#aecec27c6523e69483e64217413ca1da1">LeftBottom</a>(){
<a name="l01599"></a>01599                 <span class="comment">//TODO: return min out of this-&gt;lb.x and this-&gt;rt.x</span>
<a name="l01600"></a>01600                 <span class="keywordflow">return</span> this-&gt;lb;
<a name="l01601"></a>01601         }
<a name="l01602"></a>01602 
<a name="l01603"></a><a class="code" href="classting_1_1Rectangle2.htm#a304fc720ace0d47ab4f0adef1edf75c2">01603</a>         <span class="keyword">inline</span> <span class="keyword">const</span> T&amp; <a class="code" href="classting_1_1Rectangle2.htm#a304fc720ace0d47ab4f0adef1edf75c2">LeftBottom</a>()<span class="keyword">const</span>{
<a name="l01604"></a>01604                 <span class="comment">//TODO: return min out of this-&gt;lb.x and this-&gt;rt.x</span>
<a name="l01605"></a>01605                 <span class="keywordflow">return</span> this-&gt;lb;
<a name="l01606"></a>01606         }
<a name="l01607"></a>01607 
<a name="l01608"></a><a class="code" href="classting_1_1Rectangle2.htm#a66cf46f254de175fd27b96a49ed93d29">01608</a>         <span class="keyword">inline</span> T&amp; <a class="code" href="classting_1_1Rectangle2.htm#a66cf46f254de175fd27b96a49ed93d29">RightTop</a>(){
<a name="l01609"></a>01609                 <span class="comment">//TODO: return min out of this-&gt;lb.x and this-&gt;rt.x</span>
<a name="l01610"></a>01610                 <span class="keywordflow">return</span> this-&gt;rt;
<a name="l01611"></a>01611         }
<a name="l01612"></a>01612 
<a name="l01613"></a><a class="code" href="classting_1_1Rectangle2.htm#a3b5a5beb3a337bdd75dd4400e9f56135">01613</a>         <span class="keyword">inline</span> <span class="keyword">const</span> T&amp; <a class="code" href="classting_1_1Rectangle2.htm#a3b5a5beb3a337bdd75dd4400e9f56135">RightTop</a>()<span class="keyword">const</span>{
<a name="l01614"></a>01614                 <span class="comment">//TODO: return min out of this-&gt;lb.x and this-&gt;rt.x</span>
<a name="l01615"></a>01615                 <span class="keywordflow">return</span> this-&gt;rt;
<a name="l01616"></a>01616         }
<a name="l01617"></a>01617 
<a name="l01618"></a><a class="code" href="classting_1_1Rectangle2.htm#a81c5aa7efb0dff7e2930d895471e5969">01618</a>         <span class="keyword">inline</span> T&amp; <a class="code" href="classting_1_1Rectangle2.htm#a81c5aa7efb0dff7e2930d895471e5969">Left</a>(){
<a name="l01619"></a>01619                 <span class="comment">//TODO: return min out of this-&gt;lb.x and this-&gt;rt.x</span>
<a name="l01620"></a>01620                 <span class="keywordflow">return</span> this-&gt;lb.x;
<a name="l01621"></a>01621         }
<a name="l01622"></a>01622 
<a name="l01623"></a><a class="code" href="classting_1_1Rectangle2.htm#a793df1ceecb1ec7a016c450f42e1625c">01623</a>         <span class="keyword">inline</span> <span class="keyword">const</span> T&amp; <a class="code" href="classting_1_1Rectangle2.htm#a793df1ceecb1ec7a016c450f42e1625c">Left</a>()<span class="keyword">const</span>{
<a name="l01624"></a>01624                 <span class="keywordflow">return</span> this-&gt;lb.x;
<a name="l01625"></a>01625         }
<a name="l01626"></a>01626 
<a name="l01627"></a><a class="code" href="classting_1_1Rectangle2.htm#afe5d6a9b9b2bd705978170c45dc0f82f">01627</a>         <span class="keyword">inline</span> T&amp; <a class="code" href="classting_1_1Rectangle2.htm#afe5d6a9b9b2bd705978170c45dc0f82f">Top</a>(){
<a name="l01628"></a>01628                 <span class="keywordflow">return</span> this-&gt;rt.y;
<a name="l01629"></a>01629         }
<a name="l01630"></a>01630 
<a name="l01631"></a><a class="code" href="classting_1_1Rectangle2.htm#a1f6273c48dd1cdf1739ff36051a59dd6">01631</a>         <span class="keyword">inline</span> <span class="keyword">const</span> T&amp; <a class="code" href="classting_1_1Rectangle2.htm#a1f6273c48dd1cdf1739ff36051a59dd6">Top</a>()<span class="keyword">const</span>{
<a name="l01632"></a>01632                 <span class="keywordflow">return</span> this-&gt;rt.y;
<a name="l01633"></a>01633         }
<a name="l01634"></a>01634 
<a name="l01635"></a><a class="code" href="classting_1_1Rectangle2.htm#a34015fbf8da290727fdbc6d39e258d01">01635</a>         <span class="keyword">inline</span> T&amp; <a class="code" href="classting_1_1Rectangle2.htm#a34015fbf8da290727fdbc6d39e258d01">Right</a>(){
<a name="l01636"></a>01636                 <span class="keywordflow">return</span> this-&gt;rt.x;
<a name="l01637"></a>01637         }
<a name="l01638"></a>01638 
<a name="l01639"></a><a class="code" href="classting_1_1Rectangle2.htm#a70a1d74971c2d18ec271a203f58b41e7">01639</a>         <span class="keyword">inline</span> <span class="keyword">const</span> T&amp; <a class="code" href="classting_1_1Rectangle2.htm#a70a1d74971c2d18ec271a203f58b41e7">Right</a>()<span class="keyword">const</span>{
<a name="l01640"></a>01640                 <span class="keywordflow">return</span> this-&gt;rt.x;
<a name="l01641"></a>01641         }
<a name="l01642"></a>01642 
<a name="l01643"></a><a class="code" href="classting_1_1Rectangle2.htm#a0451523a3ee0437067010a8f7a1dd776">01643</a>         <span class="keyword">inline</span> T&amp; <a class="code" href="classting_1_1Rectangle2.htm#a0451523a3ee0437067010a8f7a1dd776">Bottom</a>(){
<a name="l01644"></a>01644                 <span class="keywordflow">return</span> this-&gt;lb.y;
<a name="l01645"></a>01645         }
<a name="l01646"></a>01646 
<a name="l01647"></a><a class="code" href="classting_1_1Rectangle2.htm#aacb40321c53fb6f48a405e5132a0ba65">01647</a>         <span class="keyword">inline</span> <span class="keyword">const</span> T&amp; <a class="code" href="classting_1_1Rectangle2.htm#aacb40321c53fb6f48a405e5132a0ba65">Bottom</a>()<span class="keyword">const</span>{
<a name="l01648"></a>01648                 <span class="keywordflow">return</span> this-&gt;lb.y;
<a name="l01649"></a>01649         }
<a name="l01650"></a>01650         
<a name="l01651"></a><a class="code" href="classting_1_1Rectangle2.htm#a4fd0687790ace63be245d74d2ca9778c">01651</a>         <span class="keyword">inline</span> T <a class="code" href="classting_1_1Rectangle2.htm#a4fd0687790ace63be245d74d2ca9778c">Width</a>()<span class="keyword">const</span>{
<a name="l01652"></a>01652                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a34015fbf8da290727fdbc6d39e258d01">Right</a>() - this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a81c5aa7efb0dff7e2930d895471e5969">Left</a>();
<a name="l01653"></a>01653         }
<a name="l01654"></a>01654         
<a name="l01655"></a><a class="code" href="classting_1_1Rectangle2.htm#a9b541cbfee703691e96b952a2d079158">01655</a>         <span class="keyword">inline</span> T <a class="code" href="classting_1_1Rectangle2.htm#a9b541cbfee703691e96b952a2d079158">Height</a>()<span class="keyword">const</span>{
<a name="l01656"></a>01656                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#afe5d6a9b9b2bd705978170c45dc0f82f">Top</a>() - this-&gt;<a class="code" href="classting_1_1Rectangle2.htm#a0451523a3ee0437067010a8f7a1dd776">Bottom</a>();
<a name="l01657"></a>01657         }
<a name="l01658"></a>01658 };<span class="comment">//~class Rectangle2</span>
<a name="l01659"></a>01659 
<a name="l01660"></a>01660 
<a name="l01661"></a>01661 
<a name="l01662"></a>01662 <span class="comment">//</span>
<a name="l01663"></a>01663 <span class="comment">//</span>
<a name="l01664"></a>01664 <span class="comment">// Some convenient typedefs</span>
<a name="l01665"></a>01665 <span class="comment">//</span>
<a name="l01666"></a>01666 <span class="comment">//</span>
<a name="l01667"></a>01667 
<a name="l01668"></a><a class="code" href="namespaceting.htm#a2e2a2ab6b895f9e0d3f0c42eaa66e5ed">01668</a> <span class="keyword">typedef</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;int&gt;</a> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vec2i</a>;
<a name="l01669"></a><a class="code" href="namespaceting.htm#aa5638b579937c183d46322e4516974ae">01669</a> <span class="keyword">typedef</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;unsigned&gt;</a> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vec2ui</a>;
<a name="l01670"></a><a class="code" href="namespaceting.htm#a44c76171780a2ab2f28e86290e6b5f61">01670</a> <span class="keyword">typedef</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;float&gt;</a> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vec2f</a>;
<a name="l01671"></a><a class="code" href="namespaceting.htm#a2236975401830859bd6c97844a8297fe">01671</a> <span class="keyword">typedef</span> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vector2&lt;double&gt;</a> <a class="code" href="classting_1_1Vector2.htm" title="2 dimensional vector class.">Vec2d</a>;
<a name="l01672"></a>01672 
<a name="l01673"></a><a class="code" href="namespaceting.htm#a720c1b9fcc71a30505fb056c0bb2007e">01673</a> <span class="keyword">typedef</span> <a class="code" href="classting_1_1Vector3.htm">Vector3&lt;float&gt;</a> <a class="code" href="classting_1_1Vector3.htm">Vec3f</a>;
<a name="l01674"></a>01674 <a class="code" href="namespaceting.htm#a4e15e8cdd044afbab6acf181c54edcb5">STATIC_ASSERT</a>(<span class="keyword">sizeof</span>(Vec3f) == <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>) * 3)
<a name="l01675"></a>01675 typedef <a class="code" href="classting_1_1Vector3.htm">Vector3</a>&lt;<span class="keywordtype">double</span>&gt; Vec3d;
<a name="l01676"></a>01676 <a class="code" href="namespaceting.htm#a4e15e8cdd044afbab6acf181c54edcb5">STATIC_ASSERT</a>(sizeof(Vec3d) == sizeof(<span class="keywordtype">double</span>) * 3)
<a name="l01677"></a>01677 
<a name="l01678"></a>01678 typedef <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&lt;<span class="keywordtype">float</span>&gt; Matr4f;
<a name="l01679"></a><a class="code" href="namespaceting.htm#a10e249d4c51b3c0149a1db2a1a48c923">01679</a> typedef <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matrix4</a>&lt;<span class="keywordtype">double</span>&gt; <a class="code" href="classting_1_1Matrix4.htm" title="4x4 matrix template class.">Matr4d</a>;
<a name="l01680"></a>01680 
<a name="l01681"></a><a class="code" href="namespaceting.htm#a709203c9f910bba7fe7abd39648386a8">01681</a> typedef <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&lt;<span class="keywordtype">float</span>&gt; <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quatf</a>;
<a name="l01682"></a><a class="code" href="namespaceting.htm#ac4b06b3f811504b4b53280bb1ed2762c">01682</a> typedef <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quaternion</a>&lt;<span class="keywordtype">double</span>&gt; <a class="code" href="classting_1_1Quaternion.htm" title="Quaternion template class.">Quatd</a>;
<a name="l01683"></a>01683 
<a name="l01684"></a><a class="code" href="namespaceting.htm#ab3f7130b7168bd77820cd8e6cdbd456e">01684</a> typedef <a class="code" href="classting_1_1Rectangle2.htm">Rectangle2</a>&lt;<span class="keywordtype">float</span>&gt; <a class="code" href="classting_1_1Rectangle2.htm">Rect2f</a>;
<a name="l01685"></a><a class="code" href="namespaceting.htm#a573acc8eaea768f5f6667bf1cb4b5165">01685</a> typedef <a class="code" href="classting_1_1Rectangle2.htm">Rectangle2</a>&lt;<span class="keywordtype">double</span>&gt; <a class="code" href="classting_1_1Rectangle2.htm">Rect2d</a>;
<a name="l01686"></a><a class="code" href="namespaceting.htm#a81828e27c60cfe52ca2efd1dc9b600df">01686</a> typedef <a class="code" href="classting_1_1Rectangle2.htm">Rectangle2</a>&lt;<span class="keywordtype">int</span>&gt; <a class="code" href="classting_1_1Rectangle2.htm">Rect2i</a>;
<a name="l01687"></a>01687 
<a name="l01688"></a>01688 }<span class="comment">//~namespace</span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
