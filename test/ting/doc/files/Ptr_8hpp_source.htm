<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: Ptr.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>Ptr.hpp</h1><a href="Ptr_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm" title="Debug utilities.">debug.hpp</a>&quot;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="comment">//#define M_ENABLE_PTR_PRINT</span>
<a name="l00037"></a>00037 <span class="preprocessor">#ifdef M_ENABLE_PTR_PRINT</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="preprocessor">#define M_PTR_PRINT(x) TRACE(x)</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00040"></a><a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">00040</a> <span class="preprocessor"></span><span class="preprocessor">#define M_PTR_PRINT(x)</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span>
<a name="l00043"></a>00043 <span class="keyword">namespace </span>ting{
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 
<a name="l00052"></a><a class="code" href="classting_1_1Ptr.htm">00052</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>{
<a name="l00053"></a>00053         <span class="keywordtype">void</span>* p;
<a name="l00054"></a>00054 <span class="keyword">public</span>:
<a name="l00055"></a><a class="code" href="classting_1_1Ptr.htm#adbadd60de8b190c1c52702e3c1720bc9">00055</a>         <span class="keyword">explicit</span> <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm#adbadd60de8b190c1c52702e3c1720bc9">Ptr</a>(T* ptr = 0) :
<a name="l00056"></a>00056                         p(ptr)
<a name="l00057"></a>00057         {}
<a name="l00058"></a>00058 
<a name="l00071"></a>00071         <span class="comment">//const copy constructor</span>
<a name="l00072"></a><a class="code" href="classting_1_1Ptr.htm#a4d2dbf9638294f433604f4e807c4c562">00072</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm#a4d2dbf9638294f433604f4e807c4c562" title="Copy constructor.">Ptr</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>&amp; ptr){
<a name="l00073"></a>00073                 <a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">M_PTR_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ptr::Ptr(copy): invoked, ptr.p = &quot;</span> &lt;&lt; (ptr.p) &lt;&lt; std::endl)
<a name="l00074"></a>00074                 this-&gt;p = ptr.p;
<a name="l00075"></a>00075                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>&amp;<span class="keyword">&gt;</span>(ptr).p = 0;
<a name="l00076"></a>00076         }
<a name="l00077"></a>00077 
<a name="l00078"></a><a class="code" href="classting_1_1Ptr.htm#aff09d31d90060f0637d87b121397ec6f">00078</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm#aff09d31d90060f0637d87b121397ec6f">~Ptr</a>(){
<a name="l00079"></a>00079                 this-&gt;Destroy();
<a name="l00080"></a>00080         }
<a name="l00081"></a>00081 
<a name="l00082"></a><a class="code" href="classting_1_1Ptr.htm#ab03e6873ae5242fd4f63ac9bd746666e">00082</a>         <span class="keyword">inline</span> T* <a class="code" href="classting_1_1Ptr.htm#ab03e6873ae5242fd4f63ac9bd746666e">operator-&gt;</a>(){
<a name="l00083"></a>00083                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;Ptr::operator-&gt;(): this-&gt;p is zero&quot;</span>)
<a name="l00084"></a>00084                 <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(p);
<a name="l00085"></a>00085         }
<a name="l00086"></a>00086 
<a name="l00087"></a><a class="code" href="classting_1_1Ptr.htm#a6cec01a4d9a7ba540e87f45c14c5e2f9">00087</a>         <span class="keyword">inline</span> <span class="keyword">const</span> T* <a class="code" href="classting_1_1Ptr.htm#a6cec01a4d9a7ba540e87f45c14c5e2f9">operator-&gt;</a>()<span class="keyword">const</span>{
<a name="l00088"></a>00088                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;const Ptr::operator-&gt;(): this-&gt;p is zero&quot;</span>)
<a name="l00089"></a>00089                 <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(this-&gt;p);
<a name="l00090"></a>00090         }
<a name="l00091"></a>00091 
<a name="l00092"></a><a class="code" href="classting_1_1Ptr.htm#a589c0fdb2ce874c44f965c92ab3cc489">00092</a>         <span class="keyword">inline</span> T&amp; <a class="code" href="classting_1_1Ptr.htm#a589c0fdb2ce874c44f965c92ab3cc489">operator*</a>(){
<a name="l00093"></a>00093                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;Ptr::operator*(): this-&gt;p is zero&quot;</span>)
<a name="l00094"></a>00094                 <span class="keywordflow">return</span> *(this-&gt;<a class="code" href="classting_1_1Ptr.htm#ab03e6873ae5242fd4f63ac9bd746666e">operator-&gt;</a>());
<a name="l00095"></a>00095         }
<a name="l00096"></a>00096 
<a name="l00097"></a><a class="code" href="classting_1_1Ptr.htm#ab8dfa3baca523470b8555b4a6f29bb63">00097</a>         <span class="keyword">inline</span> <span class="keyword">const</span> T&amp; <a class="code" href="classting_1_1Ptr.htm#ab8dfa3baca523470b8555b4a6f29bb63">operator*</a>()<span class="keyword">const</span>{
<a name="l00098"></a>00098                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;const Ptr::operator*(): this-&gt;p is zero&quot;</span>)
<a name="l00099"></a>00099                 <span class="keywordflow">return</span> *(this-&gt;<a class="code" href="classting_1_1Ptr.htm#ab03e6873ae5242fd4f63ac9bd746666e">operator-&gt;</a>());
<a name="l00100"></a>00100         }
<a name="l00101"></a>00101 
<a name="l00113"></a><a class="code" href="classting_1_1Ptr.htm#a91fe2bf9e97a1c681d56fcbf66161325">00113</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>&amp; <a class="code" href="classting_1_1Ptr.htm#a91fe2bf9e97a1c681d56fcbf66161325" title="Assignment operator.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>&amp; ptr){
<a name="l00114"></a>00114                 <a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">M_PTR_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ptr::operator=(Ptr&amp;): enter, this-&gt;p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00115"></a>00115                 this-&gt;Destroy();
<a name="l00116"></a>00116                 this-&gt;p = ptr.p;
<a name="l00117"></a>00117                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>&amp;<span class="keyword">&gt;</span>(ptr).p = 0;
<a name="l00118"></a>00118                 <a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">M_PTR_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ptr::operator=(Ptr&amp;): exit, this-&gt;p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00119"></a>00119                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00120"></a>00120         }
<a name="l00121"></a>00121 
<a name="l00122"></a><a class="code" href="classting_1_1Ptr.htm#a04584cc302d07cefe0ef5a1578d70c26">00122</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ptr.htm#a04584cc302d07cefe0ef5a1578d70c26">operator==</a>(<span class="keyword">const</span> T* ptr)<span class="keyword">const</span>{
<a name="l00123"></a>00123                 <span class="keywordflow">return</span> this-&gt;p == ptr;
<a name="l00124"></a>00124         }
<a name="l00125"></a>00125 
<a name="l00126"></a><a class="code" href="classting_1_1Ptr.htm#ad72b71ed8d5bc7956ab575cc848aeab0">00126</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ptr.htm#ad72b71ed8d5bc7956ab575cc848aeab0">operator!=</a>(<span class="keyword">const</span> T* ptr)<span class="keyword">const</span>{
<a name="l00127"></a>00127                 <span class="keywordflow">return</span> !( *<span class="keyword">this</span> == ptr );
<a name="l00128"></a>00128         }
<a name="l00129"></a>00129 
<a name="l00130"></a><a class="code" href="classting_1_1Ptr.htm#a5a45efa284c988413d032bcd7f510fb4">00130</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ptr.htm#a5a45efa284c988413d032bcd7f510fb4">operator!</a>()<span class="keyword">const</span>{
<a name="l00131"></a>00131                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Ptr.htm#ae927807c8d41c790f38113b8c02d704a" title="tells if the pointer is valid or not.">IsNotValid</a>();
<a name="l00132"></a>00132         }
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 
<a name="l00136"></a>00136         <span class="comment">//Safe conversion to bool type.</span>
<a name="l00137"></a>00137         <span class="comment">//Because if using simple &quot;operator bool()&quot; it may result in chained automatic</span>
<a name="l00138"></a>00138         <span class="comment">//conversion to undesired types such as int.</span>
<a name="l00139"></a><a class="code" href="classting_1_1Ptr.htm#ab6da1d243d579d2be3bc79e74e96f33d">00139</a>         <span class="keyword">typedef</span> void (<a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>::*<a class="code" href="classting_1_1Ptr.htm#ab6da1d243d579d2be3bc79e74e96f33d">unspecified_bool_type</a>)();
<a name="l00140"></a><a class="code" href="classting_1_1Ptr.htm#a7dc104bcba2508c5f298bdb38e1e3316">00140</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm#a7dc104bcba2508c5f298bdb38e1e3316">operator unspecified_bool_type</a>()<span class="keyword"> const</span>{
<a name="l00141"></a>00141                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Ptr.htm#aaea0cb8dafed57e642fd9b42865cfcca" title="tells if the pointer is valid or not.">IsValid</a>() ? &amp;<a class="code" href="classting_1_1Ptr.htm#a13f21387781ab82e59d53425bc5e932f" title="reset pointer, destroying object it point to.">Ptr::Reset</a> : 0; <span class="comment">//Ptr::Reset is taken just because it has matching signature</span>
<a name="l00142"></a>00142         }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="comment">//      inline operator bool(){</span>
<a name="l00145"></a>00145 <span class="comment">//              return this-&gt;IsValid();</span>
<a name="l00146"></a>00146 <span class="comment">//      }</span>
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 
<a name="l00158"></a><a class="code" href="classting_1_1Ptr.htm#a09475dbdf1fef00081b6925f099f2354">00158</a>         <span class="keyword">inline</span> T* <a class="code" href="classting_1_1Ptr.htm#a09475dbdf1fef00081b6925f099f2354" title="Extract pointer to object invalidating the Ptr.">Extract</a>(){
<a name="l00159"></a>00159                 T* pp = <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(this-&gt;p);
<a name="l00160"></a>00160                 this-&gt;p = 0;
<a name="l00161"></a>00161                 <span class="keywordflow">return</span> pp;
<a name="l00162"></a>00162         }
<a name="l00163"></a>00163 
<a name="l00169"></a><a class="code" href="classting_1_1Ptr.htm#a13f21387781ab82e59d53425bc5e932f">00169</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Ptr.htm#a13f21387781ab82e59d53425bc5e932f" title="reset pointer, destroying object it point to.">Reset</a>(){
<a name="l00170"></a>00170                 this-&gt;Destroy();
<a name="l00171"></a>00171                 this-&gt;p = 0;
<a name="l00172"></a>00172         }
<a name="l00173"></a>00173 
<a name="l00179"></a><a class="code" href="classting_1_1Ptr.htm#aaea0cb8dafed57e642fd9b42865cfcca">00179</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ptr.htm#aaea0cb8dafed57e642fd9b42865cfcca" title="tells if the pointer is valid or not.">IsValid</a>()<span class="keyword">const</span>{
<a name="l00180"></a>00180                 <span class="keywordflow">return</span> this-&gt;p != 0;
<a name="l00181"></a>00181         }
<a name="l00182"></a>00182 
<a name="l00188"></a><a class="code" href="classting_1_1Ptr.htm#ae927807c8d41c790f38113b8c02d704a">00188</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ptr.htm#ae927807c8d41c790f38113b8c02d704a" title="tells if the pointer is valid or not.">IsNotValid</a>()<span class="keyword">const</span>{
<a name="l00189"></a>00189                 <span class="keywordflow">return</span> !this-&gt;<a class="code" href="classting_1_1Ptr.htm#aaea0cb8dafed57e642fd9b42865cfcca" title="tells if the pointer is valid or not.">IsValid</a>();
<a name="l00190"></a>00190         }
<a name="l00191"></a>00191 
<a name="l00200"></a><a class="code" href="classting_1_1Ptr.htm#a0ffd7eba04fccd6cc9aa413d5e43449a">00200</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> TS* <a class="code" href="classting_1_1Ptr.htm#a0ffd7eba04fccd6cc9aa413d5e43449a" title="Static cast.">StaticCast</a>(){
<a name="l00201"></a>00201                 <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>TS*<span class="keyword">&gt;</span>(this-&gt;<a class="code" href="classting_1_1Ptr.htm#ab03e6873ae5242fd4f63ac9bd746666e">operator-&gt;</a>());
<a name="l00202"></a>00202         }
<a name="l00203"></a>00203 
<a name="l00204"></a>00204         <span class="comment">//for automatic type downcast</span>
<a name="l00205"></a><a class="code" href="classting_1_1Ptr.htm#a2f6261aa2f876d23f688f6bbcccf3ba0">00205</a>         <span class="keyword">template</span> &lt;<span class="keyword">typename</span> TBase&gt; <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm#a2f6261aa2f876d23f688f6bbcccf3ba0">operator Ptr&lt;TBase&gt;</a>(){
<a name="l00206"></a>00206                 <a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">M_PTR_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ptr::downcast(): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00207"></a>00207                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;TBase&gt;</a>(this-&gt;<a class="code" href="classting_1_1Ptr.htm#a09475dbdf1fef00081b6925f099f2354" title="Extract pointer to object invalidating the Ptr.">Extract</a>());
<a name="l00208"></a>00208         }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 <span class="keyword">private</span>:
<a name="l00211"></a>00211         <span class="keyword">inline</span> <span class="keywordtype">void</span> Destroy(){
<a name="l00212"></a>00212                 <a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">M_PTR_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ptr::~Ptr(): delete invoked, this-&gt;p = &quot;</span> &lt;&lt; this-&gt;p &lt;&lt; std::endl)
<a name="l00213"></a>00213                 delete static_cast&lt;T*&gt;(this-&gt;p);
<a name="l00214"></a>00214         }
<a name="l00215"></a>00215 
<a name="l00216"></a>00216         inline <span class="keywordtype">void</span>* operator new(<span class="keywordtype">size_t</span>){
<a name="l00217"></a>00217                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)<span class="comment">//forbidden</span>
<a name="l00218"></a>00218                 return reinterpret_cast&lt;<span class="keywordtype">void</span>*&gt;(0);
<a name="l00219"></a>00219         }
<a name="l00220"></a>00220 
<a name="l00221"></a>00221         inline <span class="keywordtype">void</span> operator delete(<span class="keywordtype">void</span>*){
<a name="l00222"></a>00222                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)<span class="comment">//forbidden</span>
<a name="l00223"></a>00223         }
<a name="l00224"></a>00224 };
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 }<span class="comment">//~namespace ting</span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
