<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: PoolStored.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>PoolStored.hpp</h1><a href="PoolStored_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2009-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00034"></a>00034 <span class="preprocessor">#pragma once</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;new&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm" title="Debug utilities.">debug.hpp</a>&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.htm" title="Utility functions and classes.">utils.hpp</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="Thread_8hpp.htm" title="Multithreading library.">Thread.hpp</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="Exc_8hpp.htm" title="Basic Exception class.">Exc.hpp</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="Array_8hpp.htm" title="automatic array class. Array class, it is an auto pointer for new[] / delete[].">Array.hpp</a>&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="comment">//#define M_ENABLE_POOL_TRACE</span>
<a name="l00047"></a>00047 <span class="preprocessor">#ifdef M_ENABLE_POOL_TRACE</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#define M_POOL_TRACE(x) TRACE(&lt;&lt;&quot;[POOL] &quot;) TRACE(x)</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00050"></a><a class="code" href="PoolStored_8hpp.htm#a3e978bbbf622c62c71b0f847b31a0dae">00050</a> <span class="preprocessor"></span><span class="preprocessor">#define M_POOL_TRACE(x)</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span>
<a name="l00053"></a>00053 <span class="keyword">namespace </span>ting{
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="comment">//make sure theat we align PoolElem by int size when using MSVC compiler.</span>
<a name="l00056"></a>00056 <a class="code" href="namespaceting.htm#a4e15e8cdd044afbab6acf181c54edcb5">STATIC_ASSERT</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) == 4)
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 
<a name="l00073"></a><a class="code" href="classting_1_1PoolStored.htm">00073</a> template &lt;class T&gt; class <a class="code" href="classting_1_1PoolStored.htm" title="Base class for pool-stored objects.">PoolStored</a>{
<a name="l00074"></a>00074         
<a name="l00075"></a>00075         <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> ElemSize, <span class="keywordtype">unsigned</span> NumElemsInChunk&gt; <span class="keyword">class </span>MemPool{
<a name="l00076"></a>00076                 <span class="keyword">struct </span>BufHolder{
<a name="l00077"></a>00077                         <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a> buf[ElemSize];
<a name="l00078"></a>00078                 };
<a name="l00079"></a>00079 
<a name="l00080"></a>00080                 M_DECLARE_ALIGNED_MSVC(4) <span class="keyword">struct </span>PoolElem : <span class="keyword">public</span> BufHolder{
<a name="l00081"></a>00081                         <span class="keywordtype">bool</span> isFree;
<a name="l00082"></a>00082                         PoolElem() :
<a name="l00083"></a>00083                                         isFree(<span class="keyword">true</span>)
<a name="l00084"></a>00084                         {}
<a name="l00085"></a>00085                 }
<a name="l00086"></a>00086                 <span class="comment">//Align by sizeof(int) boundary, just to be more safe.</span>
<a name="l00087"></a>00087                 <span class="comment">//I once had a problem with pthread mutex when it was not aligned by 4 byte bounday,</span>
<a name="l00088"></a>00088                 <span class="comment">//so I resolved this by declaring PoolElem struct as aligned by sizeof(int).</span>
<a name="l00089"></a>00089                 M_DECLARE_ALIGNED(<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>));
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 
<a name="l00092"></a>00092                 <span class="keyword">struct </span>Chunk : <span class="keyword">public</span> ting::<a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&lt;PoolElem&gt;{
<a name="l00093"></a>00093                         <span class="keywordtype">unsigned</span> numAllocated;
<a name="l00094"></a>00094                         Chunk() :
<a name="l00095"></a>00095                                         <a class="code" href="classting_1_1Array.htm">ting::Array&lt;PoolElem&gt;</a>(NumElemsInChunk),
<a name="l00096"></a>00096                                         numAllocated(0)
<a name="l00097"></a>00097                         {}
<a name="l00098"></a>00098 
<a name="l00099"></a>00099                         Chunk(<span class="keyword">const</span> Chunk&amp; c) :
<a name="l00100"></a>00100                                         <a class="code" href="classting_1_1Array.htm">ting::Array&lt;PoolElem&gt;</a>(c),
<a name="l00101"></a>00101                                         numAllocated(c.numAllocated)
<a name="l00102"></a>00102                         {
<a name="l00103"></a>00103                                 <span class="keyword">const_cast&lt;</span>Chunk&amp;<span class="keyword">&gt;</span>(c).numAllocated = 0;<span class="comment">//to prevent assert in destructor</span>
<a name="l00104"></a>00104                                 <a class="code" href="PoolStored_8hpp.htm#a3e978bbbf622c62c71b0f847b31a0dae">M_POOL_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Chunk::Chunk(copy): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00105"></a>00105                         }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107                         Chunk&amp; operator=(<span class="keyword">const</span> Chunk&amp; c){
<a name="l00108"></a>00108                                 <a class="code" href="PoolStored_8hpp.htm#a3e978bbbf622c62c71b0f847b31a0dae">M_POOL_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Chunk::operator=(): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00109"></a>00109                                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00110"></a>00110                                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00111"></a>00111                         }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113                         ~Chunk(){
<a name="l00114"></a>00114                                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;numAllocated == 0, <span class="stringliteral">&quot;this-&gt;numAllocated = &quot;</span> &lt;&lt; this-&gt;numAllocated &lt;&lt; <span class="stringliteral">&quot; should be 0&quot;</span>)
<a name="l00115"></a>00115                         }
<a name="l00116"></a>00116                 };
<a name="l00117"></a>00117 
<a name="l00118"></a>00118                 
<a name="l00119"></a>00119                 <span class="keyword">struct </span>ChunksList{
<a name="l00120"></a>00120                         <span class="keyword">typedef</span> std::vector&lt;Chunk&gt; T_List;
<a name="l00121"></a>00121                         <span class="keyword">typedef</span> <span class="keyword">typename</span> T_List::iterator T_Iter;
<a name="l00122"></a>00122                         T_List chunks;
<a name="l00123"></a>00123                         <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">ting::Mutex</a> mutex;
<a name="l00124"></a>00124 
<a name="l00125"></a>00125                         ~ChunksList(){
<a name="l00126"></a>00126 <span class="comment">//                              TRACE(&lt;&lt; &quot;PoolStored::ChunksList::~ChunksList(): invoked&quot; &lt;&lt; std::endl)</span>
<a name="l00127"></a>00127                                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;chunks.size() == 0, <span class="stringliteral">&quot;PoolStored: cannot destroy chunk list because it is not empty. Check for static PoolStored objects, they are not allowed, e.g. static Ref/WeakRef are not allowed!&quot;</span>)
<a name="l00128"></a>00128                         }
<a name="l00129"></a>00129                 };
<a name="l00130"></a>00130                 
<a name="l00131"></a>00131                 <span class="keyword">static</span> ChunksList&amp; Chunks(){
<a name="l00132"></a>00132                         <span class="keyword">static</span> ChunksList chunks;
<a name="l00133"></a>00133                         <span class="keywordflow">return</span> chunks;
<a name="l00134"></a>00134                 }
<a name="l00135"></a>00135 
<a name="l00136"></a>00136         <span class="keyword">public</span>:
<a name="l00137"></a>00137                 <span class="keyword">static</span> <span class="keywordtype">void</span>* Alloc(){
<a name="l00138"></a>00138                         ChunksList &amp;cl = Chunks();
<a name="l00139"></a>00139                         
<a name="l00140"></a>00140                         <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">ting::Mutex::Guard</a> mutlock(cl.mutex);
<a name="l00141"></a>00141 
<a name="l00142"></a>00142                         <span class="comment">//find chunk with free cell</span>
<a name="l00143"></a>00143                         Chunk *chunk = 0;
<a name="l00144"></a>00144                         <span class="keywordflow">for</span>(<span class="keyword">typename</span> ChunksList::T_Iter i = cl.chunks.begin(); i != cl.chunks.end(); ++i){
<a name="l00145"></a>00145                                 <span class="keywordflow">if</span>((*i).numAllocated &lt; (*i).Size()){
<a name="l00146"></a>00146                                         chunk = &amp;(*i);
<a name="l00147"></a>00147                                 }
<a name="l00148"></a>00148                         }
<a name="l00149"></a>00149                         
<a name="l00150"></a>00150                         <span class="comment">//create new chunk if necessary</span>
<a name="l00151"></a>00151                         <span class="keywordflow">if</span>(chunk == 0){
<a name="l00152"></a>00152                                 cl.chunks.push_back(Chunk());
<a name="l00153"></a>00153                                 chunk = &amp;cl.chunks.back();
<a name="l00154"></a>00154                         }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(chunk)
<a name="l00157"></a>00157                         <a class="code" href="PoolStored_8hpp.htm#a3e978bbbf622c62c71b0f847b31a0dae">M_POOL_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Alloc(): Free chunk = &quot;</span> &lt;&lt; chunk &lt;&lt; std::endl)
<a name="l00158"></a>00158 
<a name="l00159"></a>00159                         <span class="comment">//find free cell</span>
<a name="l00160"></a>00160                         <span class="keywordflow">for</span>(PoolElem* i = chunk-&gt;Begin(); i != chunk-&gt;End(); ++i){
<a name="l00161"></a>00161                                 <span class="keywordflow">if</span>(i-&gt;isFree){
<a name="l00162"></a>00162                                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(chunk-&gt;numAllocated &lt; chunk-&gt;Size())
<a name="l00163"></a>00163                                         i-&gt;isFree = <span class="keyword">false</span>;
<a name="l00164"></a>00164                                         ++chunk-&gt;numAllocated;
<a name="l00165"></a>00165                                         <a class="code" href="PoolStored_8hpp.htm#a3e978bbbf622c62c71b0f847b31a0dae">M_POOL_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Alloc(): Free cell found = &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; sizeof(PoolElem) = &quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(PoolElem) &lt;&lt; std::endl)
<a name="l00166"></a>00166                                         <a class="code" href="PoolStored_8hpp.htm#a3e978bbbf622c62c71b0f847b31a0dae">M_POOL_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Alloc(): returning &quot;</span> &lt;&lt; static_cast&lt;BufHolder*&gt;(i) &lt;&lt; std::endl)
<a name="l00167"></a>00167                                         <span class="keywordflow">return</span> reinterpret_cast&lt;void*&gt;(static_cast&lt;BufHolder*&gt;(i));
<a name="l00168"></a>00168                                 }
<a name="l00169"></a>00169                         }
<a name="l00170"></a>00170                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00171"></a>00171                         <span class="keywordflow">return</span> 0;
<a name="l00172"></a>00172                 }
<a name="l00173"></a>00173 
<a name="l00174"></a>00174                 <span class="keyword">static</span> <span class="keywordtype">void</span> Free(<span class="keywordtype">void</span>* p){
<a name="l00175"></a>00175                         <a class="code" href="PoolStored_8hpp.htm#a3e978bbbf622c62c71b0f847b31a0dae">M_POOL_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Free(): p = &quot;</span> &lt;&lt; p &lt;&lt; std::endl)
<a name="l00176"></a>00176                         <span class="keywordflow">if</span>(!p)
<a name="l00177"></a>00177                                 <span class="keywordflow">return</span>;
<a name="l00178"></a>00178                         
<a name="l00179"></a>00179                         ChunksList &amp;cl = Chunks();
<a name="l00180"></a>00180 
<a name="l00181"></a>00181                         <a class="code" href="classting_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">ting::Mutex::Guard</a> mutlock(cl.mutex);
<a name="l00182"></a>00182                         
<a name="l00183"></a>00183                         <span class="comment">//find chunk the p belongs to</span>
<a name="l00184"></a>00184                         <span class="keywordflow">for</span>(<span class="keyword">typename</span> ChunksList::T_Iter i = cl.chunks.begin(); i != cl.chunks.end(); ++i){
<a name="l00185"></a>00185                                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>((*i).numAllocated != 0)
<a name="l00186"></a>00186                                 <span class="keywordflow">if</span>((*i).End() &gt; p &amp;&amp; p &gt;= (*i).Begin()){
<a name="l00187"></a>00187                                         Chunk *chunk = &amp;(*i);
<a name="l00188"></a>00188                                         <a class="code" href="PoolStored_8hpp.htm#a3e978bbbf622c62c71b0f847b31a0dae">M_POOL_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;Free(): chunk found = &quot;</span> &lt;&lt; chunk &lt;&lt; std::endl)
<a name="l00189"></a>00189                                         --(chunk-&gt;numAllocated);
<a name="l00190"></a>00190                                         <span class="keywordflow">if</span>(chunk-&gt;numAllocated == 0){
<a name="l00191"></a>00191                                                 cl.chunks.erase(i);
<a name="l00192"></a>00192                                         }<span class="keywordflow">else</span>{
<a name="l00193"></a>00193                                                 <span class="keyword">static_cast&lt;</span>PoolElem*<span class="keyword">&gt;</span>(
<a name="l00194"></a>00194                                                                 <span class="keyword">reinterpret_cast&lt;</span>BufHolder*<span class="keyword">&gt;</span>(p)
<a name="l00195"></a>00195                                                         )-&gt;isFree = <span class="keyword">true</span>;
<a name="l00196"></a>00196                                         }
<a name="l00197"></a>00197                                         <span class="keywordflow">return</span>;
<a name="l00198"></a>00198                                 }
<a name="l00199"></a>00199                         }
<a name="l00200"></a>00200                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00201"></a>00201                 }
<a name="l00202"></a>00202         };<span class="comment">//~template class MemPool</span>
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 <span class="keyword">protected</span>:
<a name="l00205"></a>00205         <span class="comment">//this should only be used as a base class</span>
<a name="l00206"></a><a class="code" href="classting_1_1PoolStored.htm#a4f306e777f0dbc12a4f490d5484e3be1">00206</a>         <a class="code" href="classting_1_1PoolStored.htm#a4f306e777f0dbc12a4f490d5484e3be1">PoolStored</a>(){}
<a name="l00207"></a>00207 
<a name="l00208"></a>00208 <span class="keyword">public</span>:
<a name="l00209"></a>00209 
<a name="l00210"></a><a class="code" href="PoolStored_8hpp.htm#a316dde87b296b8470586ed3d24631854">00210</a> <span class="preprocessor">#define M_MEMPOOL_TYPEDEF \</span>
<a name="l00211"></a>00211 <span class="preprocessor">typedef MemPool&lt; \</span>
<a name="l00212"></a>00212 <span class="preprocessor">                sizeof(T), \</span>
<a name="l00213"></a>00213 <span class="preprocessor">                ((8192 / sizeof(T)) &lt; 32) ? 32 : (8192 / sizeof(T)) \</span>
<a name="l00214"></a>00214 <span class="preprocessor">        &gt; T_MemoryPool;</span>
<a name="l00215"></a>00215 <span class="preprocessor"></span>
<a name="l00216"></a><a class="code" href="classting_1_1PoolStored.htm#a52ea4655d078a90c51958ad537a35e03">00216</a>         <span class="keyword">static</span> <span class="keywordtype">void</span>* operator new (<span class="keywordtype">size_t</span> size){
<a name="l00217"></a>00217                 <a class="code" href="PoolStored_8hpp.htm#a3e978bbbf622c62c71b0f847b31a0dae">M_POOL_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;new(): size = &quot;</span> &lt;&lt; size &lt;&lt; std::endl)
<a name="l00218"></a>00218                 <span class="keywordflow">if</span>(size != <span class="keyword">sizeof</span>(T))
<a name="l00219"></a>00219                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;PoolStored::operator new(): attempt to allocate memory block of incorrect size&quot;</span>);
<a name="l00220"></a>00220 
<a name="l00221"></a>00221                 <a class="code" href="PoolStored_8hpp.htm#a316dde87b296b8470586ed3d24631854">M_MEMPOOL_TYPEDEF</a>
<a name="l00222"></a>00222 
<a name="l00223"></a>00223                 <span class="keywordflow">return</span> T_MemoryPool::Alloc();
<a name="l00224"></a>00224         }
<a name="l00225"></a>00225 
<a name="l00226"></a><a class="code" href="classting_1_1PoolStored.htm#aa6205674d7697f171da325a8ca359f72">00226</a>         <span class="keyword">static</span> <span class="keywordtype">void</span> operator delete (<span class="keywordtype">void</span> *p){
<a name="l00227"></a>00227                 <a class="code" href="PoolStored_8hpp.htm#a316dde87b296b8470586ed3d24631854">M_MEMPOOL_TYPEDEF</a>
<a name="l00228"></a>00228                 
<a name="l00229"></a>00229                 T_MemoryPool::Free(p);
<a name="l00230"></a>00230         }
<a name="l00231"></a>00231         
<a name="l00232"></a>00232 <span class="preprocessor">#undef M_MEMPOOL_TYPEDEF</span>
<a name="l00233"></a>00233 <span class="preprocessor"></span>
<a name="l00234"></a>00234 <span class="keyword">private</span>:
<a name="l00235"></a>00235 };
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 }<span class="comment">//~namespace ting</span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
