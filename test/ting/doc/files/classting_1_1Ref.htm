<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: ting::Ref&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceting.htm">ting</a>::<a class="el" href="classting_1_1Ref.htm">Ref</a>
  </div>
</div>
<div class="contents">
<h1>ting::Ref&lt; T &gt; Class Template Reference</h1><!-- doxytag: class="ting::Ref" -->
<p>Reference to a reference counted object.  
<a href="#_details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Ref_8hpp_source.htm">Ref.hpp</a>&gt;</code></p>

<p><a href="classting_1_1Ref-members.htm">List of all members.</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef void(Ref::*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a3135ef3a2d1add8a0cd3c04d54963faf">unspecified_bool_type</a> )()</td></tr>
<tr><td colspan="2"><h2>Public Member Functions</h2></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class TS &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classting_1_1Ref.htm">Ref</a>&lt; TS &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a78b1c6fa3e3d93d4e974ef50f6da008a">StaticCast</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">cast statically to another class.  <a href="#a78b1c6fa3e3d93d4e974ef50f6da008a"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class TS &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classting_1_1Ref.htm">Ref</a>&lt; TS &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a6944821ded2398d7110608599bf6c1ac">DynamicCast</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">cast dynamically.  <a href="#a6944821ded2398d7110608599bf6c1ac"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class TS &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="classting_1_1Ref.htm">Ref</a>&lt; TS &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a912c63dea3c46592b604e31fee213972">DynamicCast</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">constant version of <a class="el" href="classting_1_1Ref.htm#a6944821ded2398d7110608599bf6c1ac" title="cast dynamically.">Ref::DynamicCast()</a>  <a href="#a912c63dea3c46592b604e31fee213972"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a361080c4b6f92dc9a5f46ccbd8259ded">Ref</a> (int v=0)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">default constructor.  <a href="#a361080c4b6f92dc9a5f46ccbd8259ded"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#ad259087da59626e166d42145ab09b88b">Ref</a> (T *rc)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">construct reference to given object.  <a href="#ad259087da59626e166d42145ab09b88b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a6805103bd789673cb75ffb8fe73bdbf5">Ref</a> (const <a class="el" href="classting_1_1WeakRef.htm">WeakRef</a>&lt; T &gt; &amp;r)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct reference from weak reference.  <a href="#a6805103bd789673cb75ffb8fe73bdbf5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a034dbecf437679fc9861988db71fdc0a">Ref</a> (const <a class="el" href="classting_1_1Ref.htm">Ref</a> &amp;r)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy constructor.  <a href="#a034dbecf437679fc9861988db71fdc0a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a8064c9a044a48a1b39e99a0bc6d337b2">~Ref</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a34057d2f1182b11c7d001de31869c10e">IsValid</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">tells whether the reference is pointing to some object or not.  <a href="#a34057d2f1182b11c7d001de31869c10e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#af2139cd40596a24f4b9799c26c5c61e9">IsNotValid</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">tells whether the reference is pointing to some object or not.  <a href="#af2139cd40596a24f4b9799c26c5c61e9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#aecb6f50a165d2723e17d9ad57e447d65">operator==</a> (const <a class="el" href="classting_1_1Ref.htm">Ref</a> &amp;r) const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">tells if 2 references are equal.  <a href="#aecb6f50a165d2723e17d9ad57e447d65"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#ab83ac4596226fb75515ca3239de570f6">operator!</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">tells if the reference is invalid.  <a href="#ab83ac4596226fb75515ca3239de570f6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#ac7bc0c9a0d02c76553169c8bcb72e6f3">operator unspecified_bool_type</a> () const </td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">tells if the reference is valid.  <a href="#ac7bc0c9a0d02c76553169c8bcb72e6f3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#ace1da4fd1b0a5d743cb8070f91bbdf2a">Reset</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">make this <a class="el" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref</a> invalid.  <a href="#ace1da4fd1b0a5d743cb8070f91bbdf2a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1Ref.htm">Ref</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a76847a79b4295f6bb474dc0c9c67479a">operator=</a> (const <a class="el" href="classting_1_1Ref.htm">Ref</a> &amp;r)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">assign reference.  <a href="#a76847a79b4295f6bb474dc0c9c67479a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#ae8f55434bece2d54468810a47b5f540a">operator*</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const T &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a0099ba3435409a7d13e401cba3a2d568">operator*</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a6074e3cc5065f2449418b626cc2a4978">operator-&gt;</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const T *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a3055664efee025eb4e3cd75540071da5">operator-&gt;</a> () const </td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename TBase &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classting_1_1Ref.htm#a5120b785f5570d9b8b67338207a6b083">operator Ref&lt; TBase &gt;</a> ()</td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;class T&gt;<br/>
 class ting::Ref&lt; T &gt;</h3>

<p>Reference to a reference counted object. </p>
<p>Pointer (reference) to a reference counted object. As soon as there is at least one <a class="el" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref</a> object pointing to some reference counted object, this object will be existing. As soon as all <a class="el" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref</a> objects cease to exist (going out of scope) the reference counted object they are pointing ti will be deleted. </p>
<hr/><h2>Member Typedef Documentation</h2>
<a class="anchor" id="a3135ef3a2d1add8a0cd3c04d54963faf"></a><!-- doxytag: member="ting::Ref::unspecified_bool_type" ref="a3135ef3a2d1add8a0cd3c04d54963faf" args=")()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef void(Ref::* <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::<a class="el" href="classting_1_1Ref.htm#a3135ef3a2d1add8a0cd3c04d54963faf">unspecified_bool_type</a>)()</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a361080c4b6f92dc9a5f46ccbd8259ded"></a><!-- doxytag: member="ting::Ref::Ref" ref="a361080c4b6f92dc9a5f46ccbd8259ded" args="(int v=0)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::<a class="el" href="classting_1_1Ref.htm">Ref</a> </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>v</em> = <code>0</code></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>default constructor. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>v</em>&nbsp;</td><td>- this parameter is ignored. Its intention is just to make possible auto-conversion form int to invalid reference. This allows writing simply 'return 0;' in functions to return invalid reference. Note, any integer passed (even not 0) will result in invalid reference. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad259087da59626e166d42145ab09b88b"></a><!-- doxytag: member="ting::Ref::Ref" ref="ad259087da59626e166d42145ab09b88b" args="(T *rc)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::<a class="el" href="classting_1_1Ref.htm">Ref</a> </td>
          <td>(</td>
          <td class="paramtype">T *&nbsp;</td>
          <td class="paramname"> <em>rc</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>construct reference to given object. </p>
<p>Constructs a reference to a given reference counted object. Note, that it is supposed that first reference will be constructed right after object creation, and further work with object will only be done via <a class="el" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref</a> references, not ordinary pointers. Note, that this constructor is explicit, this is done to prevent undesired automatic conversions from ordinary pointers to <a class="el" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>rc</em>&nbsp;</td><td>- ordinary pointer to <a class="el" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">ting::RefCounted</a> object. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6805103bd789673cb75ffb8fe73bdbf5"></a><!-- doxytag: member="ting::Ref::Ref" ref="a6805103bd789673cb75ffb8fe73bdbf5" args="(const WeakRef&lt; T &gt; &amp;r)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::<a class="el" href="classting_1_1Ref.htm">Ref</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1WeakRef.htm">WeakRef</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>r</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct reference from weak reference. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>- weak reference. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a034dbecf437679fc9861988db71fdc0a"></a><!-- doxytag: member="ting::Ref::Ref" ref="a034dbecf437679fc9861988db71fdc0a" args="(const Ref &amp;r)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::<a class="el" href="classting_1_1Ref.htm">Ref</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Ref.htm">Ref</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>r</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor. </p>
<p>Creates new reference object which referes to the same object as 'r'. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>- existing <a class="el" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a> object to make copy of. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8064c9a044a48a1b39e99a0bc6d337b2"></a><!-- doxytag: member="ting::Ref::~Ref" ref="a8064c9a044a48a1b39e99a0bc6d337b2" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::~<a class="el" href="classting_1_1Ref.htm">Ref</a> </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a912c63dea3c46592b604e31fee213972"></a><!-- doxytag: member="ting::Ref::DynamicCast" ref="a912c63dea3c46592b604e31fee213972" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class TS &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classting_1_1Ref.htm">Ref</a>&lt;TS&gt; <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::DynamicCast </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>constant version of <a class="el" href="classting_1_1Ref.htm#a6944821ded2398d7110608599bf6c1ac" title="cast dynamically.">Ref::DynamicCast()</a> </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>valid reference to object of casted class if dynamic_cast() succeeds, i.e. if the object can be cast to requested class. </dd>
<dd>
invalid reference otherwise, i. e. if the object cannot be cast to requested class. </dd></dl>

</div>
</div>
<a class="anchor" id="a6944821ded2398d7110608599bf6c1ac"></a><!-- doxytag: member="ting::Ref::DynamicCast" ref="a6944821ded2398d7110608599bf6c1ac" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class TS &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ref.htm">Ref</a>&lt;TS&gt; <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::DynamicCast </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>cast dynamically. </p>
<p>Performs standard C++ dynamic_cast() operation. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>valid reference to object of casted class if dynamic_cast() succeeds, i.e. if the object can be cast to requested class. </dd>
<dd>
invalid reference otherwise, i. e. if the object cannot be cast to requested class. </dd></dl>

</div>
</div>
<a class="anchor" id="af2139cd40596a24f4b9799c26c5c61e9"></a><!-- doxytag: member="ting::Ref::IsNotValid" ref="af2139cd40596a24f4b9799c26c5c61e9" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::IsNotValid </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>tells whether the reference is pointing to some object or not. </p>
<p>Inverse of <a class="el" href="classting_1_1Ref.htm#a34057d2f1182b11c7d001de31869c10e" title="tells whether the reference is pointing to some object or not.">ting::Ref::IsValid()</a>. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>false if reference is pointing to valid object. </dd>
<dd>
true if the reference does not point to any object. </dd></dl>

</div>
</div>
<a class="anchor" id="a34057d2f1182b11c7d001de31869c10e"></a><!-- doxytag: member="ting::Ref::IsValid" ref="a34057d2f1182b11c7d001de31869c10e" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::IsValid </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>tells whether the reference is pointing to some object or not. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if reference is pointing to valid object. </dd>
<dd>
false if the reference does not point to any object. </dd></dl>

</div>
</div>
<a class="anchor" id="a5120b785f5570d9b8b67338207a6b083"></a><!-- doxytag: member="ting::Ref::operator Ref&lt; TBase &gt;" ref="a5120b785f5570d9b8b67338207a6b083" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;typename TBase &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::operator <a class="el" href="classting_1_1Ref.htm">Ref</a>&lt; TBase &gt; </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac7bc0c9a0d02c76553169c8bcb72e6f3"></a><!-- doxytag: member="ting::Ref::operator unspecified_bool_type" ref="ac7bc0c9a0d02c76553169c8bcb72e6f3" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::operator <a class="el" href="classting_1_1Ref.htm#a3135ef3a2d1add8a0cd3c04d54963faf">unspecified_bool_type</a> </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>tells if the reference is valid. </p>
<p>This operator is a more type-safe version of conversion-to-bool operator. Usage of standard 'operator bool()' is avoided because it may lead to undesired automatic conversions to int and other types. It is intended to be used as follows: </p>
<div class="fragment"><pre class="fragment">        <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref</a> r = TestClass::New();
        <span class="keywordflow">if</span>(r){
                <span class="comment">//r is valid.</span>
                <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(r)
                r-&gt;DoSomethig();
        }else{
                <span class="comment">//r is invalid</span>
        }
</pre></div> 
</div>
</div>
<a class="anchor" id="ab83ac4596226fb75515ca3239de570f6"></a><!-- doxytag: member="ting::Ref::operator!" ref="ab83ac4596226fb75515ca3239de570f6" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::operator! </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>tells if the reference is invalid. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if the reference is invalid. </dd>
<dd>
false if the reference is valid. </dd></dl>

</div>
</div>
<a class="anchor" id="a0099ba3435409a7d13e401cba3a2d568"></a><!-- doxytag: member="ting::Ref::operator*" ref="a0099ba3435409a7d13e401cba3a2d568" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const T&amp; <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ae8f55434bece2d54468810a47b5f540a"></a><!-- doxytag: member="ting::Ref::operator*" ref="ae8f55434bece2d54468810a47b5f540a" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a3055664efee025eb4e3cd75540071da5"></a><!-- doxytag: member="ting::Ref::operator&#45;&gt;" ref="a3055664efee025eb4e3cd75540071da5" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const T* <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a6074e3cc5065f2449418b626cc2a4978"></a><!-- doxytag: member="ting::Ref::operator&#45;&gt;" ref="a6074e3cc5065f2449418b626cc2a4978" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a76847a79b4295f6bb474dc0c9c67479a"></a><!-- doxytag: member="ting::Ref::operator=" ref="a76847a79b4295f6bb474dc0c9c67479a" args="(const Ref &amp;r)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ref.htm">Ref</a>&amp; <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Ref.htm">Ref</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>r</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>assign reference. </p>
<p>Note, that if this reference was pointing to some object, the object will be destroyed if there are no other references. And this reference will be assigned a new value. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>- reference to assign to this reference. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aecb6f50a165d2723e17d9ad57e447d65"></a><!-- doxytag: member="ting::Ref::operator==" ref="aecb6f50a165d2723e17d9ad57e447d65" args="(const Ref &amp;r) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Ref.htm">Ref</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>r</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>tells if 2 references are equal. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>- reference to compare this reference to. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if both references are pointing to the same object or both are invalid. </dd>
<dd>
false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="ace1da4fd1b0a5d743cb8070f91bbdf2a"></a><!-- doxytag: member="ting::Ref::Reset" ref="ace1da4fd1b0a5d743cb8070f91bbdf2a" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::Reset </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>make this <a class="el" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref</a> invalid. </p>
<p>Resets this reference making it invalid and destroying the object it points to if necessary (if no references to the object left). </p>

</div>
</div>
<a class="anchor" id="a78b1c6fa3e3d93d4e974ef50f6da008a"></a><!-- doxytag: member="ting::Ref::StaticCast" ref="a78b1c6fa3e3d93d4e974ef50f6da008a" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class TS &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ref.htm">Ref</a>&lt;TS&gt; <a class="el" href="classting_1_1Ref.htm">ting::Ref</a>&lt; T &gt;::StaticCast </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>cast statically to another class. </p>
<p>Performs standard C++ static_cast(). </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>reference to object of casted class. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Ref_8hpp_source.htm">Ref.hpp</a></li>
</ul>
</div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
