<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: Ref.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>Ref.hpp</h1><a href="Ref_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm" title="Debug utilities.">debug.hpp</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="Thread_8hpp.htm" title="Multithreading library.">Thread.hpp</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="PoolStored_8hpp.htm" title="Memory Pool. Alternative memory allocation functions for simple objects. The main...">PoolStored.hpp</a>&quot;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="comment">//#define M_ENABLE_REF_PRINT</span>
<a name="l00040"></a>00040 <span class="preprocessor">#ifdef M_ENABLE_REF_PRINT</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">#define M_REF_PRINT(x) TRACE(&lt;&lt;&quot;[REF]&quot; x)</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00043"></a><a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">00043</a> <span class="preprocessor"></span><span class="preprocessor">#define M_REF_PRINT(x)</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>
<a name="l00046"></a>00046 <span class="keyword">namespace </span>ting{
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span>Ref;<span class="comment">//forward declaration</span>
<a name="l00049"></a>00049 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span>WeakRef;<span class="comment">//forward declaration</span>
<a name="l00050"></a>00050 
<a name="l00092"></a><a class="code" href="classting_1_1RefCounted.htm">00092</a> <span class="keyword">class </span><a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>{
<a name="l00093"></a><a class="code" href="classting_1_1RefCounted.htm#a3ea5d13a451b56b46e2c53b8da3e4b35">00093</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>;
<a name="l00094"></a><a class="code" href="classting_1_1RefCounted.htm#a38b1f54996da1832fd565f2caadd9cfc">00094</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef</a>;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096         
<a name="l00097"></a>00097 <span class="keyword">private</span>:
<a name="l00098"></a>00098         <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> AddRef(){
<a name="l00099"></a>00099                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;counter)
<a name="l00100"></a>00100                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; &quot;<a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>::AddRef(): invoked, old numHardRefs = &quot; &lt;&lt; (this-&gt;counter-&gt;numHardRefs) &lt;&lt; std::endl)
<a name="l00101"></a>00101                 <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">Mutex</a>::Guard mutexGuard(this-&gt;counter-&gt;mutex);
<a name="l00102"></a>00102                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; &quot;<a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>::AddRef(): mutex locked &quot; &lt;&lt; std::endl)
<a name="l00103"></a>00103                 return ++(this-&gt;counter-&gt;numHardRefs);
<a name="l00104"></a>00104         }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 
<a name="l00108"></a>00108         inline <span class="keywordtype">unsigned</span> RemRef(){
<a name="l00109"></a>00109                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;RefCounted::RemRef(): invoked, old numHardRefs = &quot;</span> &lt;&lt; (this-&gt;counter-&gt;numHardRefs) &lt;&lt; std::endl)
<a name="l00110"></a>00110                 this-&gt;counter-&gt;mutex.Lock();
<a name="l00111"></a>00111                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; &quot;<a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>::RemRef(): mutex locked&quot; &lt;&lt; std::endl)
<a name="l00112"></a>00112                 <span class="keywordtype">unsigned</span> n = --(this-&gt;counter-&gt;numHardRefs);
<a name="l00113"></a>00113 
<a name="l00114"></a>00114                 if(n == 0){<span class="comment">//if no more references to the RefCounted</span>
<a name="l00115"></a>00115                         <span class="keywordflow">if</span>(this-&gt;counter-&gt;numWeakRefs &gt; 0){
<a name="l00116"></a>00116                                 <span class="comment">//there are weak references, they will now own the Counter object,</span>
<a name="l00117"></a>00117                                 <span class="comment">//therefore, do not delete Counter, just clear the pointer to RefCounted.</span>
<a name="l00118"></a>00118                                 this-&gt;counter-&gt;p = 0;
<a name="l00119"></a>00119                         }<span class="keywordflow">else</span>{<span class="comment">//no weak references</span>
<a name="l00120"></a>00120                                 <span class="comment">//NOTE: unlock before deleting because the mutex object is in Counter.</span>
<a name="l00121"></a>00121                                 this-&gt;counter-&gt;mutex.Unlock();
<a name="l00122"></a>00122                                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;RefCounted::RemRef(): mutex unlocked&quot;</span> &lt;&lt; std::endl)
<a name="l00123"></a>00123                                 delete this-&gt;counter;
<a name="l00124"></a>00124                                 return n;
<a name="l00125"></a>00125                         }
<a name="l00126"></a>00126                 }
<a name="l00127"></a>00127                 this-&gt;counter-&gt;mutex.Unlock();
<a name="l00128"></a>00128                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; &quot;<a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>::RemRef(): mutex unlocked&quot; &lt;&lt; std::endl)
<a name="l00129"></a>00129 
<a name="l00130"></a>00130                 return n;
<a name="l00131"></a>00131         }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 
<a name="l00135"></a>00135         struct Counter : public <a class="code" href="classting_1_1PoolStored.htm" title="Base class for pool-stored objects.">PoolStored</a>&lt;Counter&gt;{
<a name="l00136"></a>00136                 <a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a> *p;
<a name="l00137"></a>00137                 <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">Mutex</a> mutex;
<a name="l00138"></a>00138                 <span class="keywordtype">unsigned</span> numHardRefs;
<a name="l00139"></a>00139                 <span class="keywordtype">unsigned</span> numWeakRefs;
<a name="l00140"></a>00140                 <span class="keyword">inline</span> Counter(<a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a> *ptr) :
<a name="l00141"></a>00141                                 p(ptr),
<a name="l00142"></a>00142                                 numHardRefs(0),
<a name="l00143"></a>00143                                 numWeakRefs(0)
<a name="l00144"></a>00144                 {
<a name="l00145"></a>00145                         <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Counter::Counter(): counter object created&quot;</span> &lt;&lt; std::endl)
<a name="l00146"></a>00146                 }
<a name="l00147"></a>00147 
<a name="l00148"></a>00148                 <span class="keyword">inline</span> ~Counter(){
<a name="l00149"></a>00149                         <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Counter::~Counter(): counter object destroyed&quot;</span> &lt;&lt; std::endl)
<a name="l00150"></a>00150                 }
<a name="l00151"></a>00151         };
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00155"></a>00155         Counter *counter;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 <span class="keyword">protected</span>:
<a name="l00160"></a>00160         <span class="comment">//only base classes can construct this class</span>
<a name="l00161"></a>00161         <span class="comment">//i.e. use of this class is allowed only as a base class</span>
<a name="l00162"></a><a class="code" href="classting_1_1RefCounted.htm#a30ddf44c5f04b1d5512d4933676a5a97">00162</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a30ddf44c5f04b1d5512d4933676a5a97">RefCounted</a>(){
<a name="l00163"></a>00163                 <span class="comment">//NOTE: do not create Counter object in RefCounted constructor</span>
<a name="l00164"></a>00164                 <span class="comment">//      initializer list because MSVC complains about usage of &quot;this&quot;</span>
<a name="l00165"></a>00165                 <span class="comment">//      keyword in initializer list.</span>
<a name="l00166"></a>00166                 this-&gt;counter = <span class="keyword">new</span> Counter(<span class="keyword">this</span>);
<a name="l00167"></a>00167                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;counter)
<a name="l00168"></a>00168         }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="comment">//      inline static void* operator new(size_t s){</span>
<a name="l00173"></a>00173 <span class="comment">//              return ::operator new(s);</span>
<a name="l00174"></a>00174 <span class="comment">//      }</span>
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 <span class="keyword">public</span>:
<a name="l00179"></a>00179         <span class="comment">//destructor shall be virtual!!!</span>
<a name="l00180"></a><a class="code" href="classting_1_1RefCounted.htm#aa4a7451e5971e05de0ac03ec8d826e67">00180</a>         <span class="keyword">virtual</span> <a class="code" href="classting_1_1RefCounted.htm#aa4a7451e5971e05de0ac03ec8d826e67">~RefCounted</a>(){}
<a name="l00181"></a>00181 
<a name="l00182"></a><a class="code" href="classting_1_1RefCounted.htm#af8dc6338d475fbdf23291071e4b7d5c7">00182</a>         <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1RefCounted.htm#af8dc6338d475fbdf23291071e4b7d5c7">NumRefs</a>()<span class="keyword">const</span>{
<a name="l00183"></a>00183                 <span class="keywordflow">return</span> <a class="code" href="debug_8hpp.htm#a08625ef39bfc7613672e2f02d90f5736">ASS</a>(this-&gt;counter)-&gt;numHardRefs;
<a name="l00184"></a>00184         }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186 <span class="keyword">private</span>:
<a name="l00187"></a>00187         <span class="comment">//copy constructor is private, no copying</span>
<a name="l00188"></a>00188         <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a30ddf44c5f04b1d5512d4933676a5a97">RefCounted</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>&amp; rc){
<a name="l00189"></a>00189                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00190"></a>00190         }
<a name="l00191"></a>00191 };<span class="comment">//~class RefCounted</span>
<a name="l00192"></a>00192 
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 
<a name="l00202"></a>00202 <span class="comment">//T should be RefCounted!!!</span>
<a name="l00203"></a><a class="code" href="classting_1_1Ref.htm">00203</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>{
<a name="l00204"></a><a class="code" href="classting_1_1Ref.htm#a41dafcb9b25b84e93a71f6792a5192bd">00204</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef</a>&lt;T&gt;;
<a name="l00205"></a>00205 
<a name="l00206"></a>00206         <a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a> *p;
<a name="l00207"></a>00207 
<a name="l00208"></a>00208 
<a name="l00209"></a>00209         
<a name="l00210"></a>00210 <span class="keyword">public</span>:
<a name="l00216"></a><a class="code" href="classting_1_1Ref.htm#a78b1c6fa3e3d93d4e974ef50f6da008a">00216</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a> <a class="code" href="classting_1_1Ref.htm#a78b1c6fa3e3d93d4e974ef50f6da008a" title="cast statically to another class.">StaticCast</a>(){
<a name="l00217"></a>00217                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>(<span class="keyword">static_cast&lt;</span>TS*<span class="keyword">&gt;</span>(this-&gt;operator-&gt;()));
<a name="l00218"></a>00218         }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 
<a name="l00221"></a>00221 
<a name="l00229"></a><a class="code" href="classting_1_1Ref.htm#a6944821ded2398d7110608599bf6c1ac">00229</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a> <a class="code" href="classting_1_1Ref.htm#a6944821ded2398d7110608599bf6c1ac" title="cast dynamically.">DynamicCast</a>(){
<a name="l00230"></a>00230                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;IsValid())
<a name="l00231"></a>00231                 TS* t = <span class="keyword">dynamic_cast&lt;</span>TS*<span class="keyword">&gt;</span>(this-&gt;operator-&gt;());
<a name="l00232"></a>00232                 <span class="keywordflow">if</span>(t)
<a name="l00233"></a>00233                         <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>(t);
<a name="l00234"></a>00234                 <span class="keywordflow">else</span>
<a name="l00235"></a>00235                         <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>();
<a name="l00236"></a>00236         }
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 
<a name="l00246"></a><a class="code" href="classting_1_1Ref.htm#a912c63dea3c46592b604e31fee213972">00246</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a> <a class="code" href="classting_1_1Ref.htm#a912c63dea3c46592b604e31fee213972" title="constant version of Ref::DynamicCast()">DynamicCast</a>()<span class="keyword">const</span>{
<a name="l00247"></a>00247                 <span class="keyword">const</span> TS* t = <span class="keyword">dynamic_cast&lt;</span><span class="keyword">const </span>TS*<span class="keyword">&gt;</span>(this-&gt;operator-&gt;());
<a name="l00248"></a>00248                 <span class="keywordflow">if</span>(t)
<a name="l00249"></a>00249                         <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>(<span class="keyword">const_cast&lt;</span>TS*<span class="keyword">&gt;</span>(t));
<a name="l00250"></a>00250                 <span class="keywordflow">else</span>
<a name="l00251"></a>00251                         <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>();
<a name="l00252"></a>00252         }
<a name="l00253"></a>00253 
<a name="l00254"></a>00254 
<a name="l00255"></a>00255 
<a name="l00263"></a>00263         <span class="comment">//NOTE: the int argument is just to make possible</span>
<a name="l00264"></a>00264         <span class="comment">//auto conversion from 0 to invalid Ref object</span>
<a name="l00265"></a>00265         <span class="comment">//i.e. it will be possible to write &apos;return 0;&apos;</span>
<a name="l00266"></a>00266         <span class="comment">//from the function returning Ref</span>
<a name="l00267"></a><a class="code" href="classting_1_1Ref.htm#a361080c4b6f92dc9a5f46ccbd8259ded">00267</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a3ea5d13a451b56b46e2c53b8da3e4b35">Ref</a>(<span class="keywordtype">int</span> v = 0) :
<a name="l00268"></a>00268                         p(0)
<a name="l00269"></a>00269         {
<a name="l00270"></a>00270                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::Ref(): invoked, p=&quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00271"></a>00271         }
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 
<a name="l00274"></a>00274 
<a name="l00285"></a>00285         <span class="comment">//NOTE: this constructor should be explicit to prevent undesired conversions from T* to Ref&lt;T&gt;</span>
<a name="l00286"></a><a class="code" href="classting_1_1Ref.htm#ad259087da59626e166d42145ab09b88b">00286</a>         <span class="keyword">explicit</span> <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a3ea5d13a451b56b46e2c53b8da3e4b35">Ref</a>(T* rc) :
<a name="l00287"></a>00287                         p(static_cast&lt;<a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>*&gt;(rc))
<a name="l00288"></a>00288         {
<a name="l00289"></a>00289                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::Ref(rc): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00290"></a>00290                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;Ref::Ref(rc): rc is 0&quot;</span>)
<a name="l00291"></a>00291                 this-&gt;p-&gt;AddRef();
<a name="l00292"></a>00292                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::Ref(rc): exiting&quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00293"></a>00293         }
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 
<a name="l00296"></a>00296 
<a name="l00301"></a>00301         <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a3ea5d13a451b56b46e2c53b8da3e4b35">Ref</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef&lt;T&gt;</a> &amp;r);
<a name="l00302"></a>00302 
<a name="l00303"></a>00303 
<a name="l00304"></a>00304 
<a name="l00310"></a>00310         <span class="comment">//copy constructor</span>
<a name="l00311"></a><a class="code" href="classting_1_1Ref.htm#a034dbecf437679fc9861988db71fdc0a">00311</a>         <a class="code" href="classting_1_1Ref.htm#a034dbecf437679fc9861988db71fdc0a" title="Copy constructor.">Ref</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>&amp; r){
<a name="l00312"></a>00312                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::Ref(copy): invoked, r.p = &quot;</span> &lt;&lt; (r.p) &lt;&lt; std::endl)
<a name="l00313"></a>00313                 this-&gt;p = r.p;
<a name="l00314"></a>00314                 <span class="keywordflow">if</span>(this-&gt;p){
<a name="l00315"></a>00315                         this-&gt;p-&gt;AddRef();
<a name="l00316"></a>00316                 }
<a name="l00317"></a>00317         }
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 
<a name="l00320"></a>00320 
<a name="l00321"></a><a class="code" href="classting_1_1Ref.htm#a8064c9a044a48a1b39e99a0bc6d337b2">00321</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ref.htm#a8064c9a044a48a1b39e99a0bc6d337b2">~Ref</a>(){
<a name="l00322"></a>00322                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::~Ref(): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00323"></a>00323                 this-&gt;Destroy();
<a name="l00324"></a>00324         }
<a name="l00325"></a>00325 
<a name="l00326"></a>00326 
<a name="l00327"></a>00327 
<a name="l00333"></a>00333         <span class="comment">//returns true if the reference is valid (not 0)</span>
<a name="l00334"></a><a class="code" href="classting_1_1Ref.htm#a34057d2f1182b11c7d001de31869c10e">00334</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ref.htm#a34057d2f1182b11c7d001de31869c10e" title="tells whether the reference is pointing to some object or not.">IsValid</a>()<span class="keyword">const</span>{
<a name="l00335"></a>00335                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt;<span class="stringliteral">&quot;Ref::IsValid(): invoked, this-&gt;p=&quot;</span>&lt;&lt;(this-&gt;p)&lt;&lt;std::endl)
<a name="l00336"></a>00336                 <span class="keywordflow">return</span> (this-&gt;p != 0);
<a name="l00337"></a>00337         }
<a name="l00338"></a>00338 
<a name="l00339"></a>00339 
<a name="l00340"></a>00340 
<a name="l00347"></a><a class="code" href="classting_1_1Ref.htm#af2139cd40596a24f4b9799c26c5c61e9">00347</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ref.htm#af2139cd40596a24f4b9799c26c5c61e9" title="tells whether the reference is pointing to some object or not.">IsNotValid</a>()<span class="keyword">const</span>{
<a name="l00348"></a>00348                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt;<span class="stringliteral">&quot;Ref::IsNotValid(): invoked, this-&gt;p=&quot;</span>&lt;&lt;(this-&gt;p)&lt;&lt;std::endl)
<a name="l00349"></a>00349                 <span class="keywordflow">return</span> !this-&gt;IsValid();
<a name="l00350"></a>00350         }
<a name="l00351"></a>00351 
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 
<a name="l00360"></a><a class="code" href="classting_1_1Ref.htm#aecb6f50a165d2723e17d9ad57e447d65">00360</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ref.htm#aecb6f50a165d2723e17d9ad57e447d65" title="tells if 2 references are equal.">operator==</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a> &amp;r)<span class="keyword">const</span>{
<a name="l00361"></a>00361                 <span class="keywordflow">return</span> this-&gt;p == r.p;
<a name="l00362"></a>00362         }
<a name="l00363"></a>00363 
<a name="l00364"></a>00364 
<a name="l00365"></a>00365 
<a name="l00371"></a><a class="code" href="classting_1_1Ref.htm#ab83ac4596226fb75515ca3239de570f6">00371</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ref.htm#ab83ac4596226fb75515ca3239de570f6" title="tells if the reference is invalid.">operator!</a>()<span class="keyword">const</span>{
<a name="l00372"></a>00372                 <span class="keywordflow">return</span> !this-&gt;IsValid();
<a name="l00373"></a>00373         }
<a name="l00374"></a>00374 
<a name="l00375"></a>00375 
<a name="l00376"></a>00376 
<a name="l00377"></a><a class="code" href="classting_1_1Ref.htm#a3135ef3a2d1add8a0cd3c04d54963faf">00377</a>         <span class="keyword">typedef</span> void (<a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>::*unspecified_bool_type)();
<a name="l00378"></a>00378         
<a name="l00379"></a>00379 
<a name="l00380"></a>00380 
<a name="l00398"></a>00398         <span class="comment">//Safe conversion to bool type.</span>
<a name="l00399"></a>00399         <span class="comment">//Because if using simple &quot;operator bool()&quot; it may result in chained automatic</span>
<a name="l00400"></a>00400         <span class="comment">//conversion to undesired types such as int.</span>
<a name="l00401"></a><a class="code" href="classting_1_1Ref.htm#ac7bc0c9a0d02c76553169c8bcb72e6f3">00401</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ref.htm#ac7bc0c9a0d02c76553169c8bcb72e6f3" title="tells if the reference is valid.">operator unspecified_bool_type</a>()<span class="keyword"> const</span>{
<a name="l00402"></a>00402                 <span class="keywordflow">return</span> this-&gt;IsValid() ? &amp;<a class="code" href="classting_1_1Ref.htm#ace1da4fd1b0a5d743cb8070f91bbdf2a" title="make this ting::Ref invalid.">Ref::Reset</a> : 0;<span class="comment">//Ref::Reset is taken just because it has matching signature</span>
<a name="l00403"></a>00403         }
<a name="l00404"></a>00404 
<a name="l00405"></a>00405 <span class="comment">//      inline operator bool(){</span>
<a name="l00406"></a>00406 <span class="comment">//              return this-&gt;IsValid();</span>
<a name="l00407"></a>00407 <span class="comment">//      }</span>
<a name="l00408"></a>00408 
<a name="l00409"></a>00409         
<a name="l00410"></a>00410 
<a name="l00416"></a><a class="code" href="classting_1_1Ref.htm#ace1da4fd1b0a5d743cb8070f91bbdf2a">00416</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1Ref.htm#ace1da4fd1b0a5d743cb8070f91bbdf2a" title="make this ting::Ref invalid.">Reset</a>(){
<a name="l00417"></a>00417                 this-&gt;Destroy();
<a name="l00418"></a>00418                 this-&gt;p = 0;
<a name="l00419"></a>00419         }
<a name="l00420"></a>00420 
<a name="l00421"></a>00421 
<a name="l00422"></a>00422 
<a name="l00430"></a><a class="code" href="classting_1_1Ref.htm#a76847a79b4295f6bb474dc0c9c67479a">00430</a>         <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>&amp; <a class="code" href="classting_1_1Ref.htm#a76847a79b4295f6bb474dc0c9c67479a" title="assign reference.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a> &amp;r){
<a name="l00431"></a>00431                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::operator=(): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00432"></a>00432                 <span class="keywordflow">if</span>(<span class="keyword">this</span> == &amp;r)
<a name="l00433"></a>00433                         <span class="keywordflow">return</span> *<span class="keyword">this</span>;<span class="comment">//detect self assignment</span>
<a name="l00434"></a>00434 
<a name="l00435"></a>00435                 this-&gt;Destroy();
<a name="l00436"></a>00436 
<a name="l00437"></a>00437                 this-&gt;p = r.p;
<a name="l00438"></a>00438                 <span class="keywordflow">if</span>(this-&gt;p){
<a name="l00439"></a>00439                         this-&gt;p-&gt;AddRef();
<a name="l00440"></a>00440                 }
<a name="l00441"></a>00441                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00442"></a>00442         }
<a name="l00443"></a>00443 
<a name="l00444"></a>00444 
<a name="l00445"></a>00445 
<a name="l00446"></a><a class="code" href="classting_1_1Ref.htm#ae8f55434bece2d54468810a47b5f540a">00446</a>         <span class="keyword">inline</span> T&amp; <a class="code" href="classting_1_1Ref.htm#ae8f55434bece2d54468810a47b5f540a">operator*</a>(){
<a name="l00447"></a>00447                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::operator*(): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00448"></a>00448                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;Ref::operator*(): this-&gt;p is zero&quot;</span>)
<a name="l00449"></a>00449                 <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T&amp;<span class="keyword">&gt;</span>(*this-&gt;p);
<a name="l00450"></a>00450         }
<a name="l00451"></a>00451 
<a name="l00452"></a>00452 
<a name="l00453"></a>00453 
<a name="l00454"></a><a class="code" href="classting_1_1Ref.htm#a0099ba3435409a7d13e401cba3a2d568">00454</a>         <span class="keyword">inline</span> <span class="keyword">const</span> T&amp; <a class="code" href="classting_1_1Ref.htm#a0099ba3435409a7d13e401cba3a2d568">operator*</a>()<span class="keyword">const</span>{
<a name="l00455"></a>00455                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;const Ref::operator*(): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00456"></a>00456                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;const Ref::operator*(): this-&gt;p is zero&quot;</span>)
<a name="l00457"></a>00457                 <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T&amp;<span class="keyword">&gt;</span>(*this-&gt;p);
<a name="l00458"></a>00458         }
<a name="l00459"></a>00459 
<a name="l00460"></a>00460 
<a name="l00461"></a>00461 
<a name="l00462"></a><a class="code" href="classting_1_1Ref.htm#a6074e3cc5065f2449418b626cc2a4978">00462</a>         <span class="keyword">inline</span> T* <a class="code" href="classting_1_1Ref.htm#a6074e3cc5065f2449418b626cc2a4978">operator-&gt;</a>(){
<a name="l00463"></a>00463                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::operator-&gt;(): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00464"></a>00464                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;Ref::operator-&gt;(): this-&gt;p is zero&quot;</span>)
<a name="l00465"></a>00465                 <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(this-&gt;p);
<a name="l00466"></a>00466         }
<a name="l00467"></a>00467 
<a name="l00468"></a>00468 
<a name="l00469"></a>00469 
<a name="l00470"></a><a class="code" href="classting_1_1Ref.htm#a3055664efee025eb4e3cd75540071da5">00470</a>         <span class="keyword">inline</span> <span class="keyword">const</span> T* <a class="code" href="classting_1_1Ref.htm#a3055664efee025eb4e3cd75540071da5">operator-&gt;</a>()<span class="keyword">const</span>{
<a name="l00471"></a>00471                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::operator-&gt;()const: invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00472"></a>00472                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;Ref::operator-&gt;(): this-&gt;p is zero&quot;</span>)
<a name="l00473"></a>00473                 <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(this-&gt;p);
<a name="l00474"></a>00474         }
<a name="l00475"></a>00475 
<a name="l00476"></a>00476 
<a name="l00477"></a>00477 
<a name="l00478"></a>00478         <span class="comment">//for type downcast</span>
<a name="l00479"></a><a class="code" href="classting_1_1Ref.htm#a5120b785f5570d9b8b67338207a6b083">00479</a>         <span class="keyword">template</span> &lt;<span class="keyword">typename</span> TBase&gt; <span class="keyword">inline</span> operator Ref&lt;TBase&gt;(){
<a name="l00480"></a>00480                 <span class="comment">//downcasting of invalid reference is also possible</span>
<a name="l00481"></a>00481                 <span class="keywordflow">if</span>(this-&gt;IsNotValid())
<a name="l00482"></a>00482                         <span class="keywordflow">return</span> 0;
<a name="l00483"></a>00483 
<a name="l00484"></a>00484                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::downcast(): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00485"></a>00485 
<a name="l00486"></a>00486                 <span class="comment">//NOTE: static cast to T*, not to TBase*,</span>
<a name="l00487"></a>00487                 <span class="comment">//this is to forbid automatic upcast</span>
<a name="l00488"></a>00488                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TBase&gt;</a>(<span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(this-&gt;p));
<a name="l00489"></a>00489         }
<a name="l00490"></a>00490 
<a name="l00491"></a>00491 
<a name="l00492"></a>00492 
<a name="l00493"></a>00493 <span class="keyword">private</span>:
<a name="l00494"></a>00494         <span class="keyword">inline</span> <span class="keywordtype">void</span> Destroy(){
<a name="l00495"></a>00495                 <span class="keywordflow">if</span>(this-&gt;IsValid()){
<a name="l00496"></a>00496                         <span class="keywordflow">if</span>(this-&gt;p-&gt;RemRef() == 0){
<a name="l00497"></a>00497                                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;IsValid())
<a name="l00498"></a>00498                                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; &quot;<a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>::Destroy(): deleting &quot; &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00499"></a>00499                                 delete static_cast&lt;T*&gt;(this-&gt;p);
<a name="l00500"></a>00500                                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; &quot;<a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>::Destroy(): <span class="keywordtype">object</span> &quot; &lt;&lt; (this-&gt;p) &lt;&lt; &quot; deleted&quot; &lt;&lt; std::endl)
<a name="l00501"></a>00501                         }
<a name="l00502"></a>00502                 }
<a name="l00503"></a>00503         }
<a name="l00504"></a>00504 
<a name="l00505"></a>00505 
<a name="l00506"></a>00506 
<a name="l00507"></a>00507         <span class="comment">//Ref objects can only be created on stack</span>
<a name="l00508"></a>00508         <span class="comment">//or as a member of other object or array,</span>
<a name="l00509"></a>00509         <span class="comment">//thus, make operator-new private.</span>
<a name="l00510"></a>00510         inline static <span class="keywordtype">void</span>* operator new(<span class="keywordtype">size_t</span> size){
<a name="l00511"></a>00511                 <a class="code" href="debug_8hpp.htm#ab992a04bf05b0e9fb62c1fdf6e0d3867">ASSERT_ALWAYS</a>(<span class="keyword">false</span>)<span class="comment">//forbidden</span>
<a name="l00512"></a>00512                 return 0;
<a name="l00513"></a>00513         }
<a name="l00514"></a>00514 };<span class="comment">//~class Ref</span>
<a name="l00515"></a>00515 
<a name="l00516"></a>00516 
<a name="l00517"></a>00517 
<a name="l00549"></a>00549 <span class="comment">//T should be RefCounted!!!</span>
<a name="l00550"></a><a class="code" href="classting_1_1WeakRef.htm">00550</a> template &lt;class T&gt; class <a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef</a>{
<a name="l00551"></a><a class="code" href="classting_1_1WeakRef.htm#a99229309340c6e682164e71612dca917">00551</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>&lt;T&gt;;
<a name="l00552"></a>00552 
<a name="l00553"></a>00553         RefCounted::Counter *counter;
<a name="l00554"></a>00554 
<a name="l00555"></a>00555 
<a name="l00556"></a>00556         
<a name="l00557"></a>00557         <span class="keyword">inline</span> <span class="keywordtype">void</span> Init(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;T&gt;</a> &amp;r){
<a name="l00558"></a>00558                 <span class="keywordflow">if</span>(r.<a class="code" href="classting_1_1Ref.htm#af2139cd40596a24f4b9799c26c5c61e9" title="tells whether the reference is pointing to some object or not.">IsNotValid</a>()){
<a name="l00559"></a>00559                         this-&gt;counter = 0;
<a name="l00560"></a>00560                         <span class="keywordflow">return</span>;
<a name="l00561"></a>00561                 }
<a name="l00562"></a>00562 
<a name="l00563"></a>00563                 this-&gt;counter = r.p-&gt;counter;
<a name="l00564"></a>00564                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;counter)
<a name="l00565"></a>00565 
<a name="l00566"></a>00566                 this-&gt;counter-&gt;mutex.Lock();
<a name="l00567"></a>00567                 ++(this-&gt;counter-&gt;numWeakRefs);
<a name="l00568"></a>00568                 this-&gt;counter-&gt;mutex.Unlock();
<a name="l00569"></a>00569         }
<a name="l00570"></a>00570 
<a name="l00571"></a>00571 
<a name="l00572"></a>00572 
<a name="l00573"></a>00573         inline <span class="keywordtype">void</span> Init(const WeakRef &amp;r){
<a name="l00574"></a>00574                 this-&gt;counter = r.counter;
<a name="l00575"></a>00575                 <span class="keywordflow">if</span>(this-&gt;counter == 0)
<a name="l00576"></a>00576                         <span class="keywordflow">return</span>;
<a name="l00577"></a>00577 
<a name="l00578"></a>00578                 this-&gt;counter-&gt;mutex.Lock();
<a name="l00579"></a>00579                 ++(this-&gt;counter-&gt;numWeakRefs);
<a name="l00580"></a>00580                 this-&gt;counter-&gt;mutex.Unlock();
<a name="l00581"></a>00581         }
<a name="l00582"></a>00582 
<a name="l00583"></a>00583 
<a name="l00584"></a>00584 
<a name="l00585"></a>00585         <span class="keyword">inline</span> <span class="keywordtype">void</span> Destroy(){
<a name="l00586"></a>00586                 <span class="keywordflow">if</span>(this-&gt;counter == 0)
<a name="l00587"></a>00587                         <span class="keywordflow">return</span>;
<a name="l00588"></a>00588 
<a name="l00589"></a>00589                 this-&gt;counter-&gt;mutex.Lock();
<a name="l00590"></a>00590                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;counter-&gt;numWeakRefs &gt; 0)
<a name="l00591"></a>00591 
<a name="l00592"></a>00592                 if(
<a name="l00593"></a>00593                                 --(this-&gt;counter-&gt;numWeakRefs) == 0 &amp;&amp;
<a name="l00594"></a>00594                                 this-&gt;counter-&gt;numHardRefs == 0
<a name="l00595"></a>00595                         )
<a name="l00596"></a>00596                 {
<a name="l00597"></a>00597                         this-&gt;counter-&gt;mutex.Unlock();
<a name="l00598"></a>00598                         <span class="keyword">delete</span> this-&gt;counter;
<a name="l00599"></a>00599                         <span class="keywordflow">return</span>;
<a name="l00600"></a>00600                 }<span class="keywordflow">else</span>{
<a name="l00601"></a>00601                         this-&gt;counter-&gt;mutex.Unlock();
<a name="l00602"></a>00602                 }
<a name="l00603"></a>00603         }
<a name="l00604"></a>00604 
<a name="l00605"></a>00605 
<a name="l00606"></a>00606         
<a name="l00607"></a>00607 <span class="keyword">public</span>:
<a name="l00608"></a>00608         <span class="comment">//NOTE: the int argument is just to make possible</span>
<a name="l00609"></a>00609         <span class="comment">//auto conversion from 0 to invalid WeakRef</span>
<a name="l00610"></a>00610         <span class="comment">//i.e. it will be possible to write &apos;return 0;&apos;</span>
<a name="l00611"></a>00611         <span class="comment">//from the function returning WeakRef</span>
<a name="l00612"></a><a class="code" href="classting_1_1WeakRef.htm#a160c126ffeace92283492ba4d0147495">00612</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a38b1f54996da1832fd565f2caadd9cfc">WeakRef</a>(<span class="keywordtype">int</span> v = 0) :
<a name="l00613"></a>00613                         counter(0)
<a name="l00614"></a>00614         {}
<a name="l00615"></a>00615 
<a name="l00616"></a>00616 
<a name="l00617"></a>00617 
<a name="l00618"></a><a class="code" href="classting_1_1WeakRef.htm#aba4a29bb8e23c6df5d42b33492935e63">00618</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1WeakRef.htm#aba4a29bb8e23c6df5d42b33492935e63">WeakRef</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;T&gt;</a> &amp;r){
<a name="l00619"></a>00619                 this-&gt;Init(r);
<a name="l00620"></a>00620         }
<a name="l00621"></a>00621 
<a name="l00622"></a>00622 
<a name="l00623"></a>00623 
<a name="l00624"></a>00624         <span class="comment">//copy constructor</span>
<a name="l00625"></a><a class="code" href="classting_1_1WeakRef.htm#aa4098bc06fcc6ed6073319c52190f19e">00625</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1WeakRef.htm#aa4098bc06fcc6ed6073319c52190f19e">WeakRef</a>(<span class="keyword">const</span> WeakRef &amp;r){
<a name="l00626"></a>00626                 this-&gt;Init(r);
<a name="l00627"></a>00627         }
<a name="l00628"></a>00628 
<a name="l00629"></a>00629 
<a name="l00630"></a>00630 
<a name="l00631"></a><a class="code" href="classting_1_1WeakRef.htm#a801e201de14e8611b2fda0d35fcab6b9">00631</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1WeakRef.htm#a801e201de14e8611b2fda0d35fcab6b9">~WeakRef</a>(){
<a name="l00632"></a>00632                 this-&gt;Destroy();
<a name="l00633"></a>00633         }
<a name="l00634"></a>00634 
<a name="l00635"></a>00635 
<a name="l00636"></a>00636 
<a name="l00637"></a><a class="code" href="classting_1_1WeakRef.htm#ad2478353dd324b624c7c73f6e353e5fc">00637</a>         <span class="keyword">inline</span> WeakRef&amp; <a class="code" href="classting_1_1WeakRef.htm#ad2478353dd324b624c7c73f6e353e5fc">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;T&gt;</a> &amp;r){
<a name="l00638"></a>00638                 <span class="comment">//TODO: double mutex lock/unlock (one in destructor and one in Init). Optimize?</span>
<a name="l00639"></a>00639                 this-&gt;Destroy();
<a name="l00640"></a>00640                 this-&gt;Init(r);
<a name="l00641"></a>00641                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00642"></a>00642         }
<a name="l00643"></a>00643 
<a name="l00644"></a>00644 
<a name="l00645"></a>00645 
<a name="l00646"></a><a class="code" href="classting_1_1WeakRef.htm#a4ff31c1b21e7603bfa77665df2b7bd50">00646</a>         <span class="keyword">inline</span> WeakRef&amp; <a class="code" href="classting_1_1WeakRef.htm#a4ff31c1b21e7603bfa77665df2b7bd50">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef&lt;T&gt;</a> &amp;r){
<a name="l00647"></a>00647                 <span class="comment">//TODO: double mutex lock/unlock (one in destructor and one in Init). Optimize?</span>
<a name="l00648"></a>00648                 this-&gt;Destroy();
<a name="l00649"></a>00649                 this-&gt;Init(r);
<a name="l00650"></a>00650                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00651"></a>00651         }
<a name="l00652"></a>00652 
<a name="l00653"></a>00653 
<a name="l00654"></a>00654 
<a name="l00660"></a><a class="code" href="classting_1_1WeakRef.htm#a8d2de0dbf511eee48ca406f7d55dd56b">00660</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1WeakRef.htm#a8d2de0dbf511eee48ca406f7d55dd56b" title="Reset this reference.">Reset</a>(){
<a name="l00661"></a>00661                 this-&gt;Destroy();
<a name="l00662"></a>00662                 this-&gt;counter = 0;
<a name="l00663"></a>00663         }
<a name="l00664"></a>00664 
<a name="l00665"></a>00665 
<a name="l00666"></a>00666         
<a name="l00667"></a>00667 <span class="keyword">private</span>:
<a name="l00668"></a>00668         <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">void</span>* operator new(<span class="keywordtype">size_t</span> size){
<a name="l00669"></a>00669                 <a class="code" href="debug_8hpp.htm#ab992a04bf05b0e9fb62c1fdf6e0d3867">ASSERT_ALWAYS</a>(<span class="keyword">false</span>)<span class="comment">//forbidden</span>
<a name="l00670"></a>00670                 <span class="comment">//WeakRef objects can only be creaed on stack</span>
<a name="l00671"></a>00671                 <span class="comment">//or as a memer of other object or array</span>
<a name="l00672"></a>00672                 return 0;
<a name="l00673"></a>00673         }
<a name="l00674"></a>00674 };<span class="comment">//~class WeakRef</span>
<a name="l00675"></a>00675 
<a name="l00676"></a>00676 
<a name="l00677"></a>00677 
<a name="l00678"></a><a class="code" href="classting_1_1Ref.htm#a6805103bd789673cb75ffb8fe73bdbf5">00678</a> template &lt;class T&gt; inline <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>&lt;T&gt;::<a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>(const WeakRef&lt;T&gt; &amp;r){
<a name="l00679"></a>00679         <span class="keywordflow">if</span>(r.counter == 0){
<a name="l00680"></a>00680                 this-&gt;p = 0;
<a name="l00681"></a>00681                 <span class="keywordflow">return</span>;
<a name="l00682"></a>00682         }
<a name="l00683"></a>00683 
<a name="l00684"></a>00684         r.counter-&gt;mutex.Lock();
<a name="l00685"></a>00685 
<a name="l00686"></a>00686         this-&gt;p = r.counter-&gt;p;
<a name="l00687"></a>00687 
<a name="l00688"></a>00688         <span class="keywordflow">if</span>(this-&gt;p){
<a name="l00689"></a>00689                 ++(r.counter-&gt;numHardRefs);
<a name="l00690"></a>00690         }
<a name="l00691"></a>00691         
<a name="l00692"></a>00692         r.counter-&gt;mutex.Unlock();
<a name="l00693"></a>00693 }
<a name="l00694"></a>00694 
<a name="l00695"></a>00695 
<a name="l00696"></a>00696 
<a name="l00697"></a>00697 }<span class="comment">//~namespace</span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
