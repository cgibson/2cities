<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: Array.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>Array.hpp</h1><a href="Array_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00033"></a>00033 <span class="preprocessor">#pragma once</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="comment">//#define M_ENABLE_ARRAY_PRINT</span>
<a name="l00036"></a>00036 <span class="preprocessor">#ifdef M_ENABLE_ARRAY_PRINT </span>
<a name="l00037"></a>00037 <span class="preprocessor"></span><span class="preprocessor">#define M_ARRAY_PRINT(x) LOG(x)</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00039"></a><a class="code" href="Array_8hpp.htm#a7876c4dedc5f900af3c6cb1911818773">00039</a> <span class="preprocessor"></span><span class="preprocessor">#define M_ARRAY_PRINT(x)</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm" title="Debug utilities.">debug.hpp</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="Buffer_8hpp.htm" title="buffer abstract class and static buffer wrapper.">Buffer.hpp</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="math_8hpp.htm" title="Math utilities.">math.hpp</a>&quot;</span>
<a name="l00046"></a>00046 
<a name="l00047"></a><a class="code" href="namespaceting.htm">00047</a> <span class="keyword">namespace </span>ting{
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 
<a name="l00058"></a><a class="code" href="classting_1_1Array.htm">00058</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> : <span class="keyword">public</span> ting::<a class="code" href="classting_1_1Buffer.htm" title="abstract buffer template class.">Buffer</a>&lt;T&gt;{
<a name="l00059"></a>00059 
<a name="l00060"></a>00060         <span class="keyword">inline</span> <span class="keywordtype">void</span> PrivateInit(<span class="keywordtype">unsigned</span> arraySize){
<a name="l00061"></a>00061                 this-&gt;<a class="code" href="classting_1_1Buffer.htm#aff05adccb561145486aae07f1c236f02">size</a> = arraySize;
<a name="l00062"></a>00062                 <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classting_1_1Buffer.htm#aff05adccb561145486aae07f1c236f02">size</a> == 0){
<a name="l00063"></a>00063                         this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = 0;
<a name="l00064"></a>00064                         <span class="keywordflow">return</span>;
<a name="l00065"></a>00065                 }
<a name="l00066"></a>00066 
<a name="l00067"></a>00067                 <a class="code" href="Array_8hpp.htm#a7876c4dedc5f900af3c6cb1911818773">M_ARRAY_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Array::PrivateInit(): size = &quot;</span> &lt;&lt; this-&gt;<a class="code" href="classting_1_1Buffer.htm#aff05adccb561145486aae07f1c236f02">size</a> &lt;&lt; std::endl)
<a name="l00068"></a>00068                 <span class="keyword">try</span>{
<a name="l00069"></a>00069                         this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = <span class="keyword">new</span> T[arraySize];
<a name="l00070"></a>00070                 }<span class="keywordflow">catch</span>(...){
<a name="l00071"></a>00071                         <a class="code" href="Array_8hpp.htm#a7876c4dedc5f900af3c6cb1911818773">M_ARRAY_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Array::Init(): exception caught&quot;</span> &lt;&lt; this-&gt;<a class="code" href="classting_1_1Buffer.htm#aff05adccb561145486aae07f1c236f02">size</a> &lt;&lt; std::endl)
<a name="l00072"></a>00072                         this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = 0;
<a name="l00073"></a>00073                         this-&gt;<a class="code" href="classting_1_1Buffer.htm#aff05adccb561145486aae07f1c236f02">size</a> = 0;
<a name="l00074"></a>00074                         <span class="keywordflow">throw</span>;<span class="comment">//rethrow the exception</span>
<a name="l00075"></a>00075                 }
<a name="l00076"></a>00076                 <a class="code" href="Array_8hpp.htm#a7876c4dedc5f900af3c6cb1911818773">M_ARRAY_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Array::PrivateInit(): buf = &quot;</span> &lt;&lt; static_cast&lt;void*&gt;(this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a>) &lt;&lt; std::endl)
<a name="l00077"></a>00077         }
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 
<a name="l00081"></a>00081         <span class="keyword">inline</span> <span class="keywordtype">void</span> Destroy(){
<a name="l00082"></a>00082                 <span class="keyword">delete</span>[] this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a>;
<a name="l00083"></a>00083         }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 <span class="keyword">public</span>:
<a name="l00097"></a>00097         <span class="comment">//NOTE: the constructor is explicit to avoid undesired automatic</span>
<a name="l00098"></a>00098         <span class="comment">//conversions from unsigned to Array.</span>
<a name="l00099"></a><a class="code" href="classting_1_1Array.htm#aca9df210080f5415bcba30989a621ef7">00099</a>         <span class="keyword">explicit</span> <span class="keyword">inline</span> <a class="code" href="classting_1_1Array.htm#aca9df210080f5415bcba30989a621ef7" title="Creates new array of requested size.">Array</a>(<span class="keywordtype">unsigned</span> arraySize = 0){
<a name="l00100"></a>00100                 this-&gt;PrivateInit(arraySize);
<a name="l00101"></a>00101         }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 <span class="keyword">private</span>:
<a name="l00106"></a>00106         <span class="keyword">inline</span> <span class="keywordtype">void</span> CopyFrom(<span class="keyword">const</span> <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&amp; a){
<a name="l00107"></a>00107                 this-&gt;<a class="code" href="classting_1_1Buffer.htm#aff05adccb561145486aae07f1c236f02">size</a> = a.<a class="code" href="classting_1_1Buffer.htm#aff05adccb561145486aae07f1c236f02">size</a>;
<a name="l00108"></a>00108                 this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = a.<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a>;
<a name="l00109"></a>00109                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&amp;<span class="keyword">&gt;</span>(a).<a class="code" href="classting_1_1Buffer.htm#aff05adccb561145486aae07f1c236f02">size</a> = 0;
<a name="l00110"></a>00110                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&amp;<span class="keyword">&gt;</span>(a).<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = 0;
<a name="l00111"></a>00111         }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 <span class="keyword">public</span>:
<a name="l00128"></a>00128         <span class="comment">//copy constructor</span>
<a name="l00129"></a><a class="code" href="classting_1_1Array.htm#a5844d7598a08f66ee96bb2ae2f79f4c6">00129</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Array.htm#a5844d7598a08f66ee96bb2ae2f79f4c6" title="Copy constructor, works as auto-pointer.">Array</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&amp; a){
<a name="l00130"></a>00130                 this-&gt;CopyFrom(a);
<a name="l00131"></a>00131         }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 
<a name="l00147"></a><a class="code" href="classting_1_1Array.htm#ab8a7736487146584c1628a4540395d48">00147</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&amp; <a class="code" href="classting_1_1Array.htm#ab8a7736487146584c1628a4540395d48" title="Assignment operator, works as auto-pointer.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&amp; a){
<a name="l00148"></a>00148                 <span class="comment">//behavior similar to Ptr class</span>
<a name="l00149"></a>00149                 this-&gt;Destroy();
<a name="l00150"></a>00150                 this-&gt;CopyFrom(a);
<a name="l00151"></a>00151                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00152"></a>00152         }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00155"></a>00155         
<a name="l00156"></a><a class="code" href="classting_1_1Array.htm#a55327acb2f0bbc8107dfec172bae388a">00156</a>         <a class="code" href="classting_1_1Array.htm#a55327acb2f0bbc8107dfec172bae388a">~Array</a>(){
<a name="l00157"></a>00157                 <a class="code" href="Array_8hpp.htm#a7876c4dedc5f900af3c6cb1911818773">M_ARRAY_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Array::~Array(): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00158"></a>00158                 this-&gt;Destroy();
<a name="l00159"></a>00159                 <a class="code" href="Array_8hpp.htm#a7876c4dedc5f900af3c6cb1911818773">M_ARRAY_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Array::~Array(): exit&quot;</span> &lt;&lt; std::endl)
<a name="l00160"></a>00160         }
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00171"></a><a class="code" href="classting_1_1Array.htm#ac092594f79ec06d7e23b0cd3d8b5678a">00171</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1Array.htm#ac092594f79ec06d7e23b0cd3d8b5678a" title="initialize array with new memory buffer of given size.">Init</a>(<span class="keywordtype">unsigned</span> arraySize){
<a name="l00172"></a>00172                 <a class="code" href="Array_8hpp.htm#a7876c4dedc5f900af3c6cb1911818773">M_ARRAY_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Array::Init(): buf = &quot;</span> &lt;&lt; static_cast&lt;void*&gt;(this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a>) &lt;&lt; std::endl)
<a name="l00173"></a>00173                 this-&gt;Destroy();
<a name="l00174"></a>00174                 this-&gt;PrivateInit(arraySize);
<a name="l00175"></a>00175         }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 
<a name="l00184"></a><a class="code" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e">00184</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">IsValid</a>()<span class="keyword">const</span>{
<a name="l00185"></a>00185                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> != 0;
<a name="l00186"></a>00186         }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 
<a name="l00196"></a><a class="code" href="classting_1_1Array.htm#ac597495916260174e6270e64ac80b3ca">00196</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Array.htm#ac597495916260174e6270e64ac80b3ca" title="inverse of Array::IsValid().">IsNotValid</a>()<span class="keyword">const</span>{
<a name="l00197"></a>00197                 <span class="keywordflow">return</span> !this-&gt;<a class="code" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">IsValid</a>();
<a name="l00198"></a>00198         }
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 
<a name="l00206"></a><a class="code" href="classting_1_1Array.htm#ae55c4b53ddd7eb1d204676c5b888ca9b">00206</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Array.htm#ae55c4b53ddd7eb1d204676c5b888ca9b" title="Converts to bool.">operator bool</a>(){
<a name="l00207"></a>00207                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">IsValid</a>();
<a name="l00208"></a>00208         }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00217"></a><a class="code" href="classting_1_1Array.htm#ab15fdd2519ca706d00ab9222982f6c3b">00217</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Array.htm#ab15fdd2519ca706d00ab9222982f6c3b" title="free array memory buffer.">Reset</a>(){
<a name="l00218"></a>00218                 this-&gt;Destroy();
<a name="l00219"></a>00219                 this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = 0;
<a name="l00220"></a>00220                 this-&gt;<a class="code" href="classting_1_1Buffer.htm#aff05adccb561145486aae07f1c236f02">size</a> = 0;
<a name="l00221"></a>00221         }
<a name="l00222"></a>00222 };<span class="comment">//~template class Array</span>
<a name="l00223"></a>00223 
<a name="l00224"></a>00224 }<span class="comment">//~namespace ting</span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
