<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: debug.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>debug.hpp</h1><a href="debug_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#ifdef __SYMBIAN32__</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;typeinfo&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#endif</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span>
<a name="l00041"></a>00041 <span class="preprocessor">#if defined(_DEBUG) &amp;&amp; !defined(DEBUG)</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#define DEBUG</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>
<a name="l00045"></a>00045 <span class="comment">//</span>
<a name="l00046"></a>00046 <span class="comment">//</span>
<a name="l00047"></a>00047 <span class="comment">//  Logging definitions</span>
<a name="l00048"></a>00048 <span class="comment">//</span>
<a name="l00049"></a>00049 <span class="comment">//</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="preprocessor">#ifndef M_DOC_DONT_EXTRACT //for doxygen</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="keyword">namespace </span>ting{
<a name="l00053"></a>00053 <span class="keyword">namespace </span>ting_debug{
<a name="l00054"></a>00054 <span class="preprocessor">#ifdef __SYMBIAN32__</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span><span class="keyword">inline</span> std::ofstream&amp; DebugLogger(){
<a name="l00057"></a>00057         <span class="comment">//this allows to make debug output even if main() is not called yet and even if</span>
<a name="l00058"></a>00058         <span class="comment">//standard std::cout object is not created since static global variables initialization</span>
<a name="l00059"></a>00059         <span class="comment">//order is undetermined in C++ if these variables are located in separate cpp files!</span>
<a name="l00060"></a>00060         <span class="keyword">static</span> std::ofstream* logger = <span class="keyword">new</span> std::ofstream(<span class="stringliteral">&quot;output.log&quot;</span>);
<a name="l00061"></a>00061         <span class="keywordflow">return</span> *logger;
<a name="l00062"></a>00062 };
<a name="l00063"></a>00063 <span class="preprocessor">#endif</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span>}<span class="comment">//~namespace ting_debug</span>
<a name="l00065"></a>00065 }<span class="comment">//~namespace ting</span>
<a name="l00066"></a>00066 <span class="preprocessor">#endif //~M_DOC_DONT_EXTRACT //for doxygen</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span>
<a name="l00068"></a>00068 <span class="preprocessor">#ifdef __SYMBIAN32__</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span><span class="preprocessor">#define LOG_ALWAYS(x)</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="preprocessor">#define TRACE_ALWAYS(x)</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">#define TRACE_AND_LOG_ALWAYS(x)</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00073"></a><a class="code" href="debug_8hpp.htm#a96df0f06a1ba4eae75a5f36d8ae10e12">00073</a> <span class="preprocessor"></span><span class="preprocessor">#define LOG_ALWAYS(x) ting::ting_debug::DebugLogger() x; ting::ting_debug::DebugLogger().flush();</span>
<a name="l00074"></a><a class="code" href="debug_8hpp.htm#a5c90b51dab9663ac5f3b7876d7d1965f">00074</a> <span class="preprocessor"></span><span class="preprocessor">#define TRACE_ALWAYS(x) std::cout x; std::cout.flush();</span>
<a name="l00075"></a><a class="code" href="debug_8hpp.htm#a2254954d687c2d60e911658f6064047d">00075</a> <span class="preprocessor"></span><span class="preprocessor">#define TRACE_AND_LOG_ALWAYS(x) LOG_ALWAYS(x) TRACE_ALWAYS(x)</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span>
<a name="l00078"></a>00078 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span>
<a name="l00080"></a>00080 <span class="preprocessor">#define LOG(x) LOG_ALWAYS(x)</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span><span class="preprocessor">#define TRACE(x) TRACE_ALWAYS(x)</span>
<a name="l00082"></a>00082 <span class="preprocessor"></span><span class="preprocessor">#define TRACE_AND_LOG(x) TRACE_AND_LOG_ALWAYS(x)</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span>
<a name="l00084"></a>00084 <span class="preprocessor">#define LOG_IF_TRUE(x, y) if(x){ LOG(y) }</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span>
<a name="l00086"></a>00086 <span class="preprocessor">#define DEBUG_CODE(x) x</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span>
<a name="l00088"></a>00088 <span class="preprocessor">#else//#ifdef DEBUG</span>
<a name="l00089"></a>00089 <span class="preprocessor"></span>
<a name="l00090"></a><a class="code" href="debug_8hpp.htm#af855c94dc540e943632089ce7496faac">00090</a> <span class="preprocessor">#define LOG(x)</span>
<a name="l00091"></a><a class="code" href="debug_8hpp.htm#a494d31903e7b0333dfa03b0778679113">00091</a> <span class="preprocessor"></span><span class="preprocessor">#define TRACE(x)</span>
<a name="l00092"></a><a class="code" href="debug_8hpp.htm#adc03d55eb4a38b80591e8b091fd5d5ee">00092</a> <span class="preprocessor"></span><span class="preprocessor">#define TRACE_AND_LOG(x)</span>
<a name="l00093"></a><a class="code" href="debug_8hpp.htm#aa24725d8de25d230115f6fc0afe1eb2f">00093</a> <span class="preprocessor"></span><span class="preprocessor">#define LOG_IF_TRUE(x, y)</span>
<a name="l00094"></a><a class="code" href="debug_8hpp.htm#a21a773603fea5f18c619371655eaf9fb">00094</a> <span class="preprocessor"></span><span class="preprocessor">#define DEBUG_CODE(x)</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span>
<a name="l00096"></a>00096 <span class="preprocessor">#endif//~#ifdef DEBUG</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span>
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 <span class="comment">//</span>
<a name="l00100"></a>00100 <span class="comment">//</span>
<a name="l00101"></a>00101 <span class="comment">//  Assertion definitions</span>
<a name="l00102"></a>00102 <span class="comment">//</span>
<a name="l00103"></a>00103 <span class="comment">//</span>
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 <span class="preprocessor">#ifdef __SYMBIAN32__</span>
<a name="l00106"></a>00106 <span class="preprocessor"></span>
<a name="l00107"></a>00107 <span class="preprocessor">#include &lt;e32std.h&gt;</span>
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 <span class="preprocessor">#define ASSERT_ALWAYS(x) __ASSERT_ALWAYS((x), User::Panic(_L(&quot;ASSERTION FAILED!&quot;),3));</span>
<a name="l00110"></a>00110 <span class="preprocessor"></span><span class="preprocessor">#define ASSERT_INFO_ALWAYS(x, y) ASSERT_ALWAYS(x)</span>
<a name="l00111"></a>00111 <span class="preprocessor"></span>
<a name="l00112"></a>00112 <span class="preprocessor">#else //Non symbian</span>
<a name="l00113"></a>00113 <span class="preprocessor"></span>
<a name="l00114"></a>00114 <span class="preprocessor">#include &lt;cassert&gt;</span>
<a name="l00115"></a>00115 
<a name="l00116"></a><a class="code" href="debug_8hpp.htm#a032a92bcf3469c2d1289e24b5665ef40">00116</a> <span class="preprocessor">#define ASSERT_INFO_ALWAYS(x, y) if(!(x)){ \</span>
<a name="l00117"></a>00117 <span class="preprocessor">                                                LOG_ALWAYS(&lt;&lt; &quot;[!!!fatal] Assertion failed at:\n\t&quot;__FILE__ &lt;&lt; &quot;:&quot; &lt;&lt; __LINE__ &lt;&lt; &quot;| &quot; &lt;&lt; y &lt;&lt; std::endl) \</span>
<a name="l00118"></a>00118 <span class="preprocessor">                                                TRACE_ALWAYS(&lt;&lt; &quot;[!!!fatal] Assertion failed at:\n\t&quot;__FILE__ &lt;&lt; &quot;:&quot; &lt;&lt; __LINE__ &lt;&lt; &quot;| &quot; &lt;&lt; y &lt;&lt; std::endl) \</span>
<a name="l00119"></a>00119 <span class="preprocessor">                                                assert(false); \</span>
<a name="l00120"></a>00120 <span class="preprocessor">                                        }</span>
<a name="l00121"></a><a class="code" href="debug_8hpp.htm#ab992a04bf05b0e9fb62c1fdf6e0d3867">00121</a> <span class="preprocessor"></span><span class="preprocessor">#define ASSERT_ALWAYS(x) ASSERT_INFO_ALWAYS((x), &quot;no additional info&quot;)</span>
<a name="l00122"></a>00122 <span class="preprocessor"></span>
<a name="l00123"></a>00123 <span class="preprocessor">#endif</span>
<a name="l00124"></a>00124 <span class="preprocessor"></span>
<a name="l00125"></a>00125 
<a name="l00126"></a>00126 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span><span class="preprocessor">#define ASSERT_INFO(x, y) ASSERT_INFO_ALWAYS((x), y)</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span><span class="preprocessor">#define ASSERT(x) ASSERT_ALWAYS(x)</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span><span class="preprocessor">#define ASSERT_EXEC(x) ASSERT(x)</span>
<a name="l00130"></a>00130 <span class="preprocessor"></span><span class="keyword">namespace </span>ting{
<a name="l00131"></a>00131 <span class="keyword">namespace </span>ting_debug{
<a name="l00132"></a>00132 <span class="keyword">inline</span> <span class="keywordtype">void</span> LogAssert(<span class="keyword">const</span> <span class="keywordtype">char</span>* file, <span class="keywordtype">int</span> line){
<a name="l00133"></a>00133         <a class="code" href="debug_8hpp.htm#a96df0f06a1ba4eae75a5f36d8ae10e12">LOG_ALWAYS</a>(&lt;&lt; <span class="stringliteral">&quot;[!!!fatal] Assertion failed at:\n\t&quot;</span>&lt;&lt; file &lt;&lt; <span class="stringliteral">&quot;:&quot;</span> &lt;&lt; line &lt;&lt; <span class="stringliteral">&quot;| ASS() assertion macro&quot;</span> &lt;&lt; std::endl) \
<a name="l00134"></a>00134 };
<a name="l00135"></a>00135 }
<a name="l00136"></a>00136 }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 <span class="preprocessor">#ifdef __SYMBIAN32__</span>
<a name="l00139"></a>00139 <span class="preprocessor"></span><span class="preprocessor">#define ASS(x) (x)</span>
<a name="l00140"></a>00140 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00141"></a>00141 <span class="preprocessor"></span><span class="preprocessor">#define ASS(x) ( (x) ? (x) : (ting::ting_debug::LogAssert(__FILE__, __LINE__), (assert(false)), (x)) )</span>
<a name="l00142"></a>00142 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00143"></a>00143 <span class="preprocessor"></span>
<a name="l00144"></a>00144 <span class="preprocessor">#else</span>
<a name="l00145"></a><a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">00145</a> <span class="preprocessor"></span><span class="preprocessor">#define ASSERT_INFO(x, y)</span>
<a name="l00146"></a><a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">00146</a> <span class="preprocessor"></span><span class="preprocessor">#define ASSERT(x)</span>
<a name="l00147"></a><a class="code" href="debug_8hpp.htm#a93e8ea72eb76b37321ac47b25fbd8f15">00147</a> <span class="preprocessor"></span><span class="preprocessor">#define ASSERT_EXEC(x) x;</span>
<a name="l00148"></a><a class="code" href="debug_8hpp.htm#a08625ef39bfc7613672e2f02d90f5736">00148</a> <span class="preprocessor"></span><span class="preprocessor">#define ASS(x) (x)</span>
<a name="l00149"></a>00149 <span class="preprocessor"></span><span class="preprocessor">#endif//~#ifdef DEBUG</span>
<a name="l00150"></a>00150 <span class="preprocessor"></span>
<a name="l00151"></a>00151 <span class="comment">//==================</span>
<a name="l00152"></a>00152 <span class="comment">//=  Static assert =</span>
<a name="l00153"></a>00153 <span class="comment">//==================</span>
<a name="l00154"></a>00154 <span class="preprocessor">#ifndef M_DOC_DONT_EXTRACT //for doxygen</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span><span class="keyword">namespace </span>ting{
<a name="l00156"></a>00156 <span class="keyword">namespace </span>ting_debug{
<a name="l00157"></a>00157 <span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> b&gt; <span class="keyword">struct </span>C_StaticAssert{
<a name="l00158"></a>00158         <span class="keyword">virtual</span> <span class="keywordtype">void</span> STATIC_ASSERTION_FAILED() = 0;
<a name="l00159"></a>00159         <span class="keyword">virtual</span> ~C_StaticAssert(){};
<a name="l00160"></a>00160 };
<a name="l00161"></a>00161 <span class="keyword">template</span> &lt;&gt; <span class="keyword">struct </span>C_StaticAssert&lt;true&gt;{};
<a name="l00162"></a>00162 }<span class="comment">//~namespace ting_debug</span>
<a name="l00163"></a>00163 }<span class="comment">//~namespace ting</span>
<a name="l00164"></a>00164 <span class="preprocessor">#define M_STATIC_ASSERT_II(x, l, c) struct C_StaticAssertInst_##l##_##c{ \</span>
<a name="l00165"></a>00165 <span class="preprocessor">        ting::ting_debug::C_StaticAssert&lt;x&gt; STATIC_ASSERTION_FAILED; \</span>
<a name="l00166"></a>00166 <span class="preprocessor">};</span>
<a name="l00167"></a>00167 <span class="preprocessor"></span><span class="preprocessor">#define M_STATIC_ASSERT_I(x, l, c) M_STATIC_ASSERT_II(x, l, c)</span>
<a name="l00168"></a>00168 <span class="preprocessor"></span><span class="preprocessor">#endif //~M_DOC_DONT_EXTRACT //for doxygen</span>
<a name="l00169"></a>00169 <span class="preprocessor"></span>
<a name="l00170"></a>00170 <span class="preprocessor">#if defined(__GNUG__) || (_MSC_VER &gt;= 7100) //__COUNTER__ macro is only supported in these compilers</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span><span class="preprocessor">#define STATIC_ASSERT(x) M_STATIC_ASSERT_I(x, __LINE__, __COUNTER__)</span>
<a name="l00172"></a>00172 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00173"></a><a class="code" href="debug_8hpp.htm#ac34bd49b9b8483a2b40c61e7607fd878">00173</a> <span class="preprocessor"></span><span class="preprocessor">#define STATIC_ASSERT(x)</span>
<a name="l00174"></a>00174 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00175"></a>00175 <span class="preprocessor"></span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
