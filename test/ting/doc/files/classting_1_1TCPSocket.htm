<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: ting::TCPSocket Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceting.htm">ting</a>::<a class="el" href="classting_1_1TCPSocket.htm">TCPSocket</a>
  </div>
</div>
<div class="contents">
<h1>ting::TCPSocket Class Reference</h1><!-- doxytag: class="ting::TCPSocket" --><!-- doxytag: inherits="ting::Socket" -->
<p>a class which represents a TCP socket.  
<a href="#_details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Socket_8hpp_source.htm">Socket.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ting::TCPSocket:</div>
<div class="dynsection">
 <div class="center">
  <img src="classting_1_1TCPSocket.gif" usemap="#ting::TCPSocket_map" alt=""/>
  <map id="ting::TCPSocket_map" name="ting::TCPSocket_map">
<area href="classting_1_1Socket.htm" alt="ting::Socket" shape="rect" coords="0,56,100,80"/>
<area href="classting_1_1Waitable.htm" alt="ting::Waitable" shape="rect" coords="0,0,100,24"/>
</map>
 </div>
</div>

<p><a href="classting_1_1TCPSocket-members.htm">List of all members.</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#ae9e2247bfceb9cc7a30a141870e97d3f">TCPSocket</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructs an invalid TCP socket object.  <a href="#ae9e2247bfceb9cc7a30a141870e97d3f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#a914098ee4716d04a84876b9ba4e43f33">TCPSocket</a> (const <a class="el" href="classting_1_1TCPSocket.htm">TCPSocket</a> &amp;s)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A copy constructor.  <a href="#a914098ee4716d04a84876b9ba4e43f33"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#a871346e7548cbe063d4780cbdf048aa5">TCPSocket</a> (const <a class="el" href="classting_1_1IPAddress.htm">IPAddress</a> &amp;ip, bool disableNaggle=false)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A constructor which automatically calls <a class="el" href="classting_1_1TCPSocket.htm#a89da0727ecfe9ece94a397e896be2525" title="Connects the socket.">TCPSocket::Open()</a> method.  <a href="#a871346e7548cbe063d4780cbdf048aa5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1TCPSocket.htm">TCPSocket</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#a2ced4bafbd69a9e57bfb90890ca1c2a7">operator=</a> (const <a class="el" href="classting_1_1TCPSocket.htm">TCPSocket</a> &amp;s)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assignment operator, works similar to std::auto_ptr::operator=().  <a href="#a2ced4bafbd69a9e57bfb90890ca1c2a7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#a89da0727ecfe9ece94a397e896be2525">Open</a> (const <a class="el" href="classting_1_1IPAddress.htm">IPAddress</a> &amp;ip, bool disableNaggle=false)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Connects the socket.  <a href="#a89da0727ecfe9ece94a397e896be2525"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#a0779da2c776c3e59a0189386c1c512fa">Send</a> (const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> *data, unsigned size)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Send data to connected socket.  <a href="#a0779da2c776c3e59a0189386c1c512fa"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#a7e025a750453c96484fb49cccde77518">Send</a> (const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> &gt; &amp;buf, unsigned offset=0)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Send data to connected socket.  <a href="#a7e025a750453c96484fb49cccde77518"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#a25f6a383eb9bcce83f5148e19de5b7f6">SendAll</a> (const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> *data, unsigned size)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Send data to connected socket.  <a href="#a25f6a383eb9bcce83f5148e19de5b7f6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#a09597b2c73be99246c330bbf8adda69b">SendAll</a> (const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> &gt; &amp;buf)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Send data to connected socket.  <a href="#a09597b2c73be99246c330bbf8adda69b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#acf3ac7f3f1dbbc2d2017f99a25ef7120">Recv</a> (<a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> *buf, unsigned maxSize)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Receive data from connected socket.  <a href="#acf3ac7f3f1dbbc2d2017f99a25ef7120"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#ad588f325764009beb671f905c20e5889">Recv</a> (<a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> &gt; &amp;buf, unsigned offset=0)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Receive data from connected socket.  <a href="#ad588f325764009beb671f905c20e5889"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1IPAddress.htm">IPAddress</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#aa938bd439530cfe3a720a772f344fa60">GetLocalAddress</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get local IP address and port.  <a href="#aa938bd439530cfe3a720a772f344fa60"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1IPAddress.htm">IPAddress</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPSocket.htm#a913c3b41d53a219d7a59e1033b8ef7a8">GetRemoteAddress</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get remote IP address and port.  <a href="#a913c3b41d53a219d7a59e1033b8ef7a8"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>a class which represents a TCP socket. </p>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ae9e2247bfceb9cc7a30a141870e97d3f"></a><!-- doxytag: member="ting::TCPSocket::TCPSocket" ref="ae9e2247bfceb9cc7a30a141870e97d3f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ting::TCPSocket::TCPSocket </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constructs an invalid TCP socket object. </p>

</div>
</div>
<a class="anchor" id="a914098ee4716d04a84876b9ba4e43f33"></a><!-- doxytag: member="ting::TCPSocket::TCPSocket" ref="a914098ee4716d04a84876b9ba4e43f33" args="(const TCPSocket &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ting::TCPSocket::TCPSocket </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1TCPSocket.htm">TCPSocket</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A copy constructor. </p>
<p>Copy constructor creates a new socket object which refers to the same socket as s. After constructor completes the s becomes invalid. In other words, the behavior of copy constructor is similar to one of std::auto_ptr class from standard C++ library. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>- other TCP socket to make a copy from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a871346e7548cbe063d4780cbdf048aa5"></a><!-- doxytag: member="ting::TCPSocket::TCPSocket" ref="a871346e7548cbe063d4780cbdf048aa5" args="(const IPAddress &amp;ip, bool disableNaggle=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ting::TCPSocket::TCPSocket </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1IPAddress.htm">IPAddress</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>ip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>disableNaggle</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A constructor which automatically calls <a class="el" href="classting_1_1TCPSocket.htm#a89da0727ecfe9ece94a397e896be2525" title="Connects the socket.">TCPSocket::Open()</a> method. </p>
<p>This constructor creates a socket and calls its <a class="el" href="classting_1_1TCPSocket.htm#a89da0727ecfe9ece94a397e896be2525" title="Connects the socket.">TCPSocket::Open()</a> method. So, it creates an already opened socket. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ip</em>&nbsp;</td><td>- IP address to 'connect to/listen on'. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>disableNaggle</em>&nbsp;</td><td>- enable/disable Naggle algorithm. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="aa938bd439530cfe3a720a772f344fa60"></a><!-- doxytag: member="ting::TCPSocket::GetLocalAddress" ref="aa938bd439530cfe3a720a772f344fa60" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1IPAddress.htm">IPAddress</a> ting::TCPSocket::GetLocalAddress </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get local IP address and port. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>IP address and port of the local socket. </dd></dl>

</div>
</div>
<a class="anchor" id="a913c3b41d53a219d7a59e1033b8ef7a8"></a><!-- doxytag: member="ting::TCPSocket::GetRemoteAddress" ref="a913c3b41d53a219d7a59e1033b8ef7a8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1IPAddress.htm">IPAddress</a> ting::TCPSocket::GetRemoteAddress </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get remote IP address and port. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>IP address and port of the peer socket. </dd></dl>

</div>
</div>
<a class="anchor" id="a89da0727ecfe9ece94a397e896be2525"></a><!-- doxytag: member="ting::TCPSocket::Open" ref="a89da0727ecfe9ece94a397e896be2525" args="(const IPAddress &amp;ip, bool disableNaggle=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ting::TCPSocket::Open </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1IPAddress.htm">IPAddress</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>ip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>disableNaggle</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Connects the socket. </p>
<p>This method connects the socket to remote TCP server socket. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ip</em>&nbsp;</td><td>- IP address. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>disableNaggle</em>&nbsp;</td><td>- enable/disable Naggle algorithm. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2ced4bafbd69a9e57bfb90890ca1c2a7"></a><!-- doxytag: member="ting::TCPSocket::operator=" ref="a2ced4bafbd69a9e57bfb90890ca1c2a7" args="(const TCPSocket &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1TCPSocket.htm">TCPSocket</a>&amp; ting::TCPSocket::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1TCPSocket.htm">TCPSocket</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment operator, works similar to std::auto_ptr::operator=(). </p>
<p>After this assignment operator completes this socket object refers to the socket the s objejct referred, s become invalid. It works similar to std::auto_ptr::operator=() from standard C++ library. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>- socket to assign from. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classting_1_1Socket.htm#adf9973457979069b4996b3faab1f4e24">ting::Socket</a>.</p>

</div>
</div>
<a class="anchor" id="ad588f325764009beb671f905c20e5889"></a><!-- doxytag: member="ting::TCPSocket::Recv" ref="ad588f325764009beb671f905c20e5889" args="(ting::Buffer&lt; u8 &gt; &amp;buf, unsigned offset=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned ting::TCPSocket::Recv </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>offset</em> = <code>0</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Receive data from connected socket. </p>
<p>Receives data available on the socket. If there is no data available this function does not block, instead it returns 0, indicating that 0 bytes were received. If previous <a class="el" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39" title="wait for event.">WaitSet::Wait()</a> indicated that socket is ready for reading and <a class="el" href="classting_1_1TCPSocket.htm#acf3ac7f3f1dbbc2d2017f99a25ef7120" title="Receive data from connected socket.">TCPSocket::Recv()</a> returns 0, then connection was closed by peer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>buf</em>&nbsp;</td><td>- pointer to the buffer where to put received data. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>offset</em>&nbsp;</td><td>- offset inside the buffer where to start putting data from. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of bytes written to the buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="acf3ac7f3f1dbbc2d2017f99a25ef7120"></a><!-- doxytag: member="ting::TCPSocket::Recv" ref="acf3ac7f3f1dbbc2d2017f99a25ef7120" args="(u8 *buf, unsigned maxSize)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned ting::TCPSocket::Recv </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> *&nbsp;</td>
          <td class="paramname"> <em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>maxSize</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Receive data from connected socket. </p>
<p>Receives data available on the socket. If there is no data available this function does not block, instead it returns 0, indicating that 0 bytes were received. If previous <a class="el" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39" title="wait for event.">WaitSet::Wait()</a> indicated that socket is ready for reading and <a class="el" href="classting_1_1TCPSocket.htm#acf3ac7f3f1dbbc2d2017f99a25ef7120" title="Receive data from connected socket.">TCPSocket::Recv()</a> returns 0, then connection was reset by peer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>buf</em>&nbsp;</td><td>- pointer to the buffer where to put received data. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>maxSize</em>&nbsp;</td><td>- maximal number of bytes which can be put to the buffer. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of bytes written to the buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="a7e025a750453c96484fb49cccde77518"></a><!-- doxytag: member="ting::TCPSocket::Send" ref="a7e025a750453c96484fb49cccde77518" args="(const ting::Buffer&lt; u8 &gt; &amp;buf, unsigned offset=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned ting::TCPSocket::Send </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>offset</em> = <code>0</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Send data to connected socket. </p>
<p>Sends data on connected socket. This method does not guarantee that the whole buffer will be sent completely, it will return the number of bytes actually sent. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>buf</em>&nbsp;</td><td>- pointer to the buffer with data to send. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>offset</em>&nbsp;</td><td>- offset inside the buffer from where to start sending the data. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of bytes actually sent. </dd></dl>

</div>
</div>
<a class="anchor" id="a0779da2c776c3e59a0189386c1c512fa"></a><!-- doxytag: member="ting::TCPSocket::Send" ref="a0779da2c776c3e59a0189386c1c512fa" args="(const u8 *data, unsigned size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned ting::TCPSocket::Send </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> *&nbsp;</td>
          <td class="paramname"> <em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Send data to connected socket. </p>
<p>Sends data on connected socket. This method does not guarantee that the whole buffer will be sent completely, it will return the number of bytes actually sent. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>- pointer to the buffer with data to send. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>- number of bytes to send. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the number of bytes actually sent. </dd></dl>

</div>
</div>
<a class="anchor" id="a09597b2c73be99246c330bbf8adda69b"></a><!-- doxytag: member="ting::TCPSocket::SendAll" ref="a09597b2c73be99246c330bbf8adda69b" args="(const ting::Buffer&lt; u8 &gt; &amp;buf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ting::TCPSocket::SendAll </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>buf</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Send data to connected socket. </p>
<p>Sends data on connected socket. This method blocks until all data is completely sent. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>buf</em>&nbsp;</td><td>- the buffer with data to send. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a25f6a383eb9bcce83f5148e19de5b7f6"></a><!-- doxytag: member="ting::TCPSocket::SendAll" ref="a25f6a383eb9bcce83f5148e19de5b7f6" args="(const u8 *data, unsigned size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ting::TCPSocket::SendAll </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">u8</a> *&nbsp;</td>
          <td class="paramname"> <em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Send data to connected socket. </p>
<p>Sends data on connected socket. This method blocks until all data is completely sent. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>- pointer to the buffer with data to send. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>- number of bytes to send. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Socket_8hpp_source.htm">Socket.hpp</a></li>
</ul>
</div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
