<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: ting::TCPServerSocket Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceting.htm">ting</a>::<a class="el" href="classting_1_1TCPServerSocket.htm">TCPServerSocket</a>
  </div>
</div>
<div class="contents">
<h1>ting::TCPServerSocket Class Reference</h1><!-- doxytag: class="ting::TCPServerSocket" --><!-- doxytag: inherits="ting::Socket" -->
<p>a class which represents a TCP server socket.  
<a href="#_details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Socket_8hpp_source.htm">Socket.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ting::TCPServerSocket:</div>
<div class="dynsection">
 <div class="center">
  <img src="classting_1_1TCPServerSocket.gif" usemap="#ting::TCPServerSocket_map" alt=""/>
  <map id="ting::TCPServerSocket_map" name="ting::TCPServerSocket_map">
<area href="classting_1_1Socket.htm" alt="ting::Socket" shape="rect" coords="0,56,139,80"/>
<area href="classting_1_1Waitable.htm" alt="ting::Waitable" shape="rect" coords="0,0,139,24"/>
</map>
 </div>
</div>

<p><a href="classting_1_1TCPServerSocket-members.htm">List of all members.</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPServerSocket.htm#a8b74952db9a2268ddb2e6a2be53af8b8">TCPServerSocket</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Creates an invalid (unopened) TCP server socket.  <a href="#a8b74952db9a2268ddb2e6a2be53af8b8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPServerSocket.htm#a162511ee700e167fa9d0fb73142cf49e">TCPServerSocket</a> (const <a class="el" href="classting_1_1TCPServerSocket.htm">TCPServerSocket</a> &amp;s)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A copy constructor.  <a href="#a162511ee700e167fa9d0fb73142cf49e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1TCPServerSocket.htm">TCPServerSocket</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPServerSocket.htm#a2f4591ac79c9a3a19ca4c771698fc2fd">operator=</a> (const <a class="el" href="classting_1_1TCPServerSocket.htm">TCPServerSocket</a> &amp;s)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assignment operator, works similar to std::auto_ptr::operator=().  <a href="#a2f4591ac79c9a3a19ca4c771698fc2fd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPServerSocket.htm#a8551ebbc477278b16e72854fc2c91758">TCPServerSocket</a> (<a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a> port, bool disableNaggle=false)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A constructor which automatically calls <a class="el" href="classting_1_1TCPServerSocket.htm#a37517ec33cee52bba2d94a636eb9813f" title="Connects the socket or starts listening on it.">TCPServerSocket::Open()</a> method.  <a href="#a8551ebbc477278b16e72854fc2c91758"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPServerSocket.htm#a37517ec33cee52bba2d94a636eb9813f">Open</a> (<a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a> port, bool disableNaggle=false, <a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a> queueLength=50)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Connects the socket or starts listening on it.  <a href="#a37517ec33cee52bba2d94a636eb9813f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1TCPSocket.htm">TCPSocket</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1TCPServerSocket.htm#ab00890b689d13c8853677091740c4d7c">Accept</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Accepts one of the pending connections, non-blocking.  <a href="#ab00890b689d13c8853677091740c4d7c"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>a class which represents a TCP server socket. </p>
<p>TCP server socket is the socket which can listen for new connections and accept them creating an ordinary TCP socket for it. </p>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a8b74952db9a2268ddb2e6a2be53af8b8"></a><!-- doxytag: member="ting::TCPServerSocket::TCPServerSocket" ref="a8b74952db9a2268ddb2e6a2be53af8b8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ting::TCPServerSocket::TCPServerSocket </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Creates an invalid (unopened) TCP server socket. </p>

</div>
</div>
<a class="anchor" id="a162511ee700e167fa9d0fb73142cf49e"></a><!-- doxytag: member="ting::TCPServerSocket::TCPServerSocket" ref="a162511ee700e167fa9d0fb73142cf49e" args="(const TCPServerSocket &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ting::TCPServerSocket::TCPServerSocket </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1TCPServerSocket.htm">TCPServerSocket</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A copy constructor. </p>
<p>Copy constructor creates a new socket object which refers to the same socket as s. After constructor completes the s becomes invalid. In other words, the behavior of copy constructor is similar to one of std::auto_ptr class from standard C++ library. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>- other TCP socket to make a copy from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8551ebbc477278b16e72854fc2c91758"></a><!-- doxytag: member="ting::TCPServerSocket::TCPServerSocket" ref="a8551ebbc477278b16e72854fc2c91758" args="(u16 port, bool disableNaggle=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ting::TCPServerSocket::TCPServerSocket </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a>&nbsp;</td>
          <td class="paramname"> <em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>disableNaggle</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A constructor which automatically calls <a class="el" href="classting_1_1TCPServerSocket.htm#a37517ec33cee52bba2d94a636eb9813f" title="Connects the socket or starts listening on it.">TCPServerSocket::Open()</a> method. </p>
<p>This constructor creates a socket and calls its <a class="el" href="classting_1_1TCPServerSocket.htm#a37517ec33cee52bba2d94a636eb9813f" title="Connects the socket or starts listening on it.">TCPServerSocket::Open()</a> method. So, it creates an already opened socket listening on the specified port. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>port</em>&nbsp;</td><td>- IP port number to listen on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>disableNaggle</em>&nbsp;</td><td>- enable/disable Naggle algorithm for all accepted connections. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ab00890b689d13c8853677091740c4d7c"></a><!-- doxytag: member="ting::TCPServerSocket::Accept" ref="ab00890b689d13c8853677091740c4d7c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1TCPSocket.htm">TCPSocket</a> ting::TCPServerSocket::Accept </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Accepts one of the pending connections, non-blocking. </p>
<p>Accepts one of the pending connections and returns a TCP socket object which represents either a valid connected socket or an invalid socket object. This function does not block if there is no any pending connections, it just returns invalid socket object in this case. One can periodically check for incoming connections by calling this method. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classting_1_1TCPSocket.htm" title="a class which represents a TCP socket.">TCPSocket</a> object. One can later check if the returned socket object is valid or not by calling <a class="el" href="classting_1_1Socket.htm#a93e5124411fe45dec35c6ee62fdd77ee" title="Tells whether the socket is opened or not.">Socket::IsValid()</a> method on that object.<ul>
<li>if the socket is valid then it is a newly connected socket, further it can be used to send or receive data.</li>
<li>if the socket is invalid then there was no any connections pending, so no connection was accepted. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="a37517ec33cee52bba2d94a636eb9813f"></a><!-- doxytag: member="ting::TCPServerSocket::Open" ref="a37517ec33cee52bba2d94a636eb9813f" args="(u16 port, bool disableNaggle=false, u16 queueLength=50)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ting::TCPServerSocket::Open </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a>&nbsp;</td>
          <td class="paramname"> <em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>disableNaggle</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a>&nbsp;</td>
          <td class="paramname"> <em>queueLength</em> = <code>50</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Connects the socket or starts listening on it. </p>
<p>This method starts listening on the socket for incoming connections. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>port</em>&nbsp;</td><td>- IP port number to listen on. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>disableNaggle</em>&nbsp;</td><td>- enable/disable Naggle algorithm for all accepted connections. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>queueLength</em>&nbsp;</td><td>- the maximum length of the queue of pending connections. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2f4591ac79c9a3a19ca4c771698fc2fd"></a><!-- doxytag: member="ting::TCPServerSocket::operator=" ref="a2f4591ac79c9a3a19ca4c771698fc2fd" args="(const TCPServerSocket &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1TCPServerSocket.htm">TCPServerSocket</a>&amp; ting::TCPServerSocket::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1TCPServerSocket.htm">TCPServerSocket</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment operator, works similar to std::auto_ptr::operator=(). </p>
<p>After this assignment operator completes this socket object refers to the socket the s objejct referred, s become invalid. It works similar to std::auto_ptr::operator=() from standard C++ library. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>s</em>&nbsp;</td><td>- socket to assign from. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classting_1_1Socket.htm#adf9973457979069b4996b3faab1f4e24">ting::Socket</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Socket_8hpp_source.htm">Socket.hpp</a></li>
</ul>
</div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
