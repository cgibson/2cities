<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: Timer.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>Timer.hpp</h1><a href="Timer_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="comment">//#define M_ENABLE_TIMER_TRACE</span>
<a name="l00035"></a>00035 <span class="preprocessor">#ifdef M_ENABLE_TIMER_TRACE</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="preprocessor">#define M_TIMER_TRACE(x) TRACE(&lt;&lt;&quot;[Timer]&quot; x)</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00038"></a><a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">00038</a> <span class="preprocessor"></span><span class="preprocessor">#define M_TIMER_TRACE(x)</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span>
<a name="l00041"></a>00041 <span class="preprocessor">#ifdef _MSC_VER //If Microsoft C++ compiler</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#pragma warning(disable:4290)</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>
<a name="l00045"></a>00045 <span class="comment">//  ==System dependent headers inclusion==</span>
<a name="l00046"></a>00046 <span class="preprocessor">#if defined(__WIN32__) || defined(WIN32)</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#ifndef __WIN32__</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#define __WIN32__</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &lt;windows.h&gt;</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="preprocessor">#else //assume linux</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &lt;ctime&gt;</span>
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="preprocessor">#endif</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span><span class="comment">//~ ==System dependen headers inclusion==</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm" title="Debug utilities.">debug.hpp</a>&quot;</span> <span class="comment">//debugging facilities</span>
<a name="l00063"></a>00063 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00064"></a>00064 <span class="preprocessor">#include &quot;<a class="code" href="Singleton_8hpp.htm" title="Singleton base class (template).">Singleton.hpp</a>&quot;</span>
<a name="l00065"></a>00065 <span class="preprocessor">#include &quot;<a class="code" href="Thread_8hpp.htm" title="Multithreading library.">Thread.hpp</a>&quot;</span>
<a name="l00066"></a>00066 <span class="preprocessor">#include &quot;<a class="code" href="math_8hpp.htm" title="Math utilities.">math.hpp</a>&quot;</span>
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="keyword">namespace </span>ting{
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="comment">//forward declarations</span>
<a name="l00073"></a>00073 <span class="keyword">class </span>Timer;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="comment">//function prototypes</span>
<a name="l00078"></a>00078 <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> <a class="code" href="namespaceting.htm#a830387d5c7d300a176b380f9b5df3263" title="Returns number of milliseconds since system start.">GetTicks</a>();
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 
<a name="l00082"></a><a class="code" href="classting_1_1TimerLib.htm">00082</a> <span class="keyword">class </span><a class="code" href="classting_1_1TimerLib.htm">TimerLib</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1Singleton.htm" title="singleton base class.">Singleton</a>&lt;TimerLib&gt;{
<a name="l00083"></a><a class="code" href="classting_1_1TimerLib.htm#ac5cbf55b4418b0cfd5925261a024aeeb">00083</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1Timer.htm">ting::Timer</a>;
<a name="l00084"></a>00084 
<a name="l00085"></a>00085         <span class="keyword">class </span>TimerThread : <span class="keyword">public</span> ting::<a class="code" href="classting_1_1Thread.htm" title="a base class for threads.">Thread</a>{
<a name="l00086"></a>00086         <span class="keyword">public</span>:
<a name="l00087"></a>00087                 <span class="keywordtype">bool</span> quitFlag;
<a name="l00088"></a>00088                 
<a name="l00089"></a>00089                 <a class="code" href="classting_1_1Mutex.htm" title="Mutex object class Mutex stands for &amp;quot;Mutual execution&amp;quot;.">ting::Mutex</a> mutex;
<a name="l00090"></a>00090                 <a class="code" href="classting_1_1Semaphore.htm" title="Semaphore class.">ting::Semaphore</a> sema;
<a name="l00091"></a>00091 
<a name="l00092"></a>00092                 <span class="keyword">typedef</span> std::list&lt;Timer*&gt; T_TimerList;
<a name="l00093"></a>00093                 <span class="keyword">typedef</span> T_TimerList::iterator T_TimerIter;
<a name="l00094"></a>00094                 T_TimerList timers;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096                 <span class="keywordtype">bool</span> warpFlag;<span class="comment">//false if last call to GetTicks() returned value in first half</span>
<a name="l00097"></a>00097 
<a name="l00098"></a>00098                 TimerThread() :
<a name="l00099"></a>00099                                 quitFlag(false)
<a name="l00100"></a>00100                 {}
<a name="l00101"></a>00101 
<a name="l00102"></a>00102                 ~TimerThread(){
<a name="l00103"></a>00103                         <span class="comment">//at the time of DimerLib destroying there should be no active timers</span>
<a name="l00104"></a>00104                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;timers.size() == 0)
<a name="l00105"></a>00105                 }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107                 <span class="keyword">inline</span> <span class="keywordtype">void</span> AddTimer(<a class="code" href="classting_1_1Timer.htm">Timer</a>* timer, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> timeout);
<a name="l00108"></a>00108 
<a name="l00109"></a>00109                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> RemoveTimer(<a class="code" href="classting_1_1Timer.htm">Timer</a>* timer);
<a name="l00110"></a>00110 
<a name="l00111"></a>00111                 <span class="keyword">inline</span> <span class="keywordtype">void</span> SetQuitFlagAndSignalSema(){
<a name="l00112"></a>00112                         this-&gt;quitFlag = <span class="keyword">true</span>;
<a name="l00113"></a>00113                         this-&gt;sema.Signal();
<a name="l00114"></a>00114                 }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116                 <span class="comment">//override (inline is just to make possible method definition in hpp)</span>
<a name="l00117"></a>00117                 <span class="keyword">inline</span> <span class="keywordtype">void</span> Run();
<a name="l00118"></a>00118 
<a name="l00119"></a>00119         <span class="keyword">private</span>:
<a name="l00120"></a>00120                 <span class="keyword">inline</span> <span class="keywordtype">void</span> UpdateTimer(Timer* timer, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> newTimeout);
<a name="l00121"></a>00121 
<a name="l00122"></a>00122         } thread;
<a name="l00123"></a>00123 
<a name="l00124"></a>00124         <span class="keyword">inline</span> <span class="keywordtype">void</span> AddTimer(Timer* timer, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> timeout){
<a name="l00125"></a>00125                 this-&gt;thread.AddTimer(timer, timeout);
<a name="l00126"></a>00126         }
<a name="l00127"></a>00127         
<a name="l00128"></a>00128         <span class="keyword">inline</span> <span class="keywordtype">bool</span> RemoveTimer(Timer* timer){
<a name="l00129"></a>00129                 <span class="keywordflow">return</span> this-&gt;thread.RemoveTimer(timer);
<a name="l00130"></a>00130         }
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 <span class="keyword">public</span>:
<a name="l00133"></a><a class="code" href="classting_1_1TimerLib.htm#ae08affacd3880132ab4356d5f79aa744">00133</a>         <a class="code" href="classting_1_1TimerLib.htm#ae08affacd3880132ab4356d5f79aa744">TimerLib</a>(){
<a name="l00134"></a>00134                 this-&gt;thread.Start();
<a name="l00135"></a>00135         }
<a name="l00136"></a>00136 
<a name="l00137"></a><a class="code" href="classting_1_1TimerLib.htm#a85bd62d0f70b784d801d09b2496184de">00137</a>         <a class="code" href="classting_1_1TimerLib.htm#a85bd62d0f70b784d801d09b2496184de">~TimerLib</a>(){
<a name="l00138"></a>00138                 this-&gt;thread.SetQuitFlagAndSignalSema();
<a name="l00139"></a>00139                 this-&gt;thread.Join();
<a name="l00140"></a>00140         }
<a name="l00141"></a>00141 };
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 
<a name="l00145"></a><a class="code" href="classting_1_1Timer.htm">00145</a> <span class="keyword">class </span><a class="code" href="classting_1_1Timer.htm">Timer</a>{
<a name="l00146"></a><a class="code" href="classting_1_1Timer.htm#a75612bdc0466781a788a90eb6a8403ff">00146</a>         <span class="keyword">friend</span> <span class="keyword">class </span>TimerLib::TimerThread;
<a name="l00147"></a>00147 
<a name="l00148"></a>00148         <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> endTime;
<a name="l00149"></a>00149         <span class="keywordtype">bool</span> warp;
<a name="l00150"></a>00150 
<a name="l00151"></a>00151         <span class="keywordtype">bool</span> isStarted;
<a name="l00152"></a>00152 <span class="keyword">public</span>:
<a name="l00153"></a><a class="code" href="classting_1_1Timer.htm#ae38d80176321c4eef3e2b25922ae56d0">00153</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Timer.htm">Timer</a>() :
<a name="l00154"></a>00154                         warp(false),
<a name="l00155"></a>00155                         isStarted(false)
<a name="l00156"></a>00156         {}
<a name="l00157"></a>00157 
<a name="l00158"></a><a class="code" href="classting_1_1Timer.htm#ac6fd4e2d77f0a890d2b3c4a2e7f33b3d">00158</a>         <span class="keyword">virtual</span> <a class="code" href="classting_1_1Timer.htm#ac6fd4e2d77f0a890d2b3c4a2e7f33b3d">~Timer</a>(){
<a name="l00159"></a>00159                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<a class="code" href="classting_1_1Singleton.htm#a1b496757a109b25e3087b077c681fb49" title="tells if singleton object is created or not.">TimerLib::IsCreated</a>())
<a name="l00160"></a>00160                 this-&gt;Stop();
<a name="l00161"></a>00161         }
<a name="l00162"></a>00162 
<a name="l00163"></a><a class="code" href="classting_1_1Timer.htm#a1783c96644f34e19bc7b057a804f669f">00163</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Timer.htm#a1783c96644f34e19bc7b057a804f669f">Start</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> millisec){
<a name="l00164"></a>00164                 <span class="keywordflow">if</span>(millisec &lt; 0)
<a name="l00165"></a>00165                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Timer::Start() negative timeout value is not allowed&quot;</span>);
<a name="l00166"></a>00166 
<a name="l00167"></a>00167                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(<a class="code" href="classting_1_1Singleton.htm#a1b496757a109b25e3087b077c681fb49" title="tells if singleton object is created or not.">TimerLib::IsCreated</a>(), <span class="stringliteral">&quot;Timer library is not initialized, need to create TimerLib singletone object&quot;</span>)
<a name="l00168"></a>00168                 
<a name="l00169"></a>00169                 this-&gt;Stop();<span class="comment">//make sure the timer is not running already</span>
<a name="l00170"></a>00170                 <a class="code" href="classting_1_1Singleton.htm#af2840bff8ecd090e2f81545b82c0a50a" title="get singleton instance.">TimerLib::Inst</a>().AddTimer(<span class="keyword">this</span>, millisec);
<a name="l00171"></a>00171         }
<a name="l00172"></a>00172 
<a name="l00184"></a><a class="code" href="classting_1_1Timer.htm#aada6f3fc243e2a0588952b6cd626930d">00184</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Timer.htm#aada6f3fc243e2a0588952b6cd626930d" title="Stop the timer.">Stop</a>(){
<a name="l00185"></a>00185                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<a class="code" href="classting_1_1Singleton.htm#a1b496757a109b25e3087b077c681fb49" title="tells if singleton object is created or not.">TimerLib::IsCreated</a>())
<a name="l00186"></a>00186                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1Singleton.htm#af2840bff8ecd090e2f81545b82c0a50a" title="get singleton instance.">TimerLib::Inst</a>().RemoveTimer(<span class="keyword">this</span>);
<a name="l00187"></a>00187         }
<a name="l00188"></a>00188 
<a name="l00189"></a>00189         <span class="comment">//return number fo milliseconds to reschedule this timer for,</span>
<a name="l00190"></a>00190         <span class="comment">//return 0 for no timer rescheduling.</span>
<a name="l00191"></a>00191         <span class="keyword">virtual</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> OnExpire() = 0;
<a name="l00192"></a>00192 };
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 
<a name="l00196"></a>00196 <span class="comment">//methods</span>
<a name="l00197"></a>00197 
<a name="l00198"></a>00198 <span class="keyword">inline</span> <span class="keywordtype">void</span> TimerLib::TimerThread::UpdateTimer(Timer* timer, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> newTimeout){
<a name="l00199"></a>00199         <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> curTicks = <a class="code" href="namespaceting.htm#a830387d5c7d300a176b380f9b5df3263" title="Returns number of milliseconds since system start.">ting::GetTicks</a>();
<a name="l00200"></a>00200 
<a name="l00201"></a>00201         timer-&gt;endTime = curTicks + newTimeout;
<a name="l00202"></a>00202 
<a name="l00203"></a>00203         <span class="keywordflow">if</span>(timer-&gt;endTime &lt; curTicks){
<a name="l00204"></a>00204                 timer-&gt;warp = <span class="keyword">true</span>;
<a name="l00205"></a>00205         }<span class="keywordflow">else</span>{
<a name="l00206"></a>00206                 timer-&gt;warp = <span class="keyword">false</span>;
<a name="l00207"></a>00207         }
<a name="l00208"></a>00208 }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 <span class="keyword">inline</span> <span class="keywordtype">bool</span> TimerLib::TimerThread::RemoveTimer(Timer* timer){
<a name="l00213"></a>00213         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(timer)
<a name="l00214"></a>00214         ting::Mutex::Guard mutexGuard(this-&gt;mutex);
<a name="l00215"></a>00215 
<a name="l00216"></a>00216         if(!timer-&gt;isStarted)
<a name="l00217"></a>00217                 return false;
<a name="l00218"></a>00218 
<a name="l00219"></a>00219         <span class="comment">//if isStarted flag is set then the timer will be stopped now, so</span>
<a name="l00220"></a>00220         <span class="comment">//change the flag</span>
<a name="l00221"></a>00221         timer-&gt;isStarted = false;
<a name="l00222"></a>00222 
<a name="l00223"></a>00223         for(T_TimerIter i = this-&gt;timers.begin(); i != this-&gt;timers.end(); ++i){
<a name="l00224"></a>00224                 <span class="keywordflow">if</span>(*i == timer){
<a name="l00225"></a>00225                         this-&gt;timers.erase(i);
<a name="l00226"></a>00226                         this-&gt;sema.Signal();
<a name="l00227"></a>00227                         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00228"></a>00228                 }
<a name="l00229"></a>00229         }
<a name="l00230"></a>00230 
<a name="l00231"></a>00231         <span class="comment">//shall never get there because if timer-&gt;isStarted flag is set</span>
<a name="l00232"></a>00232         <span class="comment">//then the timer have to be in the list</span>
<a name="l00233"></a>00233         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00234"></a>00234 
<a name="l00235"></a>00235         return false;
<a name="l00236"></a>00236 }
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 inline <span class="keywordtype">void</span> TimerLib::TimerThread::AddTimer(<a class="code" href="classting_1_1Timer.htm#ae38d80176321c4eef3e2b25922ae56d0">Timer</a>* timer, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> timeout){
<a name="l00241"></a>00241         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(timer)
<a name="l00242"></a>00242         ting::Mutex::Guard mutexGuard(this-&gt;mutex);
<a name="l00243"></a>00243 
<a name="l00244"></a>00244         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(!timer-&gt;isStarted)
<a name="l00245"></a>00245 
<a name="l00246"></a>00246         timer-&gt;isStarted = true;
<a name="l00247"></a>00247 
<a name="l00248"></a>00248         this-&gt;UpdateTimer(timer, timeout);
<a name="l00249"></a>00249 
<a name="l00250"></a>00250         this-&gt;timers.push_back(timer);
<a name="l00251"></a>00251         this-&gt;sema.Signal();
<a name="l00252"></a>00252 }
<a name="l00253"></a>00253 
<a name="l00254"></a>00254 
<a name="l00255"></a>00255 
<a name="l00256"></a>00256 <span class="comment">//override</span>
<a name="l00257"></a>00257 inline <span class="keywordtype">void</span> TimerLib::TimerThread::Run(){
<a name="l00258"></a>00258         <a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">M_TIMER_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;TimerLib::TimerThread::Run(): enter&quot;</span> &lt;&lt; std::endl)
<a name="l00259"></a>00259         <span class="comment">//init warp flag</span>
<a name="l00260"></a>00260         if(ting::GetTicks() &lt; ting::<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(-1) / 2){
<a name="l00261"></a>00261                 this-&gt;warpFlag = <span class="keyword">false</span>;
<a name="l00262"></a>00262         }<span class="keywordflow">else</span>{
<a name="l00263"></a>00263                 this-&gt;warpFlag = <span class="keyword">true</span>;
<a name="l00264"></a>00264         }
<a name="l00265"></a>00265 
<a name="l00266"></a>00266         <a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">M_TIMER_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;TimerLib::TimerThread::Run(): creating mutex guard&quot;</span> &lt;&lt; std::endl)
<a name="l00267"></a>00267         ting::Mutex::Guard mutexGuard(this-&gt;mutex);
<a name="l00268"></a>00268         <a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">M_TIMER_TRACE</a>(&lt;&lt; &quot;TimerLib::TimerThread::Run(): entering while()&quot; &lt;&lt; std::endl)
<a name="l00269"></a>00269         while(!this-&gt;quitFlag){
<a name="l00270"></a>00270                 <span class="comment">//check warp</span>
<a name="l00271"></a>00271                 <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> ticks = <a class="code" href="namespaceting.htm#a830387d5c7d300a176b380f9b5df3263" title="Returns number of milliseconds since system start.">ting::GetTicks</a>();
<a name="l00272"></a>00272                 <a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">M_TIMER_TRACE</a>(&lt;&lt;<span class="stringliteral">&quot;TimerThread: ticks = &quot;</span> &lt;&lt; ticks &lt;&lt; std::endl)
<a name="l00273"></a>00273 
<a name="l00274"></a>00274                 if(ticks &lt; ting::<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(-1) / 2){
<a name="l00275"></a>00275                         <span class="keywordflow">if</span>(this-&gt;warpFlag){
<a name="l00276"></a>00276                                 <span class="comment">//Warp detected.</span>
<a name="l00277"></a>00277                                 <span class="comment">//clear all warp flags, remove timers which was not warped</span>
<a name="l00278"></a>00278                                 <span class="keywordflow">for</span>(T_TimerIter i = this-&gt;timers.begin(); i != this-&gt;timers.end();){
<a name="l00279"></a>00279                                         <span class="comment">//if the timer was not warped and we are warping</span>
<a name="l00280"></a>00280                                         <span class="comment">//then this timer is surely expired, need to remove it and</span>
<a name="l00281"></a>00281                                         <span class="comment">//notify client calling OnExpire().</span>
<a name="l00282"></a>00282                                         <span class="keywordflow">if</span>(!(*i)-&gt;warp){
<a name="l00283"></a>00283                                                 u32 newTimeout = (*i)-&gt;OnExpire();
<a name="l00284"></a>00284                                                 <span class="keywordflow">if</span>(newTimeout == 0){
<a name="l00285"></a>00285                                                         (*i)-&gt;isStarted = <span class="keyword">false</span>;
<a name="l00286"></a>00286                                                         i = this-&gt;timers.erase(i);
<a name="l00287"></a>00287                                                         <span class="keywordflow">continue</span>;
<a name="l00288"></a>00288                                                 }<span class="keywordflow">else</span>{
<a name="l00289"></a>00289                                                         this-&gt;UpdateTimer(*i, newTimeout);
<a name="l00290"></a>00290                                                 }
<a name="l00291"></a>00291                                         }<span class="keywordflow">else</span>{
<a name="l00292"></a>00292                                                 (*i)-&gt;warp = <span class="keyword">false</span>;
<a name="l00293"></a>00293                                         }
<a name="l00294"></a>00294                                         ++i;
<a name="l00295"></a>00295                                 }
<a name="l00296"></a>00296                         }
<a name="l00297"></a>00297                         this-&gt;warpFlag = <span class="keyword">false</span>;
<a name="l00298"></a>00298                 }<span class="keywordflow">else</span>{
<a name="l00299"></a>00299                         this-&gt;warpFlag = <span class="keyword">true</span>;
<a name="l00300"></a>00300                 }
<a name="l00301"></a>00301 
<a name="l00302"></a>00302                 <span class="comment">//notify expired timers</span>
<a name="l00303"></a>00303                 <a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">M_TIMER_TRACE</a>(&lt;&lt;<span class="stringliteral">&quot;TimerThread: search for expired timers, size = &quot;</span> &lt;&lt; this-&gt;timers.size() &lt;&lt; std::endl)
<a name="l00304"></a>00304                 <span class="keywordflow">for</span>(T_TimerIter i = this-&gt;timers.begin(); i != this-&gt;timers.end();){
<a name="l00305"></a>00305                         <span class="keywordflow">if</span>(!(*i)-&gt;warp){
<a name="l00306"></a>00306                                 <a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">M_TIMER_TRACE</a>(&lt;&lt;<span class="stringliteral">&quot;TimerThread: warp is not set, endTime = &quot;</span>&lt;&lt; (*i)-&gt;endTime &lt;&lt; std::endl)
<a name="l00307"></a>00307                                 if((*i)-&gt;endTime &lt;= ticks){
<a name="l00308"></a>00308                                         u32 newTimeout = (*i)-&gt;OnExpire();
<a name="l00309"></a>00309                                         <span class="keywordflow">if</span>(newTimeout == 0){
<a name="l00310"></a>00310                                                 (*i)-&gt;isStarted = <span class="keyword">false</span>;
<a name="l00311"></a>00311                                                 i = this-&gt;timers.erase(i);
<a name="l00312"></a>00312                                                 <span class="keywordflow">continue</span>;
<a name="l00313"></a>00313                                         }<span class="keywordflow">else</span>{<span class="comment">//set timer again</span>
<a name="l00314"></a>00314                                                 this-&gt;UpdateTimer(*i, newTimeout);
<a name="l00315"></a>00315                                         }
<a name="l00316"></a>00316                                 }
<a name="l00317"></a>00317                         }<span class="keywordflow">else</span>{
<a name="l00318"></a>00318                                 <a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">M_TIMER_TRACE</a>(&lt;&lt;<span class="stringliteral">&quot;TimerThread: warp is set&quot;</span> &lt;&lt; std::endl)
<a name="l00319"></a>00319                         }
<a name="l00320"></a>00320                         ++i;
<a name="l00321"></a>00321                 }
<a name="l00322"></a>00322 
<a name="l00323"></a>00323                 <span class="keywordflow">if</span>(this-&gt;timers.size() == 0){
<a name="l00324"></a>00324                         this-&gt;mutex.Unlock();
<a name="l00325"></a>00325                         <a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">M_TIMER_TRACE</a>(&lt;&lt;<span class="stringliteral">&quot;TimerThread: waiting forever&quot;</span> &lt;&lt; std::endl)
<a name="l00326"></a>00326                         this-&gt;sema.Wait();
<a name="l00327"></a>00327                         <a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">M_TIMER_TRACE</a>(&lt;&lt;&quot;TimerThread: signalled&quot; &lt;&lt; std::endl)
<a name="l00328"></a>00328                         this-&gt;mutex.Lock();
<a name="l00329"></a>00329                         continue;
<a name="l00330"></a>00330                 }
<a name="l00331"></a>00331 
<a name="l00332"></a>00332                 <span class="comment">//calculate number of milliseconds to wait</span>
<a name="l00333"></a>00333                 ting::u32 minEndTime = ting::u32(-1);
<a name="l00334"></a>00334                 for(T_TimerIter i = this-&gt;timers.begin(); i != this-&gt;timers.end(); ++i){
<a name="l00335"></a>00335                         <span class="keywordflow">if</span>(!(*i)-&gt;warp){
<a name="l00336"></a>00336                                 <span class="keywordflow">if</span>((*i)-&gt;endTime &lt; minEndTime){
<a name="l00337"></a>00337                                         minEndTime = (*i)-&gt;endTime;
<a name="l00338"></a>00338                                 }
<a name="l00339"></a>00339                         }
<a name="l00340"></a>00340                 }
<a name="l00341"></a>00341 
<a name="l00342"></a>00342                 <span class="keywordtype">unsigned</span> millis = minEndTime - ticks;
<a name="l00343"></a>00343 
<a name="l00344"></a>00344                 <span class="comment">//make sure we will update warpFlag at least 4 times</span>
<a name="l00345"></a>00345                 <span class="comment">//per ticks cycle (ticks cycle = 0xffffffffff ticks)</span>
<a name="l00346"></a>00346                 millis = <a class="code" href="namespaceting.htm#a0ff74d4f3338635cfee21416cca23774" title="Get minimal of two given values.">ting::Min</a>(millis, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>(-1) / 4);
<a name="l00347"></a>00347                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(millis != 0)
<a name="l00348"></a>00348 
<a name="l00349"></a>00349                 this-&gt;mutex.Unlock();
<a name="l00350"></a>00350 
<a name="l00351"></a>00351                 <a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">M_TIMER_TRACE</a>(&lt;&lt;&quot;TimerThread: waiting for &quot;&lt;&lt;millis&lt;&lt; &quot; ms&quot; &lt;&lt; std::endl)
<a name="l00352"></a>00352                 this-&gt;sema.Wait(millis);
<a name="l00353"></a>00353                 <a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">M_TIMER_TRACE</a>(&lt;&lt;&quot;TimerThread: signalled&quot; &lt;&lt; std::endl)
<a name="l00354"></a>00354                 <span class="comment">//It does not matter signalled or timed out</span>
<a name="l00355"></a>00355 
<a name="l00356"></a>00356                 this-&gt;mutex.Lock();
<a name="l00357"></a>00357         }<span class="comment">//~while</span>
<a name="l00358"></a>00358 
<a name="l00359"></a>00359         <a class="code" href="Timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">M_TIMER_TRACE</a>(&lt;&lt; &quot;TimerLib::TimerThread::Run(): exit&quot; &lt;&lt; std::endl)
<a name="l00360"></a>00360 }<span class="comment">//~Run()</span>
<a name="l00361"></a>00361 
<a name="l00362"></a>00362 
<a name="l00363"></a>00363 
<a name="l00368"></a><a class="code" href="namespaceting.htm#a830387d5c7d300a176b380f9b5df3263">00368</a> inline ting::u32 GetTicks(){
<a name="l00369"></a>00369 <span class="preprocessor">#ifdef __WIN32__</span>
<a name="l00370"></a>00370 <span class="preprocessor"></span>        <span class="keyword">static</span> LARGE_INTEGER perfCounterFreq = {0};
<a name="l00371"></a>00371     <span class="keywordflow">if</span>(perfCounterFreq.QuadPart == 0){
<a name="l00372"></a>00372         <span class="keywordflow">if</span>(QueryPerformanceFrequency(&amp;perfCounterFreq) == FALSE){
<a name="l00373"></a>00373             <span class="comment">//looks like the system does not support high resolution tick counter</span>
<a name="l00374"></a>00374             <span class="keywordflow">return</span> GetTickCount();
<a name="l00375"></a>00375         }
<a name="l00376"></a>00376     }
<a name="l00377"></a>00377     LARGE_INTEGER ticks;
<a name="l00378"></a>00378     <span class="keywordflow">if</span>(QueryPerformanceCounter(&amp;ticks) == FALSE){
<a name="l00379"></a>00379         <span class="keywordflow">return</span> GetTickCount();
<a name="l00380"></a>00380     }
<a name="l00381"></a>00381 
<a name="l00382"></a>00382     <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>((ticks.QuadPart * 1000) / perfCounterFreq.QuadPart);
<a name="l00383"></a>00383 <span class="preprocessor">#else</span>
<a name="l00384"></a>00384 <span class="preprocessor"></span>        timespec ts;
<a name="l00385"></a>00385         <span class="keywordflow">if</span>(clock_gettime(CLOCK_MONOTONIC, &amp;ts) == -1)
<a name="l00386"></a>00386                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;GetTicks(): clock_gettime() returned error&quot;</span>);
<a name="l00387"></a>00387 
<a name="l00388"></a>00388         <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(ts.tv_sec) * 1000 + u32(ts.tv_nsec / 1000000));
<a name="l00389"></a>00389 <span class="preprocessor">#endif</span>
<a name="l00390"></a>00390 <span class="preprocessor"></span>}
<a name="l00391"></a>00391 
<a name="l00392"></a>00392 
<a name="l00393"></a>00393 
<a name="l00394"></a>00394 }<span class="comment">//~namespace</span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
