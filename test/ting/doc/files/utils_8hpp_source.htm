<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>ting: utils.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<h1>utils.hpp</h1><a href="utils_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2009-2010 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// ting 0.4.2</span>
<a name="l00024"></a>00024 <span class="comment">// Homepage: http://code.google.com/p/ting</span>
<a name="l00025"></a>00025 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="comment">//#ifdef _MSC_VER //If Microsoft C++ compiler</span>
<a name="l00035"></a>00035 <span class="comment">//#pragma warning(disable:4290)</span>
<a name="l00036"></a>00036 <span class="comment">//#endif</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm" title="Debug utilities.">debug.hpp</a>&quot;</span> <span class="comment">//debugging facilities</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="Thread_8hpp.htm" title="Multithreading library.">Thread.hpp</a>&quot;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">//define macro used to align structures in memory</span>
<a name="l00045"></a>00045 <span class="preprocessor">#ifdef _MSC_VER //If Microsoft C++ compiler</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">#define M_DECLARE_ALIGNED(x)</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#define M_DECLARE_ALIGNED_MSVC(x) __declspec(align(x))</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 <span class="preprocessor">#elif defined(__GNUG__)//GNU g++ compiler</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">#define M_DECLARE_ALIGNED(x) __attribute__ ((aligned(x)))</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">#define M_DECLARE_ALIGNED_MSVC(x)</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span>
<a name="l00053"></a>00053 <span class="preprocessor">#else</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown compiler&quot;</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span>
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="keyword">namespace </span>ting{
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00069"></a><a class="code" href="namespaceting.htm#ab7e1d03ecc64fcfc9cbbc48816cbdece">00069</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceting.htm#ab7e1d03ecc64fcfc9cbbc48816cbdece" title="Exchange two values.">Exchange</a>(T &amp;a, T &amp;b){
<a name="l00070"></a>00070         T tmp = a;
<a name="l00071"></a>00071         a = b;
<a name="l00072"></a>00072         b = tmp;
<a name="l00073"></a>00073 }
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="preprocessor">#ifndef M_DOC_DONT_EXTRACT //for doxygen</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span><span class="comment">//quick exchange two unsigned 32bit integers</span>
<a name="l00079"></a>00079 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> Exchange&lt;u32&gt;(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>&amp; x, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>&amp; y){
<a name="l00080"></a>00080 <span class="comment">//      TRACE(&lt;&lt;&quot;Exchange&lt;u32&gt;(): invoked&quot;&lt;&lt;std::endl)</span>
<a name="l00081"></a>00081         <span class="comment">//NOTE: Do not make y^=x^=y^=x;</span>
<a name="l00082"></a>00082         <span class="comment">//Some compilers (e.g. gcc4.1) may generate incorrect code</span>
<a name="l00083"></a>00083         y ^= x;
<a name="l00084"></a>00084         x ^= y;
<a name="l00085"></a>00085         y ^= x;
<a name="l00086"></a>00086 }
<a name="l00087"></a>00087 <span class="preprocessor">#endif</span>
<a name="l00088"></a>00088 <span class="preprocessor"></span>
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 <span class="preprocessor">#ifndef M_DOC_DONT_EXTRACT //for doxygen</span>
<a name="l00092"></a>00092 <span class="preprocessor"></span><span class="comment">//quick exchange two floats</span>
<a name="l00093"></a>00093 <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> Exchange&lt;float&gt;(<span class="keywordtype">float</span>&amp; x, <span class="keywordtype">float</span>&amp; y){
<a name="l00094"></a>00094 <span class="comment">//      TRACE(&lt;&lt;&quot;Exchange&lt;float&gt;(): invoked&quot;&lt;&lt;std::endl)</span>
<a name="l00095"></a>00095         Exchange&lt;u32&gt;(<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>&amp;<span class="keyword">&gt;</span>(x), reinterpret_cast&lt;u32&amp;&gt;(y));
<a name="l00096"></a>00096 }
<a name="l00097"></a>00097 <a class="code" href="namespaceting.htm#a4e15e8cdd044afbab6acf181c54edcb5">STATIC_ASSERT</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">float</span>) == <span class="keyword">sizeof</span>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>))
<a name="l00098"></a>00098 <span class="preprocessor">#endif</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span>
<a name="l00100"></a>00100 
<a name="l00101"></a>00101 
<a name="l00127"></a><a class="code" href="namespaceting.htm#a9fe2932411d412793f585877ac57e4af">00127</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceting.htm#a9fe2932411d412793f585877ac57e4af" title="Clamp value top.">ClampTop</a>(T&amp; v, <span class="keyword">const</span> T top){
<a name="l00128"></a>00128         <span class="keywordflow">if</span>(v &gt; top){
<a name="l00129"></a>00129                 v = top;
<a name="l00130"></a>00130         }
<a name="l00131"></a>00131 }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 
<a name="l00140"></a><a class="code" href="namespaceting.htm#abbda4cbd8b58ac08b386e315bd349a6f">00140</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceting.htm#abbda4cbd8b58ac08b386e315bd349a6f" title="Clamp value bottom.">ClampBottom</a>(T&amp; v, <span class="keyword">const</span> T bottom){
<a name="l00141"></a>00141         <span class="keywordflow">if</span>(v &lt; bottom){
<a name="l00142"></a>00142                 v = bottom;
<a name="l00143"></a>00143         }
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 
<a name="l00153"></a><a class="code" href="namespaceting.htm#a2c64b94277d731225090b2b584baa6e1">00153</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceting.htm#a2c64b94277d731225090b2b584baa6e1" title="convert byte order of 16 bit value to network format.">ToNetworkFormat16</a>(<a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> value, <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* out_buf){
<a name="l00154"></a>00154         *<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a>*<span class="keyword">&gt;</span>(out_buf) = value;<span class="comment">//assume little-endian</span>
<a name="l00155"></a>00155 }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 
<a name="l00164"></a><a class="code" href="namespaceting.htm#a7be6e3e8a4e67cd4b6a420c89bffae2d">00164</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceting.htm#a7be6e3e8a4e67cd4b6a420c89bffae2d" title="convert byte order of 32 bit value to network format.">ToNetworkFormat32</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> value, <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* out_buf){
<a name="l00165"></a>00165         *<span class="keyword">reinterpret_cast&lt;</span><a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>*<span class="keyword">&gt;</span>(out_buf) = value;<span class="comment">//assume little-endian</span>
<a name="l00166"></a>00166 }
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 
<a name="l00175"></a><a class="code" href="namespaceting.htm#a2a302e45f7284df559991c8b7888ceec">00175</a> <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> <a class="code" href="namespaceting.htm#a2a302e45f7284df559991c8b7888ceec" title="Convert 16 bit value from network byte order to native byte order.">FromNetworkFormat16</a>(<span class="keyword">const</span> <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* buf){
<a name="l00176"></a>00176         <span class="keywordflow">return</span> *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a>*<span class="keyword">&gt;</span>(buf);<span class="comment">//assume little-endian</span>
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 
<a name="l00186"></a><a class="code" href="namespaceting.htm#a34315587a277f84864e9d6cf996251cf">00186</a> <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> <a class="code" href="namespaceting.htm#a34315587a277f84864e9d6cf996251cf" title="Convert 32 bit value from network byte order to native byte order.">FromNetworkFormat32</a>(<span class="keyword">const</span> <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* buf){
<a name="l00187"></a>00187         <span class="keywordflow">return</span> *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>*<span class="keyword">&gt;</span>(buf);<span class="comment">//assume little-endian</span>
<a name="l00188"></a>00188 }
<a name="l00189"></a>00189 
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 
<a name="l00196"></a><a class="code" href="namespaceting.htm#a66e29735360f55b08f4744137a16bf4f">00196</a> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="namespaceting.htm#a66e29735360f55b08f4744137a16bf4f" title="Maximal value of unsigned integer type.">DMaxUint</a>(){
<a name="l00197"></a>00197         <span class="keywordflow">return</span> unsigned(-1);
<a name="l00198"></a>00198 }
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 
<a name="l00206"></a><a class="code" href="namespaceting.htm#af2db06bf4b5d3b18105cdb10237c1fd6">00206</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespaceting.htm#af2db06bf4b5d3b18105cdb10237c1fd6" title="Maximal value of integer type.">DMaxInt</a>(){
<a name="l00207"></a>00207         <span class="keywordflow">return</span> int(<a class="code" href="namespaceting.htm#a66e29735360f55b08f4744137a16bf4f" title="Maximal value of unsigned integer type.">DMaxUint</a>() &gt;&gt; 1);
<a name="l00208"></a>00208 }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00216"></a><a class="code" href="namespaceting.htm#a742bda65d1dbf0fba369934891f8e6c9">00216</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespaceting.htm#a742bda65d1dbf0fba369934891f8e6c9" title="Minimal value of integer type.">DMinInt</a>(){
<a name="l00217"></a>00217         <span class="keywordflow">return</span> ~<a class="code" href="namespaceting.htm#af2db06bf4b5d3b18105cdb10237c1fd6" title="Maximal value of integer type.">DMaxInt</a>();
<a name="l00218"></a>00218 }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 
<a name="l00221"></a>00221 
<a name="l00222"></a>00222 }<span class="comment">//~namespace ting</span>
<a name="l00223"></a>00223 
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Apr 7 15:15:25 2010 for ting by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
